{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.70/accessibility.md",
  "source_file_content_hash": "60b2b824a3fab5f13adc9ea87b35a8bf49849fe6caa7e220047349da869529ff",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: accessibility\ntitle: Accessibility\ndescription: Create mobile apps accessible to assistive technology with React Native's suite of APIs designed to work with Android and iOS.\n---",
      "source_content_hash": "d3e2cc955a9683b5e863775c90342b5d1cfa5debea8fc004bbe20921e7aac68c",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "6ef78e84",
      "source_content": "Both Android and iOS provide APIs for integrating apps with assistive technologies like the bundled screen readers VoiceOver (iOS) and TalkBack (Android). React Native has complementary APIs that let your app accommodate all users.",
      "source_content_hash": "261d5938519cb3a310cd1d77fe255fbb8f8363f6f8d9fc6b99387018c4cf72a1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "Android 和 iOS 都提供 API 讓應用程式能與輔助技術（如內建的螢幕閱讀器 VoiceOver（iOS）和 TalkBack（Android））整合。React Native 提供相應的 API，讓您的應用程式能服務所有使用者。"
      }
    },
    {
      "segment_id": "0d5e1c45",
      "source_content": ":::info\nAndroid and iOS differ slightly in their approaches, and thus the React Native implementations may vary by platform.\n:::",
      "source_content_hash": "40d9d4197b3e3c7630b64a17f122b5d77bedead99eaddc161ba659482f4f82eb",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::info\nAndroid 和 iOS 的實現方式略有不同，因此 React Native 的實作可能因平台而異。\n:::"
      }
    },
    {
      "segment_id": "ba4f48ff",
      "source_content": "## Accessibility properties",
      "source_content_hash": "b45a76c604be4bb1882f297306b3ed46df6d82226b735b28b108a1d41016dfc6",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 無障礙屬性"
      }
    },
    {
      "segment_id": "e14c9928",
      "source_content": "### `accessible`",
      "source_content_hash": "7e2f45d1c536354ff4e8f949668ed0b63fc433f315af4147b029c19a8259c830",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `accessible`"
      }
    },
    {
      "segment_id": "42ad8e83",
      "source_content": "When `true`, indicates that the view is an accessibility element. When a view is an accessibility element, it groups its children into a single selectable component. By default, all touchable elements are accessible.",
      "source_content_hash": "b53bf83f868b939017c4f79351a44aa2373bc3634235721c6ddafa49b6e4445c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "當設為 `true` 時，表示該視圖是一個無障礙元素。當視圖是無障礙元素時，它會將其子元素分組為一個可選取的元件。預設情況下，所有可觸碰元素都是無障礙的。"
      }
    },
    {
      "segment_id": "f6168993",
      "source_content": "On Android, `accessible={true}` property for a react-native View will be translated into native `focusable={true}`.",
      "source_content_hash": "0e37ee39c40be57b722f01694db89392225b7233fc207962882061bebfad657d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在 Android 上，react-native View 的 `accessible={true}` 屬性會被轉換為原生的 `focusable={true}`。"
      }
    },
    {
      "segment_id": "cbbebf8e",
      "source_content": "```jsx\n<View accessible={true}>\n  <Text>text one</Text>\n  <Text>text two</Text>\n</View>\n```",
      "source_content_hash": "8f8cb9c3206eb23259a09f37a66314bcabf9b1671a2a7af8f4e7e5543f3ae820",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_cbbebf8e"
      }
    },
    {
      "segment_id": "d9172fa4",
      "source_content": "In the above example, we can't get accessibility focus separately on 'text one' and 'text two'. Instead we get focus on a parent view with 'accessible' property.",
      "source_content_hash": "a1e5fbacdf906b3bf5c286fe4cca74ce9b2d9d57255a13eeb5896c8500ebae10",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在上面的例子中，我們無法分別在「text one」和「text two」上獲得無障礙焦點。相反，我們會在具有「accessible」屬性的父視圖上獲得焦點。"
      }
    },
    {
      "segment_id": "d06306f7",
      "source_content": "### `accessibilityLabel`",
      "source_content_hash": "4f55de35ce0c561187344a423b6279d22ada7d874f880caef84af52c16646758",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `accessibilityLabel`"
      }
    },
    {
      "segment_id": "73ab96a3",
      "source_content": "When a view is marked as accessible, it is a good practice to set an accessibilityLabel on the view, so that people who use VoiceOver know what element they have selected. VoiceOver will read this string when a user selects the associated element.",
      "source_content_hash": "f22fc345a58f2dcc5ff6c02de2da12463b0478abf80885c487bb6e0f3fe75398",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "當視圖被標記為無障礙時，最好在視圖上設置一個 accessibilityLabel，這樣使用 VoiceOver 的人就知道他們選擇了什麼元素。當用戶選擇相關元素時，VoiceOver 會讀出這個字串。"
      }
    },
    {
      "segment_id": "7499a4e7",
      "source_content": "To use, set the `accessibilityLabel` property to a custom string on your View, Text or Touchable:",
      "source_content_hash": "c118e171017da801e63085d0d317e055ed154e4f87707fb71dd31925199c95f5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "要使用此功能，請在您的 View、Text 或 Touchable 上將 `accessibilityLabel` 屬性設為自訂字串："
      }
    },
    {
      "segment_id": "076d64d1",
      "source_content": "```jsx\n<TouchableOpacity\n  accessible={true}\n  accessibilityLabel=\"Tap me!\"\n  onPress={onPress}>\n  <View style={styles.button}>\n    <Text style={styles.buttonText}>Press me!</Text>\n  </View>\n</TouchableOpacity>\n```",
      "source_content_hash": "ca80fef4939a8cb679758af57e317cee843a52bde4be4abfbe8c801cede66de2",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_076d64d1"
      }
    },
    {
      "segment_id": "13d9cd70",
      "source_content": "In the above example, the `accessibilityLabel` on the TouchableOpacity element would default to \"Press me!\". The label is constructed by concatenating all Text node children separated by spaces.",
      "source_content_hash": "881a873e65937f86a18f5efe38b614e65147ae3ed6c6ead8ee194f490b31ca52",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在上面的例子中，TouchableOpacity 元素的 `accessibilityLabel` 預設為「Press me!」。標籤是通過將所有 Text 節點子元素以空格分隔連接起來構建的。"
      }
    },
    {
      "segment_id": "6f930b2f",
      "source_content": "### `accessibilityLabelledBy` <div class=\"label android\">Android</div>",
      "source_content_hash": "1e15b75b5d225a879f31c96b4bddfe8b6891095e7e97c08af6e6a57ae10ce1e8",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `accessibilityLabelledBy` <div class=\"label android\">Android</div>"
      }
    },
    {
      "segment_id": "c504c207",
      "source_content": "A reference to another element [nativeID](view.md#nativeid) used to build complex forms.\nThe value of `accessibilityLabelledBy` should match the `nativeID` of the related element:",
      "source_content_hash": "c524de301e9ffbeb3f70589565c559e64e6905dfa295b7a399239c8a604c541f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "用於構建複雜表單的對另一個元素 [nativeID](view.md#nativeid) 的引用。`accessibilityLabelledBy` 的值應與相關元素的 `nativeID` 匹配："
      }
    },
    {
      "segment_id": "3ce8f045",
      "source_content": "```jsx\n<View>\n  <Text nativeID=\"formLabel\">Label for Input Field</Text>\n  <TextInput\n    accessibilityLabel=\"input\"\n    accessibilityLabelledBy=\"formLabel\"\n  />\n</View>\n```",
      "source_content_hash": "f9be561487b9acf75ae1e5d4e74f9a0138ba629f9e65214b2a85961094d9522f",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_3ce8f045"
      }
    },
    {
      "segment_id": "79ad944d",
      "source_content": "In the above example, the screenreader announces `Input, Edit Box for Label for Input Field` when focusing on the TextInput.",
      "source_content_hash": "6e361e4699a1d470421caf94a8aa6eefb25a2968f1cfb4f65adf13935e08a872",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "In the above example, the screenreader announces `Input, Edit Box for Label for Input Field` when focusing on the TextInput."
      }
    },
    {
      "segment_id": "8c6d7ee7",
      "source_content": "### `accessibilityHint`",
      "source_content_hash": "bedd0a5bcd9baf72a419279154a2810f95389d1831588606f607037dbc93a9c3",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `accessibilityHint`"
      }
    },
    {
      "segment_id": "06e24cc0",
      "source_content": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not clear from the accessibility label.",
      "source_content_hash": "a28e86300fde49260b1d879c349bbc48a31ed8492169472d6997c74c3c686cd7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "當無障礙標籤無法清楚表達執行操作後的結果時，無障礙提示能幫助使用者理解在無障礙元素上執行操作時會發生什麼。"
      }
    },
    {
      "segment_id": "7f71ff2a",
      "source_content": "To use, set the `accessibilityHint` property to a custom string on your View, Text or Touchable:",
      "source_content_hash": "d1f3d0855b0d291421da7cd85b19a0d67ae22cd96636664edff591c7017c1fa4",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "要使用此功能，請在您的 View、Text 或 Touchable 上將 `accessibilityHint` 屬性設為自訂字串："
      }
    },
    {
      "segment_id": "4fb3ded8",
      "source_content": "```jsx\n<TouchableOpacity\n  accessible={true}\n  accessibilityLabel=\"Go back\"\n  accessibilityHint=\"Navigates to the previous screen\"\n  onPress={onPress}>\n  <View style={styles.button}>\n    <Text style={styles.buttonText}>Back</Text>\n  </View>\n</TouchableOpacity>\n```",
      "source_content_hash": "919d6fc315ab001f23da11512107b4911776e82ff3ab5b278a1fad6ae1c72fc0",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_4fb3ded8"
      }
    },
    {
      "segment_id": "a1fa5396",
      "source_content": "<div class=\"label ios basic\">iOS</div>",
      "source_content_hash": "d12cd64d57e131141051e3f6f759bb4d0997d9ff1aa7744f41970c0dc1491c5f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "<div class=\"label ios basic\">iOS</div>"
      }
    },
    {
      "segment_id": "ec619944",
      "source_content": "In the above example, VoiceOver will read the hint after the label, if the user has hints enabled in the device's VoiceOver settings. Read more about guidelines for `accessibilityHint` in the [iOS Developer Docs](https://developer.apple.com/documentation/objectivec/nsobject/1615093-accessibilityhint)",
      "source_content_hash": "fc47f2bdc80f43c44f0d4aec7990112bc29b91c31f07e1920dd988dc99661ec6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "In the above example, VoiceOver will read the hint after the label, if the user has hints enabled in the device's VoiceOver settings. Read more about guidelines for `accessibilityHint` in the [iOS Developer Docs](https://developer.apple.com/documentation/objectivec/nsobject/1615093-accessibilityhint)"
      }
    },
    {
      "segment_id": "2547a6bb",
      "source_content": "<div class=\"label android basic\">Android</div>",
      "source_content_hash": "0504290da27a4b6fe2bacace04d519346b6419ebfc0d4b5a397e6f2e4b928e5a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "<div class=\"label android basic\">Android</div>"
      }
    },
    {
      "segment_id": "0750bfa1",
      "source_content": "In the above example, TalkBack will read the hint after the label. At this time, hints cannot be turned off on Android.",
      "source_content_hash": "a4078d33033461e03e008bd19755884a6e42eef6813848a7d1a788c4eb11b043",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在上面的例子中，TalkBack 會在標籤後讀出提示。目前，Android 上的提示無法關閉。"
      }
    },
    {
      "segment_id": "bd30d33e",
      "source_content": "### `accessibilityLanguage` <div class=\"label ios\">iOS</div>",
      "source_content_hash": "3dc0369a4635cd2313255713560a12e19a44f4ce4fde6140a6d2611dd0e6277d",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `accessibilityLanguage` <div class=\"label ios\">iOS</div>"
      }
    },
    {
      "segment_id": "6b77b644",
      "source_content": "By using the `accessibilityLanguage` property, the screen reader will understand which language to use while reading the element's **label**, **value** and **hint**. The provided string value must follow the [BCP 47 specification](https://www.rfc-editor.org/info/bcp47).",
      "source_content_hash": "dcb98de7ead9377672484a416d41f137a3eaf69c0cda546b8ec9a8f9c449e18a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "通過使用 `accessibilityLanguage` 屬性，螢幕閱讀器會理解在讀取元素的**標籤**、**值**和**提示**時應使用哪種語言。提供的字串值必須遵循 [BCP 47 規範](https://www.rfc-editor.org/info/bcp47)。"
      }
    },
    {
      "segment_id": "19913a56",
      "source_content": "```jsx\n<View\n  accessible={true}\n  accessibilityLabel=\"Pizza\"\n  accessibilityLanguage=\"it-IT\">\n  <Text>🍕</Text>\n</View>\n```",
      "source_content_hash": "612e905d54dbdd05a1c213b9fc99a561ac4740289477c201f082e74e9ce8c8bc",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_19913a56"
      }
    },
    {
      "segment_id": "54bafb10",
      "source_content": "### `accessibilityIgnoresInvertColors` <div class=\"label ios\">iOS</div>",
      "source_content_hash": "5a4ecceada547eee228617a551914cf78b1fd79d85367a9e6767e48b3a929fd5",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `accessibilityIgnoresInvertColors` <div class=\"label ios\">iOS</div>"
      }
    },
    {
      "segment_id": "4be28ed1",
      "source_content": "Inverting screen colors is an Accessibility feature that makes the iPhone and iPad easier on the eyes for some people with a sensitivity to brightness, easier to distinguish for some people with color blindness, and easier to make out for some people with low vision. However, sometimes you have views such as photos that you don't want to be inverted. In this case, you can set this property to be `true` so that these specific views won't have their colors inverted.",
      "source_content_hash": "0dcff87d08e9f8a90eedb7427cda8297a79b1ac7af79b6848561ab016577804c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "反轉螢幕顏色是一項無障礙功能，能讓iPhone和iPad對光線敏感的使用者更舒適、色盲使用者更容易辨識，以及低視力使用者更易於觀看。但有時您會有些不想被反轉的視圖（例如照片）。此時可將此屬性設為`true`，使這些特定視圖的顏色不被反轉。"
      }
    },
    {
      "segment_id": "f947c8e4",
      "source_content": "### `accessibilityLiveRegion` <div class=\"label android\">Android</div>",
      "source_content_hash": "5cdda930550e62093ac02f62d2f09c98464e5030fd777081629f5a9567e1095a",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `accessibilityLiveRegion` <div class=\"label android\">Android</div>"
      }
    },
    {
      "segment_id": "7bc8bb24",
      "source_content": "When components dynamically change, we want TalkBack to alert the end user. This is made possible by the `accessibilityLiveRegion` property. It can be set to `none`, `polite` and `assertive`:",
      "source_content_hash": "054ff41e8b0f6bf26fabf755402e817a5cfc2ef8e02b7d4c2496cb5a53fbbf23",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "當元件動態變化時，我們希望TalkBack能通知終端使用者。透過`accessibilityLiveRegion`屬性可實現此功能，其值可設為`none`、`polite`和`assertive`："
      }
    },
    {
      "segment_id": "b0465fca",
      "source_content": "- **none** Accessibility services should not announce changes to this view.\n- **polite** Accessibility services should announce changes to this view.\n- **assertive** Accessibility services should interrupt ongoing speech to immediately announce changes to this view.",
      "source_content_hash": "52382c27785c286ec15eecbea04537a1d858366b74f1a12b5d24d471dafe7e74",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- **none** 無障礙服務不應通報此視圖的變更。\n- **polite** 無障礙服務應通報此視圖的變更。\n- **assertive** 無障礙服務應中斷當前語音，立即通報此視圖的變更。"
      }
    },
    {
      "segment_id": "342e4d80",
      "source_content": "```jsx\n<TouchableWithoutFeedback onPress={addOne}>\n  <View style={styles.embedded}>\n    <Text>Click me</Text>\n  </View>\n</TouchableWithoutFeedback>\n<Text accessibilityLiveRegion=\"polite\">\n  Clicked {count} times\n</Text>\n```",
      "source_content_hash": "296d8fb92e2b90d83f0046760dd782e2b01b95e03f4a34ba740bcc8a921c53e2",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "6fc234cf",
      "source_content": "In the above example method `addOne` changes the state variable `count`. As soon as an end user clicks the TouchableWithoutFeedback, TalkBack reads text in the Text view because of its `accessibilityLiveRegion=\"polite\"` property.",
      "source_content_hash": "4d9f87440dcc9a6612c4e25136b1d8c02e63d59ffecf80318b1abae5b322b25b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在上述範例中，方法`addOne`會改變狀態變數`count`。當終端使用者點擊TouchableWithoutFeedback時，由於Text視圖設有`accessibilityLiveRegion=\"polite\"`屬性，TalkBack會朗讀其中的文字。"
      }
    },
    {
      "segment_id": "4dd6a631",
      "source_content": "### `accessibilityRole`",
      "source_content_hash": "caaf5bfb084952597e44b24f22d7d856e62e4f400b44dea56540dda8a44ce327",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `accessibilityRole`"
      }
    },
    {
      "segment_id": "f45239ba",
      "source_content": "`accessibilityRole` communicates the purpose of a component to the user of an assistive technology.",
      "source_content_hash": "8a2ec9f02b933d49470b73010d8dea30a3209e3075dc9d5719310d70c8f4b551",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "`accessibilityRole`向輔助技術使用者傳達元件的用途。"
      }
    },
    {
      "segment_id": "692c6053",
      "source_content": "`accessibilityRole` can be one of the following:",
      "source_content_hash": "ccd1687fa3de1781f489ea29d5281a6e2eca88bc1df0037fba2d4a0f69a7609b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "`accessibilityRole`可為下列值之一："
      }
    },
    {
      "segment_id": "c7ff42af",
      "source_content": "- **adjustable** Used when an element can be \"adjusted\" (e.g. a slider).\n- **alert** Used when an element contains important text to be presented to the user.\n- **button** Used when the element should be treated as a button.\n- **checkbox** Used when an element represents a checkbox which can be checked, unchecked, or have mixed checked state.\n- **combobox** Used when an element represents a combo box, which allows the user to select among several choices.\n- **header** Used when an element acts as a header for a content section (e.g. the title of a navigation bar).\n- **image** Used when the element should be treated as an image. Can be combined with button or link, for example.\n- **imagebutton** Used when the element should be treated as a button and is also an image.\n- **keyboardkey** Used when the element acts as a keyboard key.\n- **link** Used when the element should be treated as a link.\n- **menu** Used when the component is a menu of choices.\n- **menubar** Used when a component is a container of multiple menus.\n- **menuitem** Used to represent an item within a menu.\n- **none** Used when the element has no role.\n- **progressbar** Used to represent a component which indicates progress of a task.\n- **radio** Used to represent a radio button.\n- **radiogroup** Used to represent a group of radio buttons.\n- **scrollbar** Used to represent a scroll bar.\n- **search** Used when the text field element should also be treated as a search field.\n- **spinbutton** Used to represent a button which opens a list of choices.\n- **summary** Used when an element can be used to provide a quick summary of current conditions in the app when the app first launches.\n- **switch** Used to represent a switch which can be turned on and off.\n- **tab** Used to represent a tab.\n- **tablist** Used to represent a list of tabs.\n- **text** Used when the element should be treated as static text that cannot change.\n- **timer** Used to represent a timer.\n- **togglebutton** Used to represent a toggle button. Should be used with accessibilityState checked to indicate if the button is toggled on or off.\n- **toolbar** Used to represent a tool bar (a container of action buttons or components).",
      "source_content_hash": "b1ed99eb5fc6cd8d95410a64721ca703d797f35f63baca1e4a478a8b9c1e8b8f",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- **adjustable** 用於可「調整」的元素（如滑桿）。\n- **alert** 用於包含需向使用者呈現重要文字的元素。\n- **button** 用於應被視為按鈕的元素。\n- **checkbox** 用於代表可勾選、取消勾選或混合勾選狀態的核取方塊。\n- **combobox** 用於代表可讓使用者從多個選項中選擇的下拉式方塊。\n- **header** 用於作為內容區段標題的元素（如導覽列標題）。\n- **image** 用於應被視為圖像的元素。可與按鈕或連結等組合使用。\n- **imagebutton** 用於應被視為按鈕且同時是圖像的元素。\n- **keyboardkey** 用於作為鍵盤按鍵的元素。\n- **link** 用於應被視為連結的元素。\n- **menu** 用於代表選單的元件。\n- **menubar** 用於作為多個選單容器的元件。\n- **menuitem** 用於代表選單中的項目。\n- **none** 用於沒有角色的元素。\n- **progressbar** 用於代表顯示任務進度的元件。\n- **radio** 用於代表單選按鈕。\n- **radiogroup** 用於代表一組單選按鈕。\n- **scrollbar** 用於代表捲軸。\n- **search** 用於應同時被視為搜尋欄位的文字欄位元素。\n- **spinbutton** 用於代表可開啟選項清單的按鈕。\n- **summary** 用於在應用程式首次啟動時提供當前狀態快速摘要的元素。\n- **switch** 用於代表可開啟/關閉的開關。\n- **tab** 用於代表分頁標籤。\n- **tablist** 用於代表分頁標籤清單。\n- **text** 用於應被視為靜態不可變文字的元件。\n- **timer** 用於代表計時器。\n- **togglebutton** 用於代表切換按鈕。需搭配accessibilityState的checked屬性來指示按鈕是否處於切換狀態。\n- **toolbar** 用於代表工具列（動作按鈕或元件的容器）。"
      }
    },
    {
      "segment_id": "f6a06609",
      "source_content": "### `accessibilityState`",
      "source_content_hash": "0bdd4e063a84d12800f47b3af7a48f24aa490be3f0a319e622aaed8a851fab2f",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `accessibilityState`"
      }
    },
    {
      "segment_id": "6b40e7a2",
      "source_content": "Describes the current state of a component to the user of an assistive technology.",
      "source_content_hash": "4576e049d883460e0ff7e7dd3f7b85a4f38f84e0099a2bb344152f8eec3ebb39",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "向輔助技術使用者描述元件的當前狀態。"
      }
    },
    {
      "segment_id": "39f476dc",
      "source_content": "`accessibilityState` is an object. It contains the following fields:",
      "source_content_hash": "7159e52e088b355f7d09050204a14182a683836105ee6961bb9073e40af1938f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "`accessibilityState`是一個物件，包含以下欄位："
      }
    },
    {
      "segment_id": "961dee84",
      "source_content": "| Name     | Description                                                                                                                           | Type               | Required |\n| -------- | ------------------------------------------------------------------------------------------------------------------------------------- | ------------------ | -------- |\n| disabled | Indicates whether the element is disabled or not.                                                                                     | boolean            | No       |\n| selected | Indicates whether a selectable element is currently selected or not.                                                                  | boolean            | No       |\n| checked  | Indicates the state of a checkable element. This field can either take a boolean or the \"mixed\" string to represent mixed checkboxes. | boolean or 'mixed' | No       |\n| busy     | Indicates whether an element is currently busy or not.                                                                                | boolean            | No       |\n| expanded | Indicates whether an expandable element is currently expanded or collapsed.                                                           | boolean            | No       |",
      "source_content_hash": "f7a5319e576dec9b58ccd45342e8da4342b4b0c2c361aca90b3e2ac406583d28",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "61a78cbe",
      "source_content": "To use, set the `accessibilityState` to an object with a specific definition.",
      "source_content_hash": "13504de1ca5180246375cd64d8304bfa103ca2cae7253594a645f1c057f136f3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "使用時，需將`accessibilityState`設為具有特定定義的物件。"
      }
    },
    {
      "segment_id": "2b5df263",
      "source_content": "### `accessibilityValue`",
      "source_content_hash": "cbedf783dfb2e42529ea0760cf4fb5081d51852d680f7c8d8dc08d4608313921",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `accessibilityValue`"
      }
    },
    {
      "segment_id": "e29bd639",
      "source_content": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars, it contains range information (minimum, current, and maximum).",
      "source_content_hash": "61fa1e8e3b29a12c60a6750ced40d31b0b56fc0a3d1887b52febb19c162c04fd",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "代表元件當前值。可以是元件值的文字描述，對於範圍型元件（如滑桿和進度條），則包含範圍資訊（最小值、當前值和最大值）。"
      }
    },
    {
      "segment_id": "e5821418",
      "source_content": "`accessibilityValue` is an object. It contains the following fields:",
      "source_content_hash": "afeaab85f4c3c090614491dc3e4ddc6306644fb1bb8347d72d01b1f6cf793490",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "`accessibilityValue` 是一個物件，包含以下欄位："
      }
    },
    {
      "segment_id": "864536ba",
      "source_content": "| Name | Description                                                                                    | Type    | Required                  |\n| ---- | ---------------------------------------------------------------------------------------------- | ------- | ------------------------- |\n| min  | The minimum value of this component's range.                                                   | integer | Required if `now` is set. |\n| max  | The maximum value of this component's range.                                                   | integer | Required if `now` is set. |\n| now  | The current value of this component's range.                                                   | integer | No                        |\n| text | A textual description of this component's value. Will override `min`, `now`, and `max` if set. | string  | No                        |",
      "source_content_hash": "6106910a3639d430857b0e125fe155797f90f3f5f11ef280189fd6f263066d2e",
      "node_type": "table",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_864536ba"
      }
    },
    {
      "segment_id": "e779f31e",
      "source_content": "### `accessibilityViewIsModal` <div class=\"label ios\">iOS</div>",
      "source_content_hash": "9d761bcca9428aa4ecee978774f821177f7a41d1911e9dc98835f4b30b572737",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `accessibilityViewIsModal` <div class=\"label ios\">iOS</div>"
      }
    },
    {
      "segment_id": "af016b8e",
      "source_content": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "source_content_hash": "641bd7fbd9db5e0d335f374d97caa662134b3ece3ce851a07f6a64b13aaf2004",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "布林值，表示 VoiceOver 是否應忽略接收器同層級視圖中的元素。"
      }
    },
    {
      "segment_id": "3799844b",
      "source_content": "For example, in a window that contains sibling views `A` and `B`, setting `accessibilityViewIsModal` to `true` on view `B` causes VoiceOver to ignore the elements in the view `A`. On the other hand, if view `B` contains a child view `C` and you set `accessibilityViewIsModal` to `true` on view `C`, VoiceOver does not ignore the elements in view `A`.",
      "source_content_hash": "105a3e518164c89754bab290f13382ae9e7e1a1c7314f8495834a9130eed6b3c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "For example, in a window that contains sibling views `A` and `B`, setting `accessibilityViewIsModal` to `true` on view `B` causes VoiceOver to ignore the elements in the view `A`. On the other hand, if view `B` contains a child view `C` and you set `accessibilityViewIsModal` to `true` on view `C`, VoiceOver does not ignore the elements in view `A`."
      }
    },
    {
      "segment_id": "8159e12a",
      "source_content": "### `accessibilityElementsHidden` <div class=\"label ios\">iOS</div>",
      "source_content_hash": "8b639791d045d475b38fd218fc6159abd881965f18aaa0c7823d80e6e38eeeaa",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `accessibilityElementsHidden` <div class=\"label ios\">iOS</div>"
      }
    },
    {
      "segment_id": "6e5d54a8",
      "source_content": "A Boolean value indicating whether the accessibility elements contained within this accessibility element are hidden.",
      "source_content_hash": "3e2cb6a06ce092584415017e83d96386a88b8686eb87b9f04500086898892427",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "布林值，表示此無障礙元素內包含的子元素是否隱藏。"
      }
    },
    {
      "segment_id": "48249e3c",
      "source_content": "For example, in a window that contains sibling views `A` and `B`, setting `accessibilityElementsHidden` to `true` on view `B` causes VoiceOver to ignore the elements in the view `B`. This is similar to the Android property `importantForAccessibility=\"no-hide-descendants\"`.",
      "source_content_hash": "4c763abd8e3bccc27fc11550efee96dc665680996ff44263dce281239a1e05d9",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "For example, in a window that contains sibling views `A` and `B`, setting `accessibilityElementsHidden` to `true` on view `B` causes VoiceOver to ignore the elements in the view `B`. This is similar to the Android property `importantForAccessibility=\"no-hide-descendants\"`."
      }
    },
    {
      "segment_id": "a7628008",
      "source_content": "### `importantForAccessibility` <div class=\"label android\">Android</div>",
      "source_content_hash": "f413cedbdd567de916fc5bcb2191d96efb53743cb0ea6a3bc872cc6ac6f6696c",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `importantForAccessibility` <div class=\"label android\">Android</div>"
      }
    },
    {
      "segment_id": "7e563909",
      "source_content": "In the case of two overlapping UI components with the same parent, default accessibility focus can have unpredictable behavior. The `importantForAccessibility` property will resolve this by controlling if a view fires accessibility events and if it is reported to accessibility services. It can be set to `auto`, `yes`, `no` and `no-hide-descendants` (the last value will force accessibility services to ignore the component and all of its children).",
      "source_content_hash": "a1d491bea41c8626f5796e3efae77fe5fd33fc627d14b9877d857a8bf9c2450d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "當兩個同父元件的 UI 元件重疊時，預設無障礙焦點可能出現不可預測的行為。`importantForAccessibility` 屬性可透過控制視圖是否觸發無障礙事件及是否回報給無障礙服務來解決此問題。可設為 `auto`、`yes`、`no` 或 `no-hide-descendants`（最後一個值會強制無障礙服務忽略該元件及其所有子元件）。"
      }
    },
    {
      "segment_id": "7079d2d5",
      "source_content": "```jsx\n<View style={styles.container}>\n  <View\n    style={[styles.layout, {backgroundColor: 'green'}]}\n    importantForAccessibility=\"yes\">\n    <Text>First layout</Text>\n  </View>\n  <View\n    style={[styles.layout, {backgroundColor: 'yellow'}]}\n    importantForAccessibility=\"no-hide-descendants\">\n    <Text>Second layout</Text>\n  </View>\n</View>\n```",
      "source_content_hash": "e1f597ea65a61a396a95169864f1d30063054aaac695d706b5b2ba967ac4afb4",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_7079d2d5"
      }
    },
    {
      "segment_id": "9ede513a",
      "source_content": "In the above example, the `yellow` layout and its descendants are completely invisible to TalkBack and all other accessibility services. So we can use overlapping views with the same parent without confusing TalkBack.",
      "source_content_hash": "738f742abc1946383de9337cc39ddce8032bf1f3e012de7f89e3006287b8b5ac",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "上述範例中，`yellow` 佈局及其子元件對 TalkBack 和其他無障礙服務完全不可見。因此我們可以在同父元件中使用重疊視圖，而不會造成 TalkBack 混淆。"
      }
    },
    {
      "segment_id": "43ad2e31",
      "source_content": "### `onAccessibilityEscape` <div class=\"label ios\">iOS</div>",
      "source_content_hash": "9db7c462cb9fd4a93d355e29e1ade46b6574b8d1e2f1fc1b18cf2bf05f13e886",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `onAccessibilityEscape` <div class=\"label ios\">iOS</div>"
      }
    },
    {
      "segment_id": "01902900",
      "source_content": "Assign this property to a custom function which will be called when someone performs the \"escape\" gesture, which is a two finger Z shaped gesture. An escape function should move back hierarchically in the user interface. This can mean moving up or back in a navigation hierarchy or dismissing a modal user interface. If the selected element does not have an `onAccessibilityEscape` function, the system will attempt to traverse up the view hierarchy until it finds a view that does or bonk to indicate it was unable to find one.",
      "source_content_hash": "9aad6e19140c84884363ba9a84a2e103e6904b76340f1ed5b8f5f56fd8dc87c1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "將此屬性賦予自訂函式，當使用者執行「escape」手勢（雙指 Z 形手勢）時會呼叫該函式。escape 函式應在使用者介面中依層級返回，例如在導覽階層中向上或返回，或關閉模態介面。若選定元件未定義 `onAccessibilityEscape` 函式，系統會嘗試向上遍歷視圖階層，直到找到符合的視圖或發出提示音表示找不到。"
      }
    },
    {
      "segment_id": "200685d4",
      "source_content": "### `onAccessibilityTap` <div class=\"label ios\">iOS</div>",
      "source_content_hash": "f65dac607f9f4ca4b0269f998b74e40da3c5abc6880ea84e8685e2619c804474",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `onAccessibilityTap` <div class=\"label ios\">iOS</div>"
      }
    },
    {
      "segment_id": "09d52457",
      "source_content": "Use this property to assign a custom function to be called when someone activates an accessible element by double tapping on it while it's selected.",
      "source_content_hash": "5209bd818597aa49d18f2f28ea5986c2806875c724e1cec9faea96d9a5503142",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "使用此屬性賦予自訂函式，當使用者在選定無障礙元件上雙擊觸發時會呼叫該函式。"
      }
    },
    {
      "segment_id": "5e300688",
      "source_content": "### `onMagicTap` <div class=\"label ios\">iOS</div>",
      "source_content_hash": "a271f4e5397b5f2522fc34f1e2f19d58dfa9407ced57bf7bbaa56c6ea5187c84",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `onMagicTap` <div class=\"label ios\">iOS</div>"
      }
    },
    {
      "segment_id": "130a77cc",
      "source_content": "Assign this property to a custom function which will be called when someone performs the \"magic tap\" gesture, which is a double-tap with two fingers. A magic tap function should perform the most relevant action a user could take on a component. In the Phone app on iPhone, a magic tap answers a phone call, or ends the current one. If the selected element does not have an `onMagicTap` function, the system will traverse up the view hierarchy until it finds a view that does.",
      "source_content_hash": "b49839f2f78f8d65138a9081d920d59c8ad9b949afd037df1bd1412237b289fc",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "將此屬性賦予自訂函式，當使用者執行「magic tap」手勢（雙指雙擊）時會呼叫該函式。magic tap 函式應執行使用者對元件最相關的操作。例如 iPhone 上的電話應用中，magic tap 會接聽或掛斷電話。若選定元件未定義 `onMagicTap` 函式，系統會向上遍歷視圖階層直到找到符合的視圖。"
      }
    },
    {
      "segment_id": "7eac7922",
      "source_content": "## Accessibility Actions",
      "source_content_hash": "031b32b932944db63cd9e5aea94644235dd200e4f680513f2394f6e014aabcbe",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 無障礙操作"
      }
    },
    {
      "segment_id": "8f4e752e",
      "source_content": "Accessibility actions allow an assistive technology to programmatically invoke the actions of a component. In order to support accessibility actions, a component must do two things:",
      "source_content_hash": "6ce51d60d0f1c68d37432e477ef3557fc71fcc5f32700930f8c36945ad1cd032",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "無障礙操作允許輔助技術以程式化方式觸發元件的操作。要支援無障礙操作，元件必須完成兩件事："
      }
    },
    {
      "segment_id": "8aacd6aa",
      "source_content": "- Define the list of actions it supports via the `accessibilityActions` property.\n- Implement an `onAccessibilityAction` function to handle action requests.",
      "source_content_hash": "7e0b39a04bdcec677ef4f35820febcc67b60b9d8b8602fbb2843b8a16c24a359",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- 透過 `accessibilityActions` 屬性定義支援的操作清單。\n- 實作 `onAccessibilityAction` 函式來處理操作請求。"
      }
    },
    {
      "segment_id": "80dbdeb8",
      "source_content": "The `accessibilityActions` property should contain a list of action objects. Each action object should contain the following fields:",
      "source_content_hash": "b920e363a61365b4fbe7b06f84faeda3b2acb3fda683a8a3e48277c920f4c349",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "The `accessibilityActions` property should contain a list of action objects. Each action object should contain the following fields:"
      }
    },
    {
      "segment_id": "47f1ba32",
      "source_content": "| Name  | Type   | Required |\n| ----- | ------ | -------- |\n| name  | string | Yes      |\n| label | string | No       |",
      "source_content_hash": "a83c245edcbf0c30d05b90e1cfcb5796536602adbc312096efc90b20db78d3f0",
      "node_type": "table",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_47f1ba32"
      }
    },
    {
      "segment_id": "65be34cb",
      "source_content": "Actions either represent standard actions, such as clicking a button or adjusting a slider, or custom actions specific to a given component such as deleting an email message. The `name` field is required for both standard and custom actions, but `label` is optional for standard actions.",
      "source_content_hash": "cebd31b5d259370da44bad8e820d17d57ae3ab3b97fe123be1c97e4fbbb1a673",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "動作可以代表標準操作（例如點擊按鈕或調整滑塊），或是特定元件的自訂動作（例如刪除電子郵件）。標準動作和自訂動作都必須提供 `name` 欄位，但標準動作的 `label` 欄位是選填的。"
      }
    },
    {
      "segment_id": "32fb7230",
      "source_content": "When adding support for standard actions, `name` must be one of the following:",
      "source_content_hash": "903c1bd2e02785f16d61a93e4bc135e870802e37168ecd6714e5a3ebff6fc615",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "當新增對標準動作的支援時，`name` 必須是以下其中之一："
      }
    },
    {
      "segment_id": "f99ae002",
      "source_content": "- `'magicTap'` - iOS only - While VoiceOver focus is on or inside the component, the user double tapped with two fingers.\n- `'escape'` - iOS only - While VoiceOver focus is on or inside the component, the user performed a two finger scrub gesture (left, right, left).\n- `'activate'` - Activate the component. Typically this should perform the same action as when the user touches or clicks the component when not using an assistive technology. This is generated when a screen reader user double taps the component.\n- `'increment'` - Increment an adjustable component. On iOS, VoiceOver generates this action when the component has a role of `'adjustable'` and the user places focus on it and swipes upward. On Android, TalkBack generates this action when the user places accessibility focus on the component and presses the volume up button.\n- `'decrement'` - Decrement an adjustable component. On iOS, VoiceOver generates this action when the component has a role of `'adjustable'` and the user places focus on it and swipes downward. On Android, TalkBack generates this action when the user places accessibility focus on the component and presses the volume down button.\n- `'longpress'` - Android only - This action is generated when the user places accessibility focus on the component and double tap and holds one finger on the screen. Typically, this should perform the same action as when the user holds down one finger on the component while not using an assistive technology.",
      "source_content_hash": "5b3a2034bd21551e8626edd939300cdc43ab2bd1fafff462319e600759e0ae30",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- `'magicTap'` - 僅限 iOS - 當 VoiceOver 焦點位於元件上或內部時，使用者用兩指雙擊。\n- `'escape'` - 僅限 iOS - 當 VoiceOver 焦點位於元件上或內部時，使用者執行了兩指擦除手勢（左、右、左）。\n- `'activate'` - 啟動元件。通常這應執行與使用者在未使用輔助技術時觸摸或點擊元件相同的動作。當螢幕閱讀器使用者雙擊元件時會產生此動作。\n- `'increment'` - 增加可調整元件的值。在 iOS 上，當元件具有 `'adjustable'` 角色且使用者將焦點放在其上並向上滑動時，VoiceOver 會產生此動作。在 Android 上，當使用者將輔助焦點放在元件上並按下音量增大按鈕時，TalkBack 會產生此動作。\n- `'decrement'` - 減少可調整元件的值。在 iOS 上，當元件具有 `'adjustable'` 角色且使用者將焦點放在其上並向下滑動時，VoiceOver 會產生此動作。在 Android 上，當使用者將輔助焦點放在元件上並按下音量減小按鈕時，TalkBack 會產生此動作。\n- `'longpress'` - 僅限 Android - 當使用者將輔助焦點放在元件上並雙擊並按住螢幕上的一指時，會產生此動作。通常這應執行與使用者在未使用輔助技術時按住元件相同的動作。"
      }
    },
    {
      "segment_id": "93f7c834",
      "source_content": "The `label` field is optional for standard actions, and is often unused by assistive technologies. For custom actions, it is a localized string containing a description of the action to be presented to the user.",
      "source_content_hash": "2db39799536c771f876848882f1c77ddbb35de68cceab57b98744d2d22ad7806",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "The `label` field is optional for standard actions, and is often unused by assistive technologies. For custom actions, it is a localized string containing a description of the action to be presented to the user."
      }
    },
    {
      "segment_id": "12bc7444",
      "source_content": "To handle action requests, a component must implement an `onAccessibilityAction` function. The only argument to this function is an event containing the name of the action to perform. The below example from RNTester shows how to create a component which defines and handles several custom actions.",
      "source_content_hash": "48caca1b18ad3a592fadbdd430fba14058d8a4d1bba3d4e9e2ae657a73a83346",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "要處理動作請求，元件必須實作 `onAccessibilityAction` 函數。此函數的唯一參數是一個包含要執行動作名稱的事件。以下來自 RNTester 的範例展示了如何建立一個定義並處理多個自訂動作的元件。"
      }
    },
    {
      "segment_id": "e55bb1a1",
      "source_content": "```jsx\n<View\n  accessible={true}\n  accessibilityActions={[\n    {name: 'cut', label: 'cut'},\n    {name: 'copy', label: 'copy'},\n    {name: 'paste', label: 'paste'},\n  ]}\n  onAccessibilityAction={event => {\n    switch (event.nativeEvent.actionName) {\n      case 'cut':\n        Alert.alert('Alert', 'cut action success');\n        break;\n      case 'copy':\n        Alert.alert('Alert', 'copy action success');\n        break;\n      case 'paste':\n        Alert.alert('Alert', 'paste action success');\n        break;\n    }\n  }}\n/>\n```",
      "source_content_hash": "d8794bf2d894465d07cbed7a393f953e2af2b03a73d409a20cdb5006a047f96c",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_e55bb1a1"
      }
    },
    {
      "segment_id": "f996c0b9",
      "source_content": "## Checking if a Screen Reader is Enabled",
      "source_content_hash": "b3bad41c5cc7514188192d97f3628344b367adf2f1abaf6c192f90eb4211487b",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 檢查螢幕閱讀器是否啟用"
      }
    },
    {
      "segment_id": "4e994fc3",
      "source_content": "The `AccessibilityInfo` API allows you to determine whether or not a screen reader is currently active. See the [AccessibilityInfo documentation](accessibilityinfo) for details.",
      "source_content_hash": "46685e34ee0d4d69860ed9ec642c9ce08a8834bfaee28bca5a8531575cfa3ced",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "The `AccessibilityInfo` API allows you to determine whether or not a screen reader is currently active. See the [AccessibilityInfo documentation](accessibilityinfo) for details."
      }
    },
    {
      "segment_id": "a99db0f6",
      "source_content": "## Sending Accessibility Events <div class=\"label android\">Android</div>",
      "source_content_hash": "fc75734f6a64c38b1f2f46a41cf585d06a46eb1420f5f4b1db5fa41055f22937",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 發送輔助功能事件 <div class=\"label android\">Android</div>"
      }
    },
    {
      "segment_id": "2ab62b74",
      "source_content": "Sometimes it is useful to trigger an accessibility event on a UI component (i.e. when a custom view appears on a screen or set accessibility focus to a view). Native UIManager module exposes a method ‘sendAccessibilityEvent’ for this purpose. It takes two arguments: view tag and a type of an event. The supported event types are `typeWindowStateChanged`, `typeViewFocused` and `typeViewClicked`.",
      "source_content_hash": "07117783bd7366f6574a88247561d63b3f29accd7151b365fea2db45e0444d6f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "Sometimes it is useful to trigger an accessibility event on a UI component (i.e. when a custom view appears on a screen or set accessibility focus to a view). Native UIManager module exposes a method ‘sendAccessibilityEvent’ for this purpose. It takes two arguments: view tag and a type of an event. The supported event types are `typeWindowStateChanged`, `typeViewFocused` and `typeViewClicked`."
      }
    },
    {
      "segment_id": "6c91a0a1",
      "source_content": "```jsx\nimport {Platform, UIManager, findNodeHandle} from 'react-native';\n\nif (Platform.OS === 'android') {\n  UIManager.sendAccessibilityEvent(\n    findNodeHandle(this),\n    UIManager.AccessibilityEventTypes.typeViewFocused,\n  );\n}\n```",
      "source_content_hash": "a7cbb3164b731280f03958ba6fd590803f3054e810a8b6fbd637c3d5426d510e",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_6c91a0a1"
      }
    },
    {
      "segment_id": "d96e8afa",
      "source_content": "## Testing TalkBack Support <div class=\"label android\">Android</div>",
      "source_content_hash": "61760b8b9f9b2a8e9fd5d900faf88915aefc4a4d37c5a3c0f1dac67954aac5f7",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 測試 TalkBack 支援 <div class=\"label android\">Android</div>"
      }
    },
    {
      "segment_id": "e020f7ed",
      "source_content": "To enable TalkBack, go to the Settings app on your Android device or emulator. Tap Accessibility, then TalkBack. Toggle the \"Use service\" switch to enable or disable it.",
      "source_content_hash": "785ca03d3d6ae64529299440f3a479969d77d11fef6cb71b9be5c1aba48b16eb",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "要啟用 TalkBack，請前往 Android 裝置或模擬器上的「設定」應用程式。點擊「無障礙」，然後點擊「TalkBack」。切換「使用服務」開關以啟用或停用它。"
      }
    },
    {
      "segment_id": "d83b50df",
      "source_content": "Android emulators don't have TalkBack installed by default. You can install TalkBack on your emulator via the Google Play Store. Make sure to choose an emulator with the Google Play store installed. These are available in Android Studio.",
      "source_content_hash": "b0adce50ee76a77b9de18ca52948d8b3ad8f53a14cda5cdd87f5c63e83c310ef",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "Android 模擬器預設未安裝 TalkBack。您可以透過 Google Play 商店在模擬器上安裝 TalkBack。請確保選擇已安裝 Google Play 商店的模擬器。這些在 Android Studio 中可用。"
      }
    },
    {
      "segment_id": "b16b56a2",
      "source_content": "You can use the volume key shortcut to toggle TalkBack. To turn on the volume key shortcut, go to the Settings app, then Accessibility. At the top, turn on Volume key shortcut.",
      "source_content_hash": "d0e4f8189a11db14afe6c02de98311e67ee0d9be897a4244dd93a57681437df5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "您可以使用音量鍵快捷方式來切換 TalkBack。要開啟音量鍵快捷方式，請前往「設定」應用程式，然後點擊「無障礙」。在頂部，開啟「音量鍵快捷方式」。"
      }
    },
    {
      "segment_id": "27f3a471",
      "source_content": "To use the volume key shortcut, press both volume keys for 3 seconds to start an accessibility tool.",
      "source_content_hash": "b49c00a6d647319b70d5fa45e92afd2531be1c5828c63cd70404883b7daccb0d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "要使用音量鍵快捷方式，按住兩個音量鍵 3 秒以啟動無障礙工具。"
      }
    },
    {
      "segment_id": "9929329e",
      "source_content": "Additionally, if you prefer, you can toggle TalkBack via command line with:",
      "source_content_hash": "ace2c195986a21d074e7cb299ba6361e19ae7eb6e9198a8e9a57afb94dcfd912",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此外，如果您願意，也可以透過命令列切換 TalkBack："
      }
    },
    {
      "segment_id": "6b628553",
      "source_content": "```shell\n# disable\nadb shell settings put secure enabled_accessibility_services com.android.talkback/com.google.android.marvin.talkback.TalkBackService\n\n# enable\nadb shell settings put secure enabled_accessibility_services com.google.android.marvin.talkback/com.google.android.marvin.talkback.TalkBackService\n```",
      "source_content_hash": "0392348f38d304ddaa85c4d5b91888ba17020bb069132e1f6815ce3572c12ac9",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_6b628553"
      }
    },
    {
      "segment_id": "4632603c",
      "source_content": "## Testing VoiceOver Support <div class=\"label ios\">iOS</div>",
      "source_content_hash": "50f54953f9745cdda5edd9885c3fbcfd247e6d8dba0eb43e2921c6d582db0183",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 測試 VoiceOver 支援 <div class=\"label ios\">iOS</div>"
      }
    },
    {
      "segment_id": "9802de48",
      "source_content": "To enable VoiceOver, go to the Settings app on your iOS device (it's not available for simulator). Tap General, then Accessibility. There you will find many tools that people use to make their devices more usable, such as bolder text, increased contrast, and VoiceOver.",
      "source_content_hash": "afe96c3b35620de31c50abd87c2684de4b1f642d35021f9f7526e869267c3cc6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "要啟用 VoiceOver，請前往 iOS 裝置上的「設定」應用程式（模擬器不支援此功能）。點選「一般」，然後選擇「輔助使用」。在這裡您會找到許多讓裝置更易於使用的工具，例如粗體文字、增加對比度以及 VoiceOver。"
      }
    },
    {
      "segment_id": "e9a0d59a",
      "source_content": "To enable VoiceOver, tap on VoiceOver under \"Vision\" and toggle the switch that appears at the top.",
      "source_content_hash": "cb1d89b480efb5ee4c8e680d306dfe915c7acac6bc894d4b8128c1dfcb07be04",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "要啟用 VoiceOver，請在「視覺」下方點選 VoiceOver，並切換頂部的開關。"
      }
    },
    {
      "segment_id": "a6efb0d1",
      "source_content": "At the very bottom of the Accessibility settings, there is an \"Accessibility Shortcut\". You can use this to toggle VoiceOver by triple clicking the Home button.",
      "source_content_hash": "37dbe7c3d47f4d46765d733daf9a6fb83712317aa84559b93a2699d6c6d94470",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在「輔助使用」設定的最底部，有一個「輔助使用快速鍵」。您可以使用此功能，透過三擊主畫面按鈕來切換 VoiceOver。"
      }
    },
    {
      "segment_id": "42a9e250",
      "source_content": "## Additional Resources",
      "source_content_hash": "10f87178f164c035ecfa7770143db68c2c8a7dfbbddfd5278bdeb0733b121288",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 其他資源"
      }
    },
    {
      "segment_id": "b227f4bb",
      "source_content": "- [Making React Native Apps Accessible](https://engineering.fb.com/ios/making-react-native-apps-accessible/)",
      "source_content_hash": "0895995388ca42d2d0e63125b50bf343b5048031c2d1d39c43843046d10f3666",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- [讓 React Native 應用程式具備無障礙功能](https://engineering.fb.com/ios/making-react-native-apps-accessible/)"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.70/accessibility.md",
  "last_updated_timestamp": "2025-06-19T15:33:40.492964+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "60b2b824a3fab5f13adc9ea87b35a8bf49849fe6caa7e220047349da869529ff"
  }
}