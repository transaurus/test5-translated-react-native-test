{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.70/tutorial.md",
  "source_file_content_hash": "3eb838d62c041819041086a7ce683f337af6060af710f66c97326521bbd1a81c",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: tutorial\ntitle: Learn the Basics\n---",
      "source_content_hash": "e9959066489526db16cb0292e23f044ae0a99475e50ad8c1ae3dc9cec6d11ee4",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "bb42506b",
      "source_content": "React Native is like React, but it uses native components instead of web components as building blocks. So to understand the basic structure of a React Native app, you need to understand some of the basic React concepts, like JSX, components, `state`, and `props`. If you already know React, you still need to learn some React Native specific stuff, like the native components. This tutorial is aimed at all audiences, whether you have React experience or not.",
      "source_content_hash": "b4410208329ce2b3febfc54e6be4d273e5ab2e9fe67ecad0e26733c1f58453ec",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "React Native 類似於 React，但它使用原生元件而非網頁元件作為建構基礎。因此，要理解 React Native 應用的基本結構，你需要掌握一些基本的 React 概念，如 JSX、元件、`state` 和 `props`。即使你已經熟悉 React，仍需要學習一些 React Native 特有的內容，例如原生元件。本教程適合所有讀者，無論你是否具有 React 經驗。"
      }
    },
    {
      "segment_id": "3fbbcc07",
      "source_content": "Let's do this thing.",
      "source_content_hash": "0b310301f28b51afc51e427ae997d36a5d2966e6b6378455c8d6b4be3db1b353",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "讓我們開始吧。"
      }
    },
    {
      "segment_id": "1cc03ec8",
      "source_content": "## Hello World",
      "source_content_hash": "7b8546267ec452aea9484cffb95eb44a31f01bc7a14594e3b3caff1d03373169",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## Hello World"
      }
    },
    {
      "segment_id": "8d66f911",
      "source_content": "In accordance with the ancient traditions of our people, we must first build an app that does nothing except say \"Hello, world!\". Here it is:",
      "source_content_hash": "e6e3d758998b17f9abb9db194af3964785881f51ec09f18808dd98b86cedd229",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "依照我們悠久的傳統，首先我們要建立一個只顯示「Hello, world!」的應用程式。以下是範例："
      }
    },
    {
      "segment_id": "5564d81d",
      "source_content": "```SnackPlayer name=Hello%20World\nimport React from 'react';\nimport { Text, View } from 'react-native';\n\nconst HelloWorldApp = () => {\n  return (\n    <View\n      style={{\n        flex: 1,\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      }}>\n      <Text>Hello, world!</Text>\n    </View>\n  )\n}\nexport default HelloWorldApp;\n```",
      "source_content_hash": "85567e6119e326fca6329aad128e84844c52b6f00f7b5fba25078bab9fbe96af",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_5564d81d"
      }
    },
    {
      "segment_id": "4daf5cdd",
      "source_content": "If you are feeling curious, you can play around with sample code directly in the web simulators. You can also paste it into your `App.js` file to create a real app on your local machine.",
      "source_content_hash": "c7ad308df6aff5e9c3731e02da526b89e107865e213ac3d5a798990df1d3be87",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "如果你感到好奇，可以直接在網頁模擬器中試玩這段範例程式碼。你也可以將其貼到你的 `App.js` 檔案中，以在本地機器上建立一個真實的應用程式。"
      }
    },
    {
      "segment_id": "f422383e",
      "source_content": "## What's going on here?",
      "source_content_hash": "b8a6c2253d1c4a626bf6e07c88d772364609948e0d949bfa961a7227f83ddc2b",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 這裡發生了什麼？"
      }
    },
    {
      "segment_id": "5d66c9dc",
      "source_content": "1. First of all, we need to import `React` to be able to use `JSX`, which will then be transformed to the native components of each platform.\n2. On line 2, we import the `Text` and `View` components from `react-native`",
      "source_content_hash": "a94bbbdf1dd7b3b803dc3892537b6dadb97b6a52cf4d9c30eeab88b334507c41",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "1. First of all, we need to import `React` to be able to use `JSX`, which will then be transformed to the native components of each platform.\n2. On line 2, we import the `Text` and `View` components from `react-native`"
      }
    },
    {
      "segment_id": "33331f27",
      "source_content": "Then we define the `HelloWorldApp` function, which is a [functional component](https://reactjs.org/docs/components-and-props.html#function-and-class-components) and behaves in the same way as in React for the web. This function returns a `View` component with some styles and a`Text` as its child.",
      "source_content_hash": "b871e0f23a607dc221462d2408ba67b59c46d245b772b3aba8543dd1937895e1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "接著我們定義了 `HelloWorldApp` 函數，這是一個[函數式元件](https://reactjs.org/docs/components-and-props.html#function-and-class-components)，其行為與網頁版 React 中的相同。此函數返回一個帶有某些樣式的 `View` 元件，並以 `Text` 作為其子元件。"
      }
    },
    {
      "segment_id": "50746522",
      "source_content": "The `Text` component allows us to render a text, while the `View` component renders a container. This container has several styles applied, let's analyze what each one is doing.",
      "source_content_hash": "4d7589257da40bfd162c1831b1e858ebc6850b5140e20d5c7e51ec932b733081",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "The `Text` component allows us to render a text, while the `View` component renders a container. This container has several styles applied, let's analyze what each one is doing."
      }
    },
    {
      "segment_id": "95e9ba12",
      "source_content": "The first style that we find is `flex: 1`, the [`flex`](layout-props#flex) prop will define how your items are going to \"fill\" over the available space along your main axis. Since we only have one container, it will take all the available space of the parent component. In this case, it is the only component, so it will take all the available screen space.",
      "source_content_hash": "65d0d7e9695f12c685e8e3503d90e908323ba242631bdee42a04b97db304bcd2",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "第一個樣式是 `flex: 1`，[`flex`](layout-props#flex) 屬性會定義你的項目如何沿主軸「填滿」可用空間。由於我們只有一個容器，它會佔用父元件的所有可用空間。在這個例子中，它是唯一的元件，因此會佔用整個螢幕的可用空間。"
      }
    },
    {
      "segment_id": "8af76f3d",
      "source_content": "The following style is [`justifyContent`](layout-props#justifycontent): \"center\". This aligns children of a container in the center of the container's main axis. Finally, we have [`alignItems`](layout-props#alignitems): \"center\", which aligns children of a container in the center of the container's cross axis.",
      "source_content_hash": "e05ecda7ac110e69e5f98ee2dc025111398df128ab04b64b720d3f1c81d0cefe",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "接下來的樣式是 [`justifyContent`](layout-props#justifycontent): \"center\"。這會將容器的子元件沿容器的主軸居中對齊。最後，我們有 [`alignItems`](layout-props#alignitems): \"center\"，這會將容器的子元件沿容器的交叉軸居中對齊。"
      }
    },
    {
      "segment_id": "a9d49f92",
      "source_content": "Some of the things in here might not look like JavaScript to you. Don't panic. _This is the future_.",
      "source_content_hash": "55ac97179bac8462f87ccbb49d18a9bbf6aae31b28d17b87aab8115ef42dc040",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "這裡的一些內容可能看起來不像 JavaScript。別擔心。_這就是未來_。"
      }
    },
    {
      "segment_id": "a44047a5",
      "source_content": "First of all, ES2015 (also known as ES6) is a set of improvements to JavaScript that is now part of the official standard, but not yet supported by all browsers, so often it isn't used yet in web development. React Native ships with ES2015 support, so you can use this stuff without worrying about compatibility. `import`, `export`, `const` and `from` in the example above are all ES2015 features. If you aren't familiar with ES2015, you can probably pick it up by reading through sample code like this tutorial has. If you want, [this page](https://babeljs.io/learn-es2015/) has a good overview of ES2015 features.",
      "source_content_hash": "788c9ffc2969f16549a5d1c344f88427e0680e012ac7227cc8e7c2e05def4cc5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "首先，ES2015（也稱為 ES6）是對 JavaScript 的一系列改進，現已成為官方標準的一部分，但尚未被所有瀏覽器支援，因此在網頁開發中還不常使用。React Native 自帶 ES2015 支援，因此你可以放心使用這些功能而不必擔心兼容性問題。上面範例中的 `import`、`export`、`const` 和 `from` 都是 ES2015 的特性。如果你不熟悉 ES2015，可以通過閱讀像本教程這樣的範例程式碼來學習。如果需要，[這個頁面](https://babeljs.io/learn-es2015/)提供了 ES2015 特性的詳細概述。"
      }
    },
    {
      "segment_id": "f7ef78f9",
      "source_content": "The other unusual thing in this code example is `<View><Text>Hello world!</Text></View>`. This is JSX - a syntax for embedding XML within JavaScript. Many frameworks use a specialized templating language which lets you embed code inside markup language. In React, this is reversed. JSX lets you write your markup language inside code. It looks like HTML on the web, except instead of web things like `<div>` or `<span>`, you use React components. In this case, `<Text>` is a [Core Component](intro-react-native-components) that displays some text and `View` is like the `<div>` or `<span>`.",
      "source_content_hash": "52a8e388a543fc835f231de3e5aacf8fa6caa2a9bd5cb54cec5f7f32cf9d774e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "這段程式碼中另一個不尋常的地方是 `<View><Text>Hello world!</Text></View>`。這是 JSX——一種在 JavaScript 中嵌入 XML 的語法。許多框架使用專門的模板語言，讓你能夠在標記語言中嵌入程式碼。在 React 中，這被反轉了。JSX 讓你在程式碼中寫入標記語言。它看起來像網頁上的 HTML，但你不是使用 `<div>` 或 `<span>` 這樣的網頁元素，而是使用 React 元件。在這個例子中，`<Text>` 是一個[核心元件](intro-react-native-components)，用於顯示文字，而 `View` 則類似於 `<div>` 或 `<span>`。"
      }
    },
    {
      "segment_id": "60410af6",
      "source_content": "## Components",
      "source_content_hash": "364bc3ef6f60f69bfc381e804797c89871baa3e5bfe4b962f05ab18acf71326d",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 元件"
      }
    },
    {
      "segment_id": "b9aaa519",
      "source_content": "So this code is defining `HelloWorldApp`, a new `Component`. When you're building a React Native app, you'll be making new components a lot. Anything you see on the screen is some sort of component.",
      "source_content_hash": "99761f88bab7b790178fe053a03801d75af15a23eea468ace04b1c211c395cad",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "So this code is defining `HelloWorldApp`, a new `Component`. When you're building a React Native app, you'll be making new components a lot. Anything you see on the screen is some sort of component."
      }
    },
    {
      "segment_id": "1a316f80",
      "source_content": "## Props",
      "source_content_hash": "5b94a6cc928a22f2ff71078f7462cd97dbe259a0c4d1877ab3afc2a92dded915",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## Props 屬性"
      }
    },
    {
      "segment_id": "40158b4b",
      "source_content": "Most components can be customized when they are created, with different parameters. These creation parameters are called props.",
      "source_content_hash": "d9c4bb548b12bc1928fa1d76425db75b9f5acdb5c92ae4448ee09693c5126476",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "大多數組件在創建時可以通過不同的參數進行定制。這些創建參數稱為 props（屬性）。"
      }
    },
    {
      "segment_id": "6ea4c715",
      "source_content": "Your own components can also use `props`. This lets you make a single component that is used in many different places in your app, with slightly different properties in each place. Refer to `props.YOUR_PROP_NAME` in your functional components or `this.props.YOUR_PROP_NAME` in your class components. Here's an example:",
      "source_content_hash": "b87fd11913bb9421c671a9eeeb25d8f14ddf5eee4fb6a97e845085a74b281381",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "你自己的組件也可以使用 `props`。這讓你能夠創建一個單一的組件，並在應用程式的多個地方使用，每個地方稍微調整不同的屬性。在你的函數組件中引用 `props.YOUR_PROP_NAME`，或在類組件中引用 `this.props.YOUR_PROP_NAME`。以下是一個例子："
      }
    },
    {
      "segment_id": "5a41b4fb",
      "source_content": "```SnackPlayer name=Hello%20Props\nimport React from 'react';\nimport { Text, View, StyleSheet } from 'react-native';\n\nconst styles = StyleSheet.create({\n  center: {\n    alignItems: 'center'\n  }\n})\n\nconst Greeting = (props) => {\n  return (\n    <View style={styles.center}>\n      <Text>Hello {props.name}!</Text>\n    </View>\n  );\n}\n\nconst LotsOfGreetings = () => {\n  return (\n    <View style={[styles.center, {top: 50}]}>\n      <Greeting name='Rexxar' />\n      <Greeting name='Jaina' />\n      <Greeting name='Valeera' />\n    </View>\n  );\n}\n\nexport default LotsOfGreetings;\n```",
      "source_content_hash": "28e012aa14e076acafb0763178efc588b1ad5c0187a2206da6c4dc79a7672fe3",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_5a41b4fb"
      }
    },
    {
      "segment_id": "785750ac",
      "source_content": "Using `name` as a prop lets us customize the `Greeting` component, so we can reuse that component for each of our greetings. This example also uses the `Greeting` component in JSX. The power to do this is what makes React so cool.",
      "source_content_hash": "12ddbe36f92df669f53d7a5360a505b47e875772b2cc624bf9c96e4c0d35ab64",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "使用 `name` 作為 prop 讓我們可以定制 `Greeting` 組件，這樣我們就能重複使用該組件來顯示不同的問候語。這個例子還展示了如何在 JSX 中使用 `Greeting` 組件。這種能力正是 React 如此強大的原因。"
      }
    },
    {
      "segment_id": "82e90254",
      "source_content": "The other new thing going on here is the [`View`](view.md) component. A [`View`](view.md) is useful as a container for other components, to help control style and layout.",
      "source_content_hash": "cecf47726ce32fe579986446f5fc0f25ac64d0551832f2951eeb3feb90509d6d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "這裡另一個新東西是 [`View`](view.md) 組件。[`View`](view.md) 作為其他組件的容器非常有用，可以幫助控制樣式和佈局。"
      }
    },
    {
      "segment_id": "2822251a",
      "source_content": "With `props` and the basic [`Text`](text.md), [`Image`](image.md), and [`View`](view.md) components, you can build a wide variety of static screens. To learn how to make your app change over time, you need to [learn about State](#state).",
      "source_content_hash": "290e6987aa0c05eb2c9fa0ffe562e4cc5f4a88894344eb5c57ab67799bb91b7f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "通過 `props` 和基本的 [`Text`](text.md)、[`Image`](image.md) 和 [`View`](view.md) 組件，你可以構建各種靜態畫面。要學習如何讓你的應用程式隨時間變化，你需要[了解 State（狀態）](#state)。"
      }
    },
    {
      "segment_id": "99d0dd9b",
      "source_content": "## State",
      "source_content_hash": "b74e9a3ac0450a7fcea9d133952a2ed0f9a731d22c0f07369c92352a6061e691",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## State 狀態"
      }
    },
    {
      "segment_id": "d79a4831",
      "source_content": "Unlike props [that are read-only](https://reactjs.org/docs/components-and-props.html#props-are-read-only) and should not be modified, the `state` allows React components to change their output over time in response to user actions, network responses and anything else.",
      "source_content_hash": "fee4ae3fbe50960a64718fbed2ed65ea217172128537d5defdf00b45bddc1246",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "與[唯讀的 props](https://reactjs.org/docs/components-and-props.html#props-are-read-only)（不應被修改）不同，`state` 允許 React 組件根據用戶操作、網絡響應等情況改變其輸出。"
      }
    },
    {
      "segment_id": "54bafb10",
      "source_content": "#### What's the difference between state and props in React?",
      "source_content_hash": "338a37c949875c3d818304c27e78844395ba5550b5cf8e2109f95019400e6980",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "#### React 中的 state 和 props 有什麼區別？"
      }
    },
    {
      "segment_id": "4be28ed1",
      "source_content": "In a React component, the props are the variables that we pass from a parent component to a child component. Similarly, the state are also variables, with the difference that they are not passed as parameters, but rather that the component initializes and manages them internally.",
      "source_content_hash": "410b3f796dd09f4ce5a51a1b9689fad702636e599121a034adc0707f232cf6e2",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在 React 組件中，props 是我們從父組件傳遞給子組件的變量。同樣地，state 也是變量，但不同之處在於它們不是作為參數傳遞的，而是由組件內部初始化和管理的。"
      }
    },
    {
      "segment_id": "f947c8e4",
      "source_content": "#### Are there differences between React and React Native to handle the state?",
      "source_content_hash": "a2cdff1475424284616d6da8e3d1e4361bb624668b58c267c9b437e4f4d7030b",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "#### React 和 React Native 在處理 state 上有區別嗎？"
      }
    },
    {
      "segment_id": "905803c8",
      "source_content": "<div className=\"two-columns\">\n\n```jsx\n// ReactJS Counter Example using Hooks!\n\nimport React, { useState } from 'react';\n\n\n\nconst App = () => {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div className=\"container\">\n      <p>You clicked {count} times</p>\n      <button\n        onClick={() => setCount(count + 1)}>\n        Click me!\n      </button>\n    </div>\n  );\n};\n\n\n// CSS\n.container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n```\n\n```jsx\n// React Native Counter Example using Hooks!\n\nimport React, {useState} from 'react';\nimport {View, Text, Button, StyleSheet} from 'react-native';\n\nconst App = () => {\n  const [count, setCount] = useState(0);\n\n  return (\n    <View style={styles.container}>\n      <Text>You clicked {count} times</Text>\n      <Button\n        onPress={() => setCount(count + 1)}\n        title=\"Click me!\"\n      />\n    </View>\n  );\n};\n\n// React Native Styles\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n</div>",
      "source_content_hash": "12c16daf718370d3528fe04c133365ee7aff8168d0de1099e3cb329a4f2c79e3",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_905803c8"
      }
    },
    {
      "segment_id": "85ea22dd",
      "source_content": "As shown above, there is no difference in handling the `state` between [React](https://reactjs.org/docs/state-and-lifecycle.html) and `React Native`. You can use the state of your components both in classes and in functional components using [hooks](https://reactjs.org/docs/hooks-intro.html)!",
      "source_content_hash": "93883dd268d9c6246f831aaccd2c5de589799662c9449e372dc55b41fd747440",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "As shown above, there is no difference in handling the `state` between [React](https://reactjs.org/docs/state-and-lifecycle.html) and `React Native`. You can use the state of your components both in classes and in functional components using [hooks](https://reactjs.org/docs/hooks-intro.html)!"
      }
    },
    {
      "segment_id": "dc72fd20",
      "source_content": "In the following example we will show the same above counter example using classes.",
      "source_content_hash": "cff762265f05b4b4285a2c12b9b459efc46c4d0b8fb2fb3143dd3e3b70880016",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在下面的例子中，我們將使用類來展示相同的計數器示例。"
      }
    },
    {
      "segment_id": "82a37a1b",
      "source_content": "```SnackPlayer name=Hello%20Classes\nimport React, { Component } from 'react'\nimport {\n  StyleSheet,\n  TouchableOpacity,\n  Text,\n  View,\n} from 'react-native'\n\nclass App extends Component {\n  state = {\n    count: 0\n  }\n\n  onPress = () => {\n    this.setState({\n      count: this.state.count + 1\n    })\n  }\n\n render() {\n    return (\n      <View style={styles.container}>\n        <TouchableOpacity\n         style={styles.button}\n         onPress={this.onPress}\n        >\n         <Text>Click me</Text>\n        </TouchableOpacity>\n        <View>\n          <Text>\n            You clicked { this.state.count } times\n          </Text>\n        </View>\n      </View>\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  button: {\n    alignItems: 'center',\n    backgroundColor: '#DDDDDD',\n    padding: 10,\n    marginBottom: 10\n  }\n})\n\nexport default App;\n```",
      "source_content_hash": "819287e939a8130f00c562e2f39140002fd36d35e1cccefef1471508368f86d0",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_82a37a1b"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.70/tutorial.md",
  "last_updated_timestamp": "2025-06-19T15:33:40.509385+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "3eb838d62c041819041086a7ce683f337af6060af710f66c97326521bbd1a81c"
  }
}