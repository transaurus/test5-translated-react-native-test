{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.70/animations.md",
  "source_file_content_hash": "7fb32730b8e9a90d08ff59bb8ad30fe36be33d6830c0c9abb854db339cc4ba6c",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: animations\ntitle: Animations\n---",
      "source_content_hash": "380ca41bc755a07945d27ff0fb6427c7c81f2e62ed72dc0c43b3566b57a3d652",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "4d1292be",
      "source_content": "import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; import constants from '@site/core/TabsConstants';",
      "source_content_hash": "0aed60180598135363f970d0b23d8d7665430a4b05f703a572a064dbbca30b07",
      "node_type": "mdxjsEsm",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_4d1292be"
      }
    },
    {
      "segment_id": "3fbbcc07",
      "source_content": "Animations are very important to create a great user experience. Stationary objects must overcome inertia as they start moving. Objects in motion have momentum and rarely come to a stop immediately. Animations allow you to convey physically believable motion in your interface.",
      "source_content_hash": "4988e6454ce17b03a3ffefe1d3b306e156158f12a9f22a7a9caf1f29f9cdedcd",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "動畫對於創造出色的用戶體驗至關重要。靜止的物體開始移動時必須克服慣性，而運動中的物體具有動量，很少會立即停止。動畫能讓您在介面中傳達符合物理規律的運動效果。"
      }
    },
    {
      "segment_id": "7e5c5a39",
      "source_content": "React Native provides two complementary animation systems: [`Animated`](animations#animated-api) for granular and interactive control of specific values, and [`LayoutAnimation`](animations#layoutanimation-api) for animated global layout transactions.",
      "source_content_hash": "139ac6422b7c1b72ac0569f6a10d2eed741013acc53e406d4ab94219283de061",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "React Native 提供兩套互補的動畫系統：[`Animated`](animations#animated-api) 用於對特定值進行細粒度互動控制，[`LayoutAnimation`](animations#layoutanimation-api) 則用於全局佈局變換的動畫處理。"
      }
    },
    {
      "segment_id": "9fcbdce9",
      "source_content": "## `Animated` API",
      "source_content_hash": "127b14c5a8ff18ade40bfe09836014194f189f24a8e1c22cfa6b80b7dc17e7be",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## `Animated` API"
      }
    },
    {
      "segment_id": "ad8fd492",
      "source_content": "The [`Animated`](animated) API is designed to concisely express a wide variety of interesting animation and interaction patterns in a very performant way. `Animated` focuses on declarative relationships between inputs and outputs, with configurable transforms in between, and `start`/`stop` methods to control time-based animation execution.",
      "source_content_hash": "23c0568e209fa2ceec421793121a7066d34f00f62877eedaa793b318e52501db",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "The [`Animated`](animated) API is designed to concisely express a wide variety of interesting animation and interaction patterns in a very performant way. `Animated` focuses on declarative relationships between inputs and outputs, with configurable transforms in between, and `start`/`stop` methods to control time-based animation execution."
      }
    },
    {
      "segment_id": "86b54d44",
      "source_content": "`Animated` exports six animatable component types: `View`, `Text`, `Image`, `ScrollView`, `FlatList` and `SectionList`, but you can also create your own using `Animated.createAnimatedComponent()`.",
      "source_content_hash": "56e8f93bdbef71e4d86d122e6c2ef4080bf424f55a8bca667a4e82b19fc939c9",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "`Animated` 導出六種可動畫化的組件類型：`View`、`Text`、`Image`、`ScrollView`、`FlatList` 和 `SectionList`，您也可以使用 `Animated.createAnimatedComponent()` 創建自定義組件。"
      }
    },
    {
      "segment_id": "39b3772c",
      "source_content": "For example, a container view that fades in when it is mounted may look like this:",
      "source_content_hash": "c61bcd1a39301e3184400679b87954214d09c82239b739630010ad0e4235b218",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "例如，一個在掛載時淡入的容器視圖可能如下所示："
      }
    },
    {
      "segment_id": "166426c2",
      "source_content": "```SnackPlayer\nimport React, { useRef, useEffect } from 'react';\nimport { Animated, Text, View } from 'react-native';\n\nconst FadeInView = (props) => {\n  const fadeAnim = useRef(new Animated.Value(0)).current  // Initial value for opacity: 0\n\n  useEffect(() => {\n    Animated.timing(\n      fadeAnim,\n      {\n        toValue: 1,\n        duration: 10000,\n      }\n    ).start();\n  }, [fadeAnim])\n\n  return (\n    <Animated.View                 // Special animatable View\n      style={{\n        ...props.style,\n        opacity: fadeAnim,         // Bind opacity to animated value\n      }}\n    >\n      {props.children}\n    </Animated.View>\n  );\n}\n\n// You can then use your `FadeInView` in place of a `View` in your components:\nexport default () => {\n  return (\n    <View style={{flex: 1, alignItems: 'center', justifyContent: 'center'}}>\n      <FadeInView style={{width: 250, height: 50, backgroundColor: 'powderblue'}}>\n        <Text style={{fontSize: 28, textAlign: 'center', margin: 10}}>Fading in</Text>\n      </FadeInView>\n    </View>\n  )\n}\n```",
      "source_content_hash": "ca68b2988e684335ac7536a8c6929343c5d80284bce5ff1f5152261e0c8b9c38",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_166426c2"
      }
    },
    {
      "segment_id": "1131ef75",
      "source_content": "Let's break down what's happening here. In the `FadeInView` constructor, a new `Animated.Value` called `fadeAnim` is initialized as part of `state`. The opacity property on the `View` is mapped to this animated value. Behind the scenes, the numeric value is extracted and used to set opacity.",
      "source_content_hash": "7388cba49df8bacbce890f2f95387c8a75dc360d3b993c4f479c6d95a5f94ba8",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "Let's break down what's happening here. In the `FadeInView` constructor, a new `Animated.Value` called `fadeAnim` is initialized as part of `state`. The opacity property on the `View` is mapped to this animated value. Behind the scenes, the numeric value is extracted and used to set opacity."
      }
    },
    {
      "segment_id": "8b2a52b1",
      "source_content": "When the component mounts, the opacity is set to 0. Then, an easing animation is started on the `fadeAnim` animated value, which will update all of its dependent mappings (in this case, only the opacity) on each frame as the value animates to the final value of 1.",
      "source_content_hash": "0ec0bc916768164748b3b0943a2f721a278606fa03629f9c98e07c8f23e05578",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "組件掛載時，透明度設為 0。接著對 `fadeAnim` 啟動緩動動畫，該值會逐幀過渡到最終值 1，同時更新所有關聯屬性（本例中僅透明度）。"
      }
    },
    {
      "segment_id": "5dae11e3",
      "source_content": "This is done in an optimized way that is faster than calling `setState` and re-rendering. Because the entire configuration is declarative, we will be able to implement further optimizations that serialize the configuration and runs the animation on a high-priority thread.",
      "source_content_hash": "5e51573d5073936f210d09d198e1a049c80a29efcf3ce978f73000f747b8f576",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此過程經過優化，比調用 `setState` 重新渲染更高效。由於整個配置是聲明式的，未來還能實現將配置序列化並在高優先級線程運行動畫的進一步優化。"
      }
    },
    {
      "segment_id": "a5a4323e",
      "source_content": "### Configuring animations",
      "source_content_hash": "593875e88306417de19107bda268eeaf6ce5761ebc436177607362e9b9821305",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 配置動畫"
      }
    },
    {
      "segment_id": "657c2b20",
      "source_content": "Animations are heavily configurable. Custom and predefined easing functions, delays, durations, decay factors, spring constants, and more can all be tweaked depending on the type of animation.",
      "source_content_hash": "fb29411ba14f541e1fec6804a88688ba5d1c46048ca486cc24ede98294ed663a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "動畫具有高度可配置性。自定義或預設的緩動函數、延遲、持續時間、衰減係數、彈簧常數等參數，均可根據動畫類型調整。"
      }
    },
    {
      "segment_id": "e7772088",
      "source_content": "`Animated` provides several animation types, the most commonly used one being [`Animated.timing()`](animated#timing). It supports animating a value over time using one of various predefined easing functions, or you can use your own. Easing functions are typically used in animation to convey gradual acceleration and deceleration of objects.",
      "source_content_hash": "18f7debb18026d4992a626046cdc730bd247816fcdbce8f82564d7ad66844d2f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "`Animated` 提供多種動畫類型，最常用的是 [`Animated.timing()`](animated#timing)。它支持使用預設緩動函數（或自定義函數）隨時間變化數值。緩動函數通常用於表現物體的漸進加速與減速效果。"
      }
    },
    {
      "segment_id": "eab056be",
      "source_content": "By default, `timing` will use an easeInOut curve that conveys gradual acceleration to full speed and concludes by gradually decelerating to a stop. You can specify a different easing function by passing an `easing` parameter. Custom `duration` or even a `delay` before the animation starts is also supported.",
      "source_content_hash": "460ac45540376b252bfeb793b3cf9df1555179470f829543f3a1d865d716055c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "默認情況下，`timing` 採用 easeInOut 曲線，表現為先漸進加速至全速，結束時漸進減速至停止。您可通過 `easing` 參數指定其他緩動函數，也支持設置自定義 `duration` 或動畫開始前的 `delay`。"
      }
    },
    {
      "segment_id": "f01228d3",
      "source_content": "For example, if we want to create a 2-second long animation of an object that slightly backs up before moving to its final position:",
      "source_content_hash": "efdd925bf497b7f4f4163a03804c452d37a9184a798be377e2f6e3e3d84dcd15",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "例如，若要創建一個時長 2 秒的動畫，讓物體在到達最終位置前先輕微後退："
      }
    },
    {
      "segment_id": "c808e01e",
      "source_content": "```jsx\nAnimated.timing(this.state.xPosition, {\n  toValue: 100,\n  easing: Easing.back(),\n  duration: 2000,\n}).start();\n```",
      "source_content_hash": "28319940e010bf6462ed5a0f829bfdd46544b0ef0c2144e13984fb9c3440ea38",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_c808e01e"
      }
    },
    {
      "segment_id": "fbc2db85",
      "source_content": "Take a look at the [Configuring animations](animated#configuring-animations) section of the `Animated` API reference to learn more about all the config parameters supported by the built-in animations.",
      "source_content_hash": "1b2987696b205df70d4a9eb1e6e5039a41600352ee59c688274bea2dcc43f261",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "Take a look at the [Configuring animations](animated#configuring-animations) section of the `Animated` API reference to learn more about all the config parameters supported by the built-in animations."
      }
    },
    {
      "segment_id": "759d12dd",
      "source_content": "### Composing animations",
      "source_content_hash": "60f8b794928e38f67e12e381e02c208987ccbdce67e54f833d8421b0794542f7",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 組合動畫"
      }
    },
    {
      "segment_id": "74dd7937",
      "source_content": "Animations can be combined and played in sequence or in parallel. Sequential animations can play immediately after the previous animation has finished, or they can start after a specified delay. The `Animated` API provides several methods, such as `sequence()` and `delay()`, each of which take an array of animations to execute and automatically calls `start()`/`stop()` as needed.",
      "source_content_hash": "988fe16b7a9c97dc537c9602362220b8534f544daea4b68b3740e4967b2a426f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "動畫可組合並以序列或並行方式播放。序列動畫可在前一動畫結束後立即播放，或延遲指定時間啟動。`Animated` API 提供 `sequence()` 和 `delay()` 等方法，這些方法接收動畫數組並自動按需調用 `start()`/`stop()`。"
      }
    },
    {
      "segment_id": "5803caac",
      "source_content": "For example, the following animation coasts to a stop, then it springs back while twirling in parallel:",
      "source_content_hash": "943c9a659185eef89b34a8d00a5776fc174c3ff2382dd614de7eadbb4a18d1e0",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "例如，以下動畫先滑行至停止，然後同時彈回並旋轉："
      }
    },
    {
      "segment_id": "5782e280",
      "source_content": "```jsx\nAnimated.sequence([\n  // decay, then spring to start and twirl\n  Animated.decay(position, {\n    // coast to a stop\n    velocity: {x: gestureState.vx, y: gestureState.vy}, // velocity from gesture release\n    deceleration: 0.997,\n  }),\n  Animated.parallel([\n    // after decay, in parallel:\n    Animated.spring(position, {\n      toValue: {x: 0, y: 0}, // return to start\n    }),\n    Animated.timing(twirl, {\n      // and twirl\n      toValue: 360,\n    }),\n  ]),\n]).start(); // start the sequence group\n```",
      "source_content_hash": "61bcebaf326eb71fd20a78d888d4e41afa03f022bfb82992a639e20f1861179e",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_5782e280"
      }
    },
    {
      "segment_id": "3c19e221",
      "source_content": "If one animation is stopped or interrupted, then all other animations in the group are also stopped. `Animated.parallel` has a `stopTogether` option that can be set to `false` to disable this.",
      "source_content_hash": "166184403fdbabbc4ff2b36fa40ed1f58705c0c97cf7eef1f74ff1d69244a449",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "若某個動畫被停止或中斷，組合中的所有其他動畫也會停止。`Animated.parallel` 提供 `stopTogether` 選項，設置為 `false` 可禁用此行為。"
      }
    },
    {
      "segment_id": "d21af28f",
      "source_content": "You can find a full list of composition methods in the [Composing animations](animated#composing-animations) section of the `Animated` API reference.",
      "source_content_hash": "294b5252e040b27cb3d02bd51ecc8db3422b5404e4df5b4913d9fbb2c5a0c19c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "You can find a full list of composition methods in the [Composing animations](animated#composing-animations) section of the `Animated` API reference."
      }
    },
    {
      "segment_id": "f8614e13",
      "source_content": "### Combining animated values",
      "source_content_hash": "d5725af6ad6addb4fa0f6f0576624474ac53434215e19209506205e6fdf871ed",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 合併動畫數值"
      }
    },
    {
      "segment_id": "396efb28",
      "source_content": "You can [combine two animated values](animated#combining-animated-values) via addition, multiplication, division, or modulo to make a new animated value.",
      "source_content_hash": "1d61845fdb16ac08ecabf1166f7950c8cc9cf3cf92d8ed3bc3e1e4d010f722a1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "您可以透過加法、乘法、除法或模數運算來[合併兩個動畫數值](animated#combining-animated-values)，以產生新的動畫數值。"
      }
    },
    {
      "segment_id": "558df877",
      "source_content": "There are some cases where an animated value needs to invert another animated value for calculation. An example is inverting a scale (2x --> 0.5x):",
      "source_content_hash": "bf035a4811dec251a028d21281c51695a79f00ecc481c4645b39b77f7e804d40",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "某些情況下，動畫數值需要反轉另一個動畫數值進行計算。例如反轉縮放比例（2倍 → 0.5倍）："
      }
    },
    {
      "segment_id": "6f605d92",
      "source_content": "```jsx\nconst a = new Animated.Value(1);\nconst b = Animated.divide(1, a);\n\nAnimated.spring(a, {\n  toValue: 2,\n}).start();\n```",
      "source_content_hash": "ef0e7538fe28948beb10a808692d84053246ab68189897b8a30552bc6bf7c217",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_6f605d92"
      }
    },
    {
      "segment_id": "c766290e",
      "source_content": "### Interpolation",
      "source_content_hash": "d754974511f9e5dfafe9487e64ac23adb03a9c3eab32484fb848b9efd14475ab",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 插值運算"
      }
    },
    {
      "segment_id": "5c7d994c",
      "source_content": "Each property can be run through an interpolation first. An interpolation maps input ranges to output ranges, typically using a linear interpolation but also supports easing functions. By default, it will extrapolate the curve beyond the ranges given, but you can also have it clamp the output value.",
      "source_content_hash": "dd1fb98debea76f8da98a954c6c473a250ee860c151b4cf528b21757a0556fdd",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "每個屬性都可以先經過插值處理。插值運算會將輸入範圍映射到輸出範圍，通常使用線性插值，但也支援緩動函數。預設情況下，它會將曲線外推至給定範圍之外，但您也可以設定讓輸出值固定於範圍內。"
      }
    },
    {
      "segment_id": "1ecf0882",
      "source_content": "A basic mapping to convert a 0-1 range to a 0-100 range would be:",
      "source_content_hash": "57195f990a149a1d21398e2207311056eb8396866da28fcd044ce83423f4a1a7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "將 0-1 範圍轉換為 0-100 範圍的基本映射如下："
      }
    },
    {
      "segment_id": "4c6754b2",
      "source_content": "```jsx\nvalue.interpolate({\n  inputRange: [0, 1],\n  outputRange: [0, 100],\n});\n```",
      "source_content_hash": "297aacfad491624f7dd911d0fbfb16b9d8a21b4e489db6b9d767c0ae1b00947f",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_4c6754b2"
      }
    },
    {
      "segment_id": "cfeb9eb1",
      "source_content": "For example, you may want to think about your `Animated.Value` as going from 0 to 1, but animate the position from 150px to 0px and the opacity from 0 to 1. This can be done by modifying `style` from the example above like so:",
      "source_content_hash": "63342f0239c865174478e3bc149760770dbde7420d1aefeae6e7c826431ed4a3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "舉例來說，您可能希望將 `Animated.Value` 視為從 0 到 1 變化，但實際動畫效果是將位置從 150px 移動到 0px，同時透明度從 0 變為 1。可以透過修改上述範例中的 `style` 來實現："
      }
    },
    {
      "segment_id": "e481745b",
      "source_content": "```jsx\n  style={{\n    opacity: this.state.fadeAnim, // Binds directly\n    transform: [{\n      translateY: this.state.fadeAnim.interpolate({\n        inputRange: [0, 1],\n        outputRange: [150, 0]  // 0 : 150, 0.5 : 75, 1 : 0\n      }),\n    }],\n  }}\n```",
      "source_content_hash": "cbb74416a9376b43f43f68e41f9c9ee212e4cef357238bbf610c127446ba8743",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_e481745b"
      }
    },
    {
      "segment_id": "a8f09c71",
      "source_content": "[`interpolate()`](animated#interpolate) supports multiple range segments as well, which is handy for defining dead zones and other handy tricks. For example, to get a negation relationship at -300 that goes to 0 at -100, then back up to 1 at 0, and then back down to zero at 100 followed by a dead-zone that remains at 0 for everything beyond that, you could do:",
      "source_content_hash": "44a1364b94617645ac8a5d522efde09cf9c6a70716b277cd41158bd95f214c59",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "[`interpolate()`](animated#interpolate) 還支援多段範圍映射，這對於定義死區和其他實用技巧非常方便。例如，若要實現一個在 -300 處反向變化、在 -100 處歸零、在 0 處回升至 1、在 100 處再次歸零，之後保持為 0 的死區效果，可以這樣設定："
      }
    },
    {
      "segment_id": "25a51782",
      "source_content": "```jsx\nvalue.interpolate({\n  inputRange: [-300, -100, 0, 100, 101],\n  outputRange: [300, 0, 1, 0, 0],\n});\n```",
      "source_content_hash": "4bd24b2928ad9103b074f0aa7d15d0a99af0ac5089c600bd87a87eb19f50a773",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_25a51782"
      }
    },
    {
      "segment_id": "39f476dc",
      "source_content": "Which would map like so:",
      "source_content_hash": "a70dba9829f8889197260fb03908e669b28e04aee4537502ed0f61b323f7d90d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "其映射關係如下："
      }
    },
    {
      "segment_id": "8ecb92db",
      "source_content": "```\nInput | Output\n------|-------\n  -400|    450\n  -300|    300\n  -200|    150\n  -100|      0\n   -50|    0.5\n     0|      1\n    50|    0.5\n   100|      0\n   101|      0\n   200|      0\n```",
      "source_content_hash": "6d2381085360fb77bbf4510df8c833b0c40478432f0e55bdf3d1a84019bc507d",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_8ecb92db"
      }
    },
    {
      "segment_id": "c8a6ab3e",
      "source_content": "`interpolate()` also supports mapping to strings, allowing you to animate colors as well as values with units. For example, if you wanted to animate a rotation you could do:",
      "source_content_hash": "02285932f200f5c6ea0a0a7d15528ee6c3c7b8086e0bb375e7a762cd7027f15e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "`interpolate()` 也支援映射至字串，讓您能動畫化顏色和帶單位的數值。例如，若要實現旋轉動畫，可以這樣做："
      }
    },
    {
      "segment_id": "f02969e0",
      "source_content": "```jsx\nvalue.interpolate({\n  inputRange: [0, 360],\n  outputRange: ['0deg', '360deg'],\n});\n```",
      "source_content_hash": "e1f988338e979ce2798326abfa2640cedcb25caf2f16a101cb75ecc50e285436",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_f02969e0"
      }
    },
    {
      "segment_id": "6fad5db5",
      "source_content": "`interpolate()` also supports arbitrary easing functions, many of which are already implemented in the [`Easing`](easing) module. `interpolate()` also has configurable behavior for extrapolating the `outputRange`. You can set the extrapolation by setting the `extrapolate`, `extrapolateLeft`, or `extrapolateRight` options. The default value is `extend` but you can use `clamp` to prevent the output value from exceeding `outputRange`.",
      "source_content_hash": "55913f0a1fb10a54bb9870d7b6588b4ce6a2559c175872bc7e32bfbcb5bfde38",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "`interpolate()` also supports arbitrary easing functions, many of which are already implemented in the [`Easing`](easing) module. `interpolate()` also has configurable behavior for extrapolating the `outputRange`. You can set the extrapolation by setting the `extrapolate`, `extrapolateLeft`, or `extrapolateRight` options. The default value is `extend` but you can use `clamp` to prevent the output value from exceeding `outputRange`."
      }
    },
    {
      "segment_id": "dfa23ddf",
      "source_content": "### Tracking dynamic values",
      "source_content_hash": "8f41b9a0e7a7b4340898f4696185e1dddc72b04bb52bc3ecf5b8d3fc6a957285",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 追蹤動態數值"
      }
    },
    {
      "segment_id": "f2c67ca5",
      "source_content": "Animated values can also track other values by setting the `toValue` of an animation to another animated value instead of a plain number. For example, a \"Chat Heads\" animation like the one used by Messenger on Android could be implemented with a `spring()` pinned on another animated value, or with `timing()` and a `duration` of 0 for rigid tracking. They can also be composed with interpolations:",
      "source_content_hash": "0164679e583de15e63bd689c21bcabc6360b6ddd7771b4049c767f04cc1f2385",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "Animated values can also track other values by setting the `toValue` of an animation to another animated value instead of a plain number. For example, a \"Chat Heads\" animation like the one used by Messenger on Android could be implemented with a `spring()` pinned on another animated value, or with `timing()` and a `duration` of 0 for rigid tracking. They can also be composed with interpolations:"
      }
    },
    {
      "segment_id": "46dadadd",
      "source_content": "```jsx\nAnimated.spring(follower, {toValue: leader}).start();\nAnimated.timing(opacity, {\n  toValue: pan.x.interpolate({\n    inputRange: [0, 300],\n    outputRange: [1, 0],\n  }),\n}).start();\n```",
      "source_content_hash": "a3de345f3fd19c91fb5c64507f1d98597d3c9b92e7e9afcc1c9dd593ba1aab74",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_46dadadd"
      }
    },
    {
      "segment_id": "eeeea5ce",
      "source_content": "The `leader` and `follower` animated values would be implemented using `Animated.ValueXY()`. `ValueXY` is a handy way to deal with 2D interactions, such as panning or dragging. It is a basic wrapper that contains two `Animated.Value` instances and some helper functions that call through to them, making `ValueXY` a drop-in replacement for `Value` in many cases. It allows us to track both x and y values in the example above.",
      "source_content_hash": "749c208a16fdf80c89c02064876bed4eba2aff8e2657adb6a8b44cfb79339ca6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "The `leader` and `follower` animated values would be implemented using `Animated.ValueXY()`. `ValueXY` is a handy way to deal with 2D interactions, such as panning or dragging. It is a basic wrapper that contains two `Animated.Value` instances and some helper functions that call through to them, making `ValueXY` a drop-in replacement for `Value` in many cases. It allows us to track both x and y values in the example above."
      }
    },
    {
      "segment_id": "97496aad",
      "source_content": "### Tracking gestures",
      "source_content_hash": "71246a88951b12f5ae2dd719a3af09a318894cadd34d3566041ee298d1c54931",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 追蹤手勢"
      }
    },
    {
      "segment_id": "af834e0d",
      "source_content": "Gestures, like panning or scrolling, and other events can map directly to animated values using [`Animated.event`](animated#event). This is done with a structured map syntax so that values can be extracted from complex event objects. The first level is an array to allow mapping across multiple args, and that array contains nested objects.",
      "source_content_hash": "205a05204f37a4a5316f621abbc01158ddd8d52b6fcc46b3c755f36f879f99ce",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "透過 [`Animated.event`](animated#event)，手勢（如平移或滾動）和其他事件可直接映射至動畫數值。此功能採用結構化映射語法，能從複雜事件物件中提取數值。第一層是陣列，用於跨多個參數映射，該陣列包含嵌套物件。"
      }
    },
    {
      "segment_id": "d75361e3",
      "source_content": "For example, when working with horizontal scrolling gestures, you would do the following in order to map `event.nativeEvent.contentOffset.x` to `scrollX` (an `Animated.Value`):",
      "source_content_hash": "a51325d2b0923e7ac6a21c69b70c54ece615c7a54a420dd6a077b3e6d6e9a719",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "例如，處理水平滾動手勢時，可透過以下方式將 `event.nativeEvent.contentOffset.x` 映射至 `scrollX`（一個 `Animated.Value`）："
      }
    },
    {
      "segment_id": "3ae81768",
      "source_content": "```jsx\n onScroll={Animated.event(\n   // scrollX = e.nativeEvent.contentOffset.x\n   [{ nativeEvent: {\n        contentOffset: {\n          x: scrollX\n        }\n      }\n    }]\n )}\n```",
      "source_content_hash": "ce807213170f8bdd56b814fc554e9b5e8d052b2530dd1b00793500777d498e3a",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_3ae81768"
      }
    },
    {
      "segment_id": "dbeb30c1",
      "source_content": "The following example implements a horizontal scrolling carousel where the scroll position indicators are animated using the `Animated.event` used in the `ScrollView`",
      "source_content_hash": "497fcd9ff3d8bbb7b3e8a81760e4594ee48c9751054500c2cbd16d57c9c21519",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "The following example implements a horizontal scrolling carousel where the scroll position indicators are animated using the `Animated.event` used in the `ScrollView`"
      }
    },
    {
      "segment_id": "c0f80a50",
      "source_content": "#### ScrollView with Animated Event Example",
      "source_content_hash": "f95b00434705d6dd906cc8c4d8b0a4be730136b6e38bcfa91797fa5845bf1315",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "#### 使用 Animated Event 的 ScrollView 範例"
      }
    },
    {
      "segment_id": "8750c0b5",
      "source_content": "<Tabs groupId=\"syntax\" queryString defaultValue={constants.defaultSyntax} values={constants.syntax}>\n<TabItem value=\"functional\">\n\n```SnackPlayer name=Animated&supportedPlatforms=ios,android\nimport React, { useRef } from \"react\";\nimport {\n  SafeAreaView,\n  ScrollView,\n  Text,\n  StyleSheet,\n  View,\n  ImageBackground,\n  Animated,\n  useWindowDimensions\n} from \"react-native\";\n\nconst images = new Array(6).fill('https://images.unsplash.com/photo-1556740749-887f6717d7e4');\n\nconst App = () => {\n  const scrollX = useRef(new Animated.Value(0)).current;\n\n  const { width: windowWidth } = useWindowDimensions();\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.scrollContainer}>\n        <ScrollView\n          horizontal={true}\n          pagingEnabled\n          showsHorizontalScrollIndicator={false}\n          onScroll={Animated.event([\n            {\n              nativeEvent: {\n                contentOffset: {\n                  x: scrollX\n                }\n              }\n            }\n          ])}\n          scrollEventThrottle={1}\n        >\n          {images.map((image, imageIndex) => {\n            return (\n              <View\n                style={{ width: windowWidth, height: 250 }}\n                key={imageIndex}\n              >\n                <ImageBackground source={{ uri: image }} style={styles.card}>\n                  <View style={styles.textContainer}>\n                    <Text style={styles.infoText}>\n                      {\"Image - \" + imageIndex}\n                    </Text>\n                  </View>\n                </ImageBackground>\n              </View>\n            );\n          })}\n        </ScrollView>\n        <View style={styles.indicatorContainer}>\n          {images.map((image, imageIndex) => {\n            const width = scrollX.interpolate({\n              inputRange: [\n                windowWidth * (imageIndex - 1),\n                windowWidth * imageIndex,\n                windowWidth * (imageIndex + 1)\n              ],\n              outputRange: [8, 16, 8],\n              extrapolate: \"clamp\"\n            });\n            return (\n              <Animated.View\n                key={imageIndex}\n                style={[styles.normalDot, { width }]}\n              />\n            );\n          })}\n        </View>\n      </View>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  scrollContainer: {\n    height: 300,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  card: {\n    flex: 1,\n    marginVertical: 4,\n    marginHorizontal: 16,\n    borderRadius: 5,\n    overflow: \"hidden\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  textContainer: {\n    backgroundColor: \"rgba(0,0,0, 0.7)\",\n    paddingHorizontal: 24,\n    paddingVertical: 8,\n    borderRadius: 5\n  },\n  infoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"bold\"\n  },\n  normalDot: {\n    height: 8,\n    width: 8,\n    borderRadius: 4,\n    backgroundColor: \"silver\",\n    marginHorizontal: 4\n  },\n  indicatorContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});\n\nexport default App;\n```\n\n</TabItem>\n<TabItem value=\"classical\">\n\n```SnackPlayer name=Animated&supportedPlatforms=ios,android\nimport React, { Component } from \"react\";\nimport {\n  SafeAreaView,\n  ScrollView,\n  Text,\n  StyleSheet,\n  View,\n  ImageBackground,\n  Animated,\n  Dimensions\n} from \"react-native\";\n\nconst images = new Array(6).fill('https://images.unsplash.com/photo-1556740749-887f6717d7e4');\n\nconst window = Dimensions.get(\"window\");\n\nexport default class App extends Component {\n  scrollX = new Animated.Value(0);\n\n  state = {\n    dimensions: {\n      window\n    }\n  };\n\n  onDimensionsChange = ({ window }) => {\n    this.setState({ dimensions: { window } });\n  };\n\n  componentDidMount() {\n    Dimensions.addEventListener(\"change\", this.onDimensionsChange);\n  }\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener(\"change\", this.onDimensionsChange);\n  }\n\n  render() {\n    const windowWidth = this.state.dimensions.window.width;\n\n    return (\n      <SafeAreaView style={styles.container}>\n        <View style={styles.scrollContainer}>\n          <ScrollView\n            horizontal={true}\n            pagingEnabled\n            showsHorizontalScrollIndicator={false}\n            onScroll={Animated.event([\n              {\n                nativeEvent: {\n                  contentOffset: {\n                    x: this.scrollX\n                  }\n                }\n              }\n            ])}\n            scrollEventThrottle={1}\n          >\n            {images.map((image, imageIndex) => {\n              return (\n                <View\n                  style={{\n                    width: windowWidth,\n                    height: 250\n                  }}\n                  key={imageIndex}\n                >\n                  <ImageBackground source={{ uri: image }} style={styles.card}>\n                    <View style={styles.textContainer}>\n                      <Text style={styles.infoText}>\n                        {\"Image - \" + imageIndex}\n                      </Text>\n                    </View>\n                  </ImageBackground>\n                </View>\n              );\n            })}\n          </ScrollView>\n          <View style={styles.indicatorContainer}>\n            {images.map((image, imageIndex) => {\n              const width = this.scrollX.interpolate({\n                inputRange: [\n                  windowWidth * (imageIndex - 1),\n                  windowWidth * imageIndex,\n                  windowWidth * (imageIndex + 1)\n                ],\n                outputRange: [8, 16, 8],\n                extrapolate: \"clamp\"\n              });\n              return (\n                <Animated.View\n                  key={imageIndex}\n                  style={[styles.normalDot, { width }]}\n                />\n              );\n            })}\n          </View>\n        </View>\n      </SafeAreaView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  scrollContainer: {\n    height: 300,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  card: {\n    flex: 1,\n    marginVertical: 4,\n    marginHorizontal: 16,\n    borderRadius: 5,\n    overflow: \"hidden\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  textContainer: {\n    backgroundColor: \"rgba(0,0,0, 0.7)\",\n    paddingHorizontal: 24,\n    paddingVertical: 8,\n    borderRadius: 5\n  },\n  infoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"bold\"\n  },\n  normalDot: {\n    height: 8,\n    width: 8,\n    borderRadius: 4,\n    backgroundColor: \"silver\",\n    marginHorizontal: 4\n  },\n  indicatorContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "e8cf0f173db8482996d39cbf8a50f3850b9405efe8c0c82cca02cd9c63b61fd9",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_8750c0b5"
      }
    },
    {
      "segment_id": "a58d6660",
      "source_content": "When using `PanResponder`, you could use the following code to extract the x and y positions from `gestureState.dx` and `gestureState.dy`. We use a `null` in the first position of the array, as we are only interested in the second argument passed to the `PanResponder` handler, which is the `gestureState`.",
      "source_content_hash": "f0bb573c4a6d86b3e1847feaff3e191298a2bde7198f2e30c22ea78c7ea4d916",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "使用 `PanResponder` 時，可以透過以下程式碼從 `gestureState.dx` 和 `gestureState.dy` 提取 x 和 y 座標。我們在陣列的第一個位置使用 `null`，因為我們只對傳遞給 `PanResponder` 處理器的第二個參數 `gestureState` 感興趣。"
      }
    },
    {
      "segment_id": "46325e7d",
      "source_content": "```jsx\nonPanResponderMove={Animated.event(\n  [null, // ignore the native event\n  // extract dx and dy from gestureState\n  // like 'pan.x = gestureState.dx, pan.y = gestureState.dy'\n  {dx: pan.x, dy: pan.y}\n])}\n```",
      "source_content_hash": "6f7e7be5d965cd316cc6c614ce3921956c0786c423b335445da204d9d014e222",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_46325e7d"
      }
    },
    {
      "segment_id": "41e20c06",
      "source_content": "#### PanResponder with Animated Event Example",
      "source_content_hash": "71cfc7a2512ea3d2f27b6496a3eb0115e4fed41c8215db97a3192d6bbf08808b",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "#### 使用 Animated Event 的 PanResponder 範例"
      }
    },
    {
      "segment_id": "4e968f26",
      "source_content": "<Tabs groupId=\"syntax\" queryString defaultValue={constants.defaultSyntax} values={constants.syntax}>\n<TabItem value=\"functional\">\n\n```SnackPlayer name=Animated\nimport React, { useRef } from \"react\";\nimport { Animated, View, StyleSheet, PanResponder, Text } from \"react-native\";\n\nconst App = () => {\n  const pan = useRef(new Animated.ValueXY()).current;\n  const panResponder = useRef(\n    PanResponder.create({\n      onMoveShouldSetPanResponder: () => true,\n      onPanResponderMove: Animated.event([\n        null,\n        { dx: pan.x, dy: pan.y }\n      ]),\n      onPanResponderRelease: () => {\n        Animated.spring(pan, { toValue: { x: 0, y: 0 } }).start();\n      }\n    })\n  ).current;\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.titleText}>Drag & Release this box!</Text>\n      <Animated.View\n        style={{\n          transform: [{ translateX: pan.x }, { translateY: pan.y }]\n        }}\n        {...panResponder.panHandlers}\n      >\n        <View style={styles.box} />\n      </Animated.View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  titleText: {\n    fontSize: 14,\n    lineHeight: 24,\n    fontWeight: \"bold\"\n  },\n  box: {\n    height: 150,\n    width: 150,\n    backgroundColor: \"blue\",\n    borderRadius: 5\n  }\n});\n\nexport default App;\n```\n\n</TabItem>\n<TabItem value=\"classical\">\n\n```SnackPlayer name=Animated\nimport React, { Component } from \"react\";\nimport { Animated, View, StyleSheet, PanResponder, Text } from \"react-native\";\n\nexport default class App extends Component {\n  pan = new Animated.ValueXY();\n  panResponder = PanResponder.create({\n    onMoveShouldSetPanResponder: () => true,\n    onPanResponderMove: Animated.event([\n      null,\n      { dx: this.pan.x, dy: this.pan.y }\n    ]),\n    onPanResponderRelease: () => {\n      Animated.spring(this.pan, { toValue: { x: 0, y: 0 } }).start();\n    }\n  });\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.titleText}>Drag & Release this box!</Text>\n        <Animated.View\n          style={{\n            transform: [{ translateX: this.pan.x }, { translateY: this.pan.y }]\n          }}\n          {...this.panResponder.panHandlers}\n        >\n          <View style={styles.box} />\n        </Animated.View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  titleText: {\n    fontSize: 14,\n    lineHeight: 24,\n    fontWeight: \"bold\"\n  },\n  box: {\n    height: 150,\n    width: 150,\n    backgroundColor: \"blue\",\n    borderRadius: 5\n  }\n});\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "4de05a3680d0452bbc462a91a91d8cf5ea337078c600c3e56ffb03256d42f804",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_4e968f26"
      }
    },
    {
      "segment_id": "d4ce8524",
      "source_content": "### Responding to the current animation value",
      "source_content_hash": "ed13e7d51d91108b21788bfa4ed3de52d3eb0bfe8d8c345458727e50c892715c",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 響應當前的動畫值"
      }
    },
    {
      "segment_id": "6ecf4565",
      "source_content": "You may notice that there is no clear way to read the current value while animating. This is because the value may only be known in the native runtime due to optimizations. If you need to run JavaScript in response to the current value, there are two approaches:",
      "source_content_hash": "cdebdfb21107ece139e9862943d536821629444bf340f2a6fc5819c2c4e9f483",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "你可能會注意到，在動畫進行時沒有明確的方法可以讀取當前值。這是因為由於優化，該值可能只在原生運行時中才能得知。如果你需要根據當前值執行 JavaScript，有兩種方法："
      }
    },
    {
      "segment_id": "1688725a",
      "source_content": "- `spring.stopAnimation(callback)` will stop the animation and invoke `callback` with the final value. This is useful when making gesture transitions.\n- `spring.addListener(callback)` will invoke `callback` asynchronously while the animation is running, providing a recent value. This is useful for triggering state changes, for example snapping a bobble to a new option as the user drags it closer, because these larger state changes are less sensitive to a few frames of lag compared to continuous gestures like panning which need to run at 60 fps.",
      "source_content_hash": "ea45aac3513400cf6d01fb750003033fbcf8fe5d3bdd58f9b26853abf334b391",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- `spring.stopAnimation(callback)` 會停止動畫並以最終值調用 `callback`。這在製作手勢過渡時非常有用。\n- `spring.addListener(callback)` 會在動畫運行時異步調用 `callback`，提供最近的值。這對於觸發狀態變化很有用，例如當用戶將一個浮動元素拖近時將其吸附到新選項，因為這些較大的狀態變化對幾幀的延遲不太敏感，而像平移這樣的連續手勢則需要以 60 fps 運行。"
      }
    },
    {
      "segment_id": "83bf44f4",
      "source_content": "`Animated` is designed to be fully serializable so that animations can be run in a high performance way, independent of the normal JavaScript event loop. This does influence the API, so keep that in mind when it seems a little trickier to do something compared to a fully synchronous system. Check out `Animated.Value.addListener` as a way to work around some of these limitations, but use it sparingly since it might have performance implications in the future.",
      "source_content_hash": "21f158e0de2bd24492c089fcb33a12626a6db76257bfc57d151825c6d5ab7270",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "`Animated` 的設計是完全可序列化的，以便動畫可以以高性能的方式運行，獨立於正常的 JavaScript 事件循環。這確實會影響 API，所以當你發現某些操作比完全同步的系統更棘手時，請記住這一點。可以查閱 `Animated.Value.addListener` 作為解決這些限制的一種方法，但請謹慎使用，因為它可能會在未來影響性能。"
      }
    },
    {
      "segment_id": "b03413f8",
      "source_content": "### Using the native driver",
      "source_content_hash": "5d8075c6531f059e469ed970a361af8eebaa94518f8a4244ab19f1de3d5bc989",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 使用原生驅動"
      }
    },
    {
      "segment_id": "bca12b91",
      "source_content": "The `Animated` API is designed to be serializable. By using the [native driver](/blog/2017/02/14/using-native-driver-for-animated), we send everything about the animation to native before starting the animation, allowing native code to perform the animation on the UI thread without having to go through the bridge on every frame. Once the animation has started, the JS thread can be blocked without affecting the animation.",
      "source_content_hash": "3b8b3719377eec05c3158441d6d8158c9f1861d2c1bf8cdfc271934735c68e7e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "The `Animated` API is designed to be serializable. By using the [native driver](/blog/2017/02/14/using-native-driver-for-animated), we send everything about the animation to native before starting the animation, allowing native code to perform the animation on the UI thread without having to go through the bridge on every frame. Once the animation has started, the JS thread can be blocked without affecting the animation."
      }
    },
    {
      "segment_id": "f4f6cbea",
      "source_content": "Using the native driver for normal animations is straightforward. You can add `useNativeDriver: true` to the animation config when starting it.",
      "source_content_hash": "9eed002ac8efb91a3c9fd25ba84159181d79a08d37096e8c4c932a3652bd05f2",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "為普通動畫使用原生驅動很簡單。你可以在啟動動畫時在動畫配置中添加 `useNativeDriver: true`。"
      }
    },
    {
      "segment_id": "fe61d237",
      "source_content": "```jsx\nAnimated.timing(this.state.animatedValue, {\n  toValue: 1,\n  duration: 500,\n  useNativeDriver: true, // <-- Add this\n}).start();\n```",
      "source_content_hash": "f17df3a712e375edf94a8cb137294040001bcd0238b0c6345ee26186bce246d5",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_fe61d237"
      }
    },
    {
      "segment_id": "4b874e17",
      "source_content": "Animated values are only compatible with one driver so if you use native driver when starting an animation on a value, make sure every animation on that value also uses the native driver.",
      "source_content_hash": "4ac29f7a23b7e78f512afb0881ead998ddc0a12871777447c2fa0e7000a3b827",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "動畫值僅與一個驅動程序兼容，因此如果你在啟動某個值的動畫時使用了原生驅動，請確保該值的所有動畫也都使用原生驅動。"
      }
    },
    {
      "segment_id": "c2d52844",
      "source_content": "The native driver also works with `Animated.event`. This is especially useful for animations that follow the scroll position as without the native driver, the animation will always run a frame behind the gesture due to the async nature of React Native.",
      "source_content_hash": "edaa24e1de700f24b5f9c4417b8de694edaa914e2e89d5c8825a87b70d4e5f1f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "原生驅動也可以與 `Animated.event` 一起使用。這對於跟隨滾動位置的動畫特別有用，因為如果沒有原生驅動，由於 React Native 的異步特性，動畫總是會比手勢慢一幀。"
      }
    },
    {
      "segment_id": "d9b6bd93",
      "source_content": "```jsx\n<Animated.ScrollView // <-- Use the Animated ScrollView wrapper\n  scrollEventThrottle={1} // <-- Use 1 here to make sure no events are ever missed\n  onScroll={Animated.event(\n    [\n      {\n        nativeEvent: {\n          contentOffset: {y: this.state.animatedValue},\n        },\n      },\n    ],\n    {useNativeDriver: true}, // <-- Add this\n  )}>\n  {content}\n</Animated.ScrollView>\n```",
      "source_content_hash": "239e28f4c21188f2fe5e9d81e040afc831f04cd9ae03e3df0d65829f2cea224d",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_d9b6bd93"
      }
    },
    {
      "segment_id": "ec74b948",
      "source_content": "You can see the native driver in action by running the [RNTester app](https://github.com/facebook/react-native/blob/0.70-stable/packages/rn-tester/), then loading the Native Animated Example. You can also take a look at the [source code](https://github.com/facebook/react-native/blob/0.70-stable/packages/rn-tester/js/examples/NativeAnimation/NativeAnimationsExample.js) to learn how these examples were produced.",
      "source_content_hash": "d192e5533cffc5ed5f6d57b43aab3ddb3806d9cde217743416e805a703945749",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "你可以通過運行 [RNTester 應用](https://github.com/facebook/react-native/blob/0.70-stable/packages/rn-tester/)，然後加載原生動畫範例來查看原生驅動的實際效果。你也可以查看[源代碼](https://github.com/facebook/react-native/blob/0.70-stable/packages/rn-tester/js/examples/NativeAnimation/NativeAnimationsExample.js)來了解這些範例是如何製作的。"
      }
    },
    {
      "segment_id": "06a92ef6",
      "source_content": "#### Caveats",
      "source_content_hash": "7a82080cc386b501d60997b1a54b272638401400c5db6c247ebd1bb72f4312f1",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "#### 注意事項"
      }
    },
    {
      "segment_id": "3026c350",
      "source_content": "Not everything you can do with `Animated` is currently supported by the native driver. The main limitation is that you can only animate non-layout properties: things like `transform` and `opacity` will work, but Flexbox and position properties will not. When using `Animated.event`, it will only work with direct events and not bubbling events. This means it does not work with `PanResponder` but does work with things like `ScrollView#onScroll`.",
      "source_content_hash": "1f345cad974fa315d271b0e6756fee9319e6ee0f8b5f4961c31739124ce61f27",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "並非所有你可以用 `Animated` 做的事情目前都受到原生驅動的支持。主要的限制是你只能動畫非佈局屬性：像 `transform` 和 `opacity` 這樣的屬性可以工作，但 Flexbox 和位置屬性則不行。當使用 `Animated.event` 時，它僅適用於直接事件而不適用於冒泡事件。這意味著它不適用於 `PanResponder`，但適用於像 `ScrollView#onScroll` 這樣的東西。"
      }
    },
    {
      "segment_id": "96a1df63",
      "source_content": "When an animation is running, it can prevent `VirtualizedList` components from rendering more rows. If you need to run a long or looping animation while the user is scrolling through a list, you can use `isInteraction: false` in your animation's config to prevent this issue.",
      "source_content_hash": "f180651358c9d816d2ea70e56fcd3ce5476e4c62b32440d22fed975efabc60fa",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "當動畫正在執行時，可能會阻止 `VirtualizedList` 元件渲染更多列。如果需要在用戶滾動列表時執行長時間或循環動畫，可以在動畫配置中使用 `isInteraction: false` 來避免此問題。"
      }
    },
    {
      "segment_id": "4d4c89ad",
      "source_content": "### Bear in mind",
      "source_content_hash": "30f979f331246d50759d0ec5acf92606b58689ab4427b940e10d1c74f6969c96",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 注意事項"
      }
    },
    {
      "segment_id": "8beee012",
      "source_content": "While using transform styles such as `rotateY`, `rotateX`, and others ensure the transform style `perspective` is in place. At this time some animations may not render on Android without it. Example below.",
      "source_content_hash": "e158b29419263c7c7de72ee456829824aa810436a987df456036144457b5eaeb",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "使用如 `rotateY`、`rotateX` 等變形樣式時，請確保同時設置 `perspective` 變形樣式。目前某些動畫若缺少此設定，在 Android 上可能無法正常渲染。範例如下。"
      }
    },
    {
      "segment_id": "3ac736c9",
      "source_content": "```jsx\n<Animated.View\n  style={{\n    transform: [\n      {scale: this.state.scale},\n      {rotateY: this.state.rotateY},\n      {perspective: 1000}, // without this line this Animation will not render on Android while working fine on iOS\n    ],\n  }}\n/>\n```",
      "source_content_hash": "13ffafaa3f74839b16f9e02b2a8ba116a90a83714512e54b3184a966ac07e887",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_3ac736c9"
      }
    },
    {
      "segment_id": "7d7eca9f",
      "source_content": "### Additional examples",
      "source_content_hash": "79a3e647a99ed9a02790807b3f57bbcc1a817fc1c772331a187d788450f0ae47",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 其他範例"
      }
    },
    {
      "segment_id": "b34be360",
      "source_content": "The RNTester app has various examples of `Animated` in use:",
      "source_content_hash": "9ebf5e036eac3401892c341d015fa9caaa4e9457d0dd4e11a9b8b6365668e498",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "RNTester 應用程式包含多種使用 `Animated` 的範例："
      }
    },
    {
      "segment_id": "ae6130f4",
      "source_content": "- [AnimatedGratuitousApp](https://github.com/facebook/react-native/tree/0.70-stable/packages/rn-tester/js/examples/AnimatedGratuitousApp)\n- [NativeAnimationsExample](https://github.com/facebook/react-native/blob/0.70-stable/packages/rn-tester/js/examples/NativeAnimation/NativeAnimationsExample.js)",
      "source_content_hash": "02fc14d1850d7ba120ce79fc4558b4c2702948f086365fd6edbcedfc842bc39f",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- [AnimatedGratuitousApp](https://github.com/facebook/react-native/tree/0.70-stable/packages/rn-tester/js/examples/AnimatedGratuitousApp)\n- [NativeAnimationsExample](https://github.com/facebook/react-native/blob/0.70-stable/packages/rn-tester/js/examples/NativeAnimation/NativeAnimationsExample.js)"
      }
    },
    {
      "segment_id": "d814a3fc",
      "source_content": "## `LayoutAnimation` API",
      "source_content_hash": "3e0efa926a66096a3474812734145d5e8720a5f98968739839d0d84f6f845374",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## `LayoutAnimation` API"
      }
    },
    {
      "segment_id": "7b2cc559",
      "source_content": "`LayoutAnimation` allows you to globally configure `create` and `update` animations that will be used for all views in the next render/layout cycle. This is useful for doing Flexbox layout updates without bothering to measure or calculate specific properties in order to animate them directly, and is especially useful when layout changes may affect ancestors, for example a \"see more\" expansion that also increases the size of the parent and pushes down the row below which would otherwise require explicit coordination between the components in order to animate them all in sync.",
      "source_content_hash": "9a7119401a573f985aae0c5e536de3471bc8466ad843b6d9c49c09c3f0ef01d7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "`LayoutAnimation` allows you to globally configure `create` and `update` animations that will be used for all views in the next render/layout cycle. This is useful for doing Flexbox layout updates without bothering to measure or calculate specific properties in order to animate them directly, and is especially useful when layout changes may affect ancestors, for example a \"see more\" expansion that also increases the size of the parent and pushes down the row below which would otherwise require explicit coordination between the components in order to animate them all in sync."
      }
    },
    {
      "segment_id": "c3d63f8a",
      "source_content": "Note that although `LayoutAnimation` is very powerful and can be quite useful, it provides much less control than `Animated` and other animation libraries, so you may need to use another approach if you can't get `LayoutAnimation` to do what you want.",
      "source_content_hash": "01e891ae5ff85fec8d61282835db7b025c63ec6da8d6f8b613a0c2555e9c1c24",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "Note that although `LayoutAnimation` is very powerful and can be quite useful, it provides much less control than `Animated` and other animation libraries, so you may need to use another approach if you can't get `LayoutAnimation` to do what you want."
      }
    },
    {
      "segment_id": "e0b67011",
      "source_content": "Note that in order to get this to work on **Android** you need to set the following flags via `UIManager`:",
      "source_content_hash": "3b8fe7a7636d1c93a3d7e2f1520a80cb4404d9b2cc5d2eaee4ff24c3598cde70",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "注意：在 **Android** 上需透過 `UIManager` 設定以下標記才能生效："
      }
    },
    {
      "segment_id": "a5ef3b1b",
      "source_content": "```jsx\nUIManager.setLayoutAnimationEnabledExperimental &&\n  UIManager.setLayoutAnimationEnabledExperimental(true);\n```",
      "source_content_hash": "1ab5b760eefc9a22d1876a147fa2a1bfe96f50e8212a68926003e1b5d51388e6",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_a5ef3b1b"
      }
    },
    {
      "segment_id": "2cac0c6e",
      "source_content": "```SnackPlayer name=LayoutAnimations&supportedPlatforms=ios,android\nimport React from 'react';\nimport {\n  NativeModules,\n  LayoutAnimation,\n  Text,\n  TouchableOpacity,\n  StyleSheet,\n  View,\n} from 'react-native';\n\nconst { UIManager } = NativeModules;\n\nUIManager.setLayoutAnimationEnabledExperimental &&\n  UIManager.setLayoutAnimationEnabledExperimental(true);\n\nexport default class App extends React.Component {\n  state = {\n    w: 100,\n    h: 100,\n  };\n\n  _onPress = () => {\n    // Animate the update\n    LayoutAnimation.spring();\n    this.setState({w: this.state.w + 15, h: this.state.h + 15})\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <View style={[styles.box, {width: this.state.w, height: this.state.h}]} />\n        <TouchableOpacity onPress={this._onPress}>\n          <View style={styles.button}>\n            <Text style={styles.buttonText}>Press me!</Text>\n          </View>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: 200,\n    height: 200,\n    backgroundColor: 'red',\n  },\n  button: {\n    backgroundColor: 'black',\n    paddingHorizontal: 20,\n    paddingVertical: 15,\n    marginTop: 15,\n  },\n  buttonText: {\n    color: '#fff',\n    fontWeight: 'bold',\n  },\n});\n```",
      "source_content_hash": "ba755e38db3b4f171ccee19f8e5133d4341fdddbc1730f6a6348bb509d00ffb9",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_2cac0c6e"
      }
    },
    {
      "segment_id": "09d161c0",
      "source_content": "This example uses a preset value, you can customize the animations as you need, see [LayoutAnimation.js](https://github.com/facebook/react-native/blob/0.70-stable/Libraries/LayoutAnimation/LayoutAnimation.js) for more information.",
      "source_content_hash": "822b28c6923d524493109bfbee9bc2cb15732dee81d5c9c2dde80f8e652b8c33",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此範例使用預設值，您可依需求自訂動畫，詳見 [LayoutAnimation.js](https://github.com/facebook/react-native/blob/0.70-stable/Libraries/LayoutAnimation/LayoutAnimation.js)。"
      }
    },
    {
      "segment_id": "66393409",
      "source_content": "## Additional notes",
      "source_content_hash": "fa28ab0a18a642a6aee73ed8af9d5aab3c210c5ba8d877868bc08b7184e1a7e1",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 補充說明"
      }
    },
    {
      "segment_id": "28151cff",
      "source_content": "### `requestAnimationFrame`",
      "source_content_hash": "a6a8dbed4f3e2f56c3a0cab9d434a31ef2d32cc55bb3a27e1ae48cb03bd9a990",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `requestAnimationFrame`"
      }
    },
    {
      "segment_id": "028310dc",
      "source_content": "`requestAnimationFrame` is a polyfill from the browser that you might be familiar with. It accepts a function as its only argument and calls that function before the next repaint. It is an essential building block for animations that underlies all of the JavaScript-based animation APIs. In general, you shouldn't need to call this yourself - the animation APIs will manage frame updates for you.",
      "source_content_hash": "8e37175544407eed9ae8a776fde6bd4863abc2aa3f070276c05b489349aa7c34",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "`requestAnimationFrame` 是來自瀏覽器的 polyfill，接受函數作為唯一參數，並在下一次重繪前呼叫該函數。它是所有基於 JavaScript 動畫 API 的基礎建構塊。通常不需直接呼叫此方法，動畫 API 會自動管理影格更新。"
      }
    },
    {
      "segment_id": "e7ce595f",
      "source_content": "### `setNativeProps`",
      "source_content_hash": "81447a778d813c0fd445bd2fbf6656a3f63597dc6141224cc168427cf9b0f0dd",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `setNativeProps`"
      }
    },
    {
      "segment_id": "d523ebc0",
      "source_content": "As mentioned [in the Direct Manipulation section](direct-manipulation), `setNativeProps` allows us to modify properties of native-backed components (components that are actually backed by native views, unlike composite components) directly, without having to `setState` and re-render the component hierarchy.",
      "source_content_hash": "7d89176b12db34b2b366ff1bcb834ed9837a14e6475357eb950098a25efee780",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "如[直接操作章節](direct-manipulation)所述，`setNativeProps` 允許直接修改原生元件（實際由原生視圖支持的元件，非複合元件）的屬性，而無需透過 `setState` 重新渲染元件樹。"
      }
    },
    {
      "segment_id": "34d93100",
      "source_content": "We could use this in the Rebound example to update the scale - this might be helpful if the component that we are updating is deeply nested and hasn't been optimized with `shouldComponentUpdate`.",
      "source_content_hash": "cf6411ab39685816571a3eb3961f0df4698c539e385d7352ba8e82301ad6758d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "我們可在 Rebound 範例中使用此方法更新縮放比例——這對於需更新的深層嵌套元件或未經 `shouldComponentUpdate` 優化的情況特別有用。"
      }
    },
    {
      "segment_id": "dd0c7dc2",
      "source_content": "If you find your animations with dropping frames (performing below 60 frames per second), look into using `setNativeProps` or `shouldComponentUpdate` to optimize them. Or you could run the animations on the UI thread rather than the JavaScript thread [with the useNativeDriver option](/blog/2017/02/14/using-native-driver-for-animated). You may also want to defer any computationally intensive work until after animations are complete, using the [InteractionManager](interactionmanager). You can monitor the frame rate by using the In-App Developer Menu \"FPS Monitor\" tool.",
      "source_content_hash": "74d50fa4c018f255341c49b06497b0ab553625705a3e3f807aa62631248de4f7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "若發現動畫出現掉幀（低於每秒 60 幀），可嘗試使用 `setNativeProps` 或 `shouldComponentUpdate` 進行優化，或改用 [useNativeDriver 選項](/blog/2017/02/14/using-native-driver-for-animated) 在 UI 執行緒而非 JavaScript 執行緒執行動畫。也可透過 [InteractionManager](interactionmanager) 延後計算密集型任務至動畫完成後執行。使用開發者選單中的「FPS 監測」工具可監控幀率。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.70/animations.md",
  "last_updated_timestamp": "2025-06-19T15:33:40.512388+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "7fb32730b8e9a90d08ff59bb8ad30fe36be33d6830c0c9abb854db339cc4ba6c"
  }
}