{
  "source_file_path_relative_to_docusaurus_root": "blog/2017-03-13-better-list-views.md",
  "source_file_content_hash": "b46d09e3073b10fb62fd797914b35160f79fc8c8676c0d2aeb6110ee6313a911",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\ntitle: Better List Views in React Native\nauthor: Spencer Ahrens\nauthorTitle: Software Engineer at Facebook\nauthorURL: 'https://github.com/sahrens'\nauthorImageURL: 'https://avatars1.githubusercontent.com/u/1509831'\nauthorTwitter: sahrens2012\ntags: [engineering]\n---",
      "source_content_hash": "1403a6c924a46cc767ead9a8c4d67d165f19ac8b680c67f2a14c127271af9e7c",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "8ac585fb",
      "source_content": "Many of you have started playing with some of our new List components already after our [teaser announcement in the community group](https://www.facebook.com/groups/react.native.community/permalink/921378591331053), but we are officially announcing them today! No more `ListView`s or `DataSource`s, stale rows, ignored bugs, or excessive memory consumption - with the latest React Native March 2017 release candidate (`0.43-rc.1`) you can pick from the new suite of components what best fits your use-case, with great perf and feature sets out of the box:",
      "source_content_hash": "be4773f83c932c785049d6a97b25f3712b55af2d3249b754b82937bf9699935d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "許多開發者已在[社群群組的預告貼文](https://www.facebook.com/groups/react.native.community/permalink/921378591331053)後開始試用我們的新列表元件，而今天我們正式宣布它們的到來！不再需要`ListView`或`DataSource`，不再有陳舊的行、被忽略的錯誤或過高的記憶體消耗——透過最新的React Native 2017年3月候選版本（`0.43-rc.1`），您可以從這套新元件中選擇最適合您需求的組件，它們具備出色的性能和豐富的功能："
      }
    },
    {
      "segment_id": "ba4f48ff",
      "source_content": "### [`<FlatList>`](/docs/flatlist)",
      "source_content_hash": "dab9f6f5cd14fe346b684e839c82f81abb2b89d407eb5b56edc74b1ae61ff00d",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### [`<FlatList>`](/docs/flatlist)"
      }
    },
    {
      "segment_id": "cf898102",
      "source_content": "This is the workhorse component for simple, performant lists. Provide an array of data and a `renderItem` function and you're good to go:",
      "source_content_hash": "23c6e9f0b2d590fc29db0dbe3b1640ee0f2dcebc731c8acf62ef672073e0622f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "這是處理簡單高效列表的主力元件。只需提供一個數據陣列和一個`renderItem`函數即可開始使用："
      }
    },
    {
      "segment_id": "93be3c14",
      "source_content": "```\n<FlatList\n  data={[{title: 'Title Text', key: 'item1'}, ...]}\n  renderItem={({item}) => <ListItem title={item.title} />}\n/>\n```",
      "source_content_hash": "e2da1d4ebd779ba5c780400e1f8e7667b2baf81de0f83c9affe5bd359b1852f8",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_93be3c14"
      }
    },
    {
      "segment_id": "95b38f97",
      "source_content": "### [`<SectionList>`](/docs/sectionlist)",
      "source_content_hash": "8edd101aea698ed52d39bfd14af58d133004223b1697285a9243a5677280e8ec",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### [`<SectionList>`](/docs/sectionlist)"
      }
    },
    {
      "segment_id": "ccc88b4c",
      "source_content": "If you want to render a set of data broken into logical sections, maybe with section headers (e.g. in an alphabetical address book), and potentially with heterogeneous data and rendering (such as a profile view with some buttons followed by a composer, then a photo grid, then a friend grid, and finally a list of stories), this is the way to go.",
      "source_content_hash": "2182c846bedea4cb954b9c212ebaeab777c58c8311a7a073b2aa293dccb7abcf",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "如果您需要渲染分為邏輯區段的數據集（例如按字母排序的通訊錄），可能包含區段標頭，並且數據類型和渲染方式可能不同（例如個人資料視圖，包含一些按鈕、一個編輯器、一個照片網格、一個朋友網格，最後是一個故事列表），那麼這個元件就是您的選擇。"
      }
    },
    {
      "segment_id": "15a1fd96",
      "source_content": "```\n<SectionList\n  renderItem={({item}) => <ListItem title={item.title} />}\n  renderSectionHeader={({section}) => <H1 title={section.key} />}\n  sections={[ // homogeneous rendering between sections\n    {data: [...], key: ...},\n    {data: [...], key: ...},\n    {data: [...], key: ...},\n  ]}\n/>\n\n<SectionList\n  sections={[ // heterogeneous rendering between sections\n    {data: [...], key: ..., renderItem: ...},\n    {data: [...], key: ..., renderItem: ...},\n    {data: [...], key: ..., renderItem: ...},\n  ]}\n/>\n```",
      "source_content_hash": "b6ab3a656934a7183a287c65d70b17f593bc32e7c1beab76f2d58eaa7f8857c6",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_15a1fd96"
      }
    },
    {
      "segment_id": "c674e260",
      "source_content": "### [`<VirtualizedList>`](/docs/virtualizedlist)",
      "source_content_hash": "203e92f606b9038152b29f426d82b965c9a6908861bf1273e81ed8238862d3b4",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### [`<VirtualizedList>`](/docs/virtualizedlist)"
      }
    },
    {
      "segment_id": "a44047a5",
      "source_content": "The implementation behind the scenes with a more flexible API. Especially handy if your data is not in a plain array (e.g. an immutable list).",
      "source_content_hash": "773017b2b3ccb96a9eaa741ed11ad788427d5aa275269441eafeee712a874dd6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "這是背後實現的底層元件，提供更靈活的API。特別適合數據不是簡單陣列的情況（例如不可變列表）。"
      }
    },
    {
      "segment_id": "cb5b269c",
      "source_content": "## Features",
      "source_content_hash": "9eb55e137a031f4b4d166f425f9b2d9183ca01a0ab9de3d390966dacb1e6a038",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 功能"
      }
    },
    {
      "segment_id": "b36c6338",
      "source_content": "Lists are used in many contexts, so we packed the new components full of features to handle the majority of use cases out of the box:",
      "source_content_hash": "df5c1e1a40763ac7bf14648ae21ad8d9b12cf10c4898d0135c5e5d4ca4683fdb",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "列表在許多情境下使用，因此我們為新元件加入了大量功能，以滿足大多數使用場景的需求："
      }
    },
    {
      "segment_id": "9b797309",
      "source_content": "- Scroll loading (`onEndReached`).\n- Pull to refresh (`onRefresh` / `refreshing`).\n- [Configurable](https://github.com/facebook/react-native/blob/master/Libraries/CustomComponents/Lists/ViewabilityHelper.js) viewability (VPV) callbacks (`onViewableItemsChanged` / `viewabilityConfig`).\n- Horizontal mode (`horizontal`).\n- Intelligent item and section separators.\n- Multi-column support (`numColumns`)\n- `scrollToEnd`, `scrollToIndex`, and `scrollToItem`\n- Better Flow typing.",
      "source_content_hash": "5cefbc46a3ee61072cddadf7b4f94f642c6f782acf37e54a16a048c30e05b5e8",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- Scroll loading (`onEndReached`).\n- Pull to refresh (`onRefresh` / `refreshing`).\n- [Configurable](https://github.com/facebook/react-native/blob/master/Libraries/CustomComponents/Lists/ViewabilityHelper.js) viewability (VPV) callbacks (`onViewableItemsChanged` / `viewabilityConfig`).\n- Horizontal mode (`horizontal`).\n- Intelligent item and section separators.\n- Multi-column support (`numColumns`)\n- `scrollToEnd`, `scrollToIndex`, and `scrollToItem`\n- Better Flow typing."
      }
    },
    {
      "segment_id": "126950d7",
      "source_content": "### Some Caveats",
      "source_content_hash": "20f4ae24a5c7e726c9c08711ab41d8bceff706d5154d4117901a96c0e516547f",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 注意事項"
      }
    },
    {
      "segment_id": "180e9ce9",
      "source_content": "- The internal state of item subtrees is not preserved when content scrolls out of the render window. Make sure all your data is captured in the item data or external stores like Flux, Redux, or Relay.\n\n- These components are based on `PureComponent` which means that they will not re-render if `props` remains shallow-equal. Make sure that everything your `renderItem` function depends on directly is passed as a prop that is not `===` after updates, otherwise your UI may not update on changes. This includes the `data` prop and parent component state. For example:\n\n  ```jsx\n  <FlatList\n    data={this.state.data}\n    renderItem={({item}) => (\n      <MyItem\n        item={item}\n        onPress={() =>\n          this.setState(oldState => ({\n            selected: {\n              // New instance breaks `===`\n              ...oldState.selected, // copy old data\n              [item.key]: !oldState.selected[item.key], // toggle\n            },\n          }))\n        }\n        selected={\n          !!this.state.selected[item.key] // renderItem depends on state\n        }\n      />\n    )}\n    selected={\n      // Can be any prop that doesn't collide with existing props\n      this.state.selected // A change to selected should re-render FlatList\n    }\n  />\n  ```\n\n- In order to constrain memory and enable smooth scrolling, content is rendered asynchronously offscreen. This means it's possible to scroll faster than the fill rate and momentarily see blank content. This is a tradeoff that can be adjusted to suit the needs of each application, and we are working on improving it behind the scenes.\n\n- By default, these new lists look for a `key` prop on each item and use that for the React key. Alternatively, you can provide a custom `keyExtractor` prop.",
      "source_content_hash": "21cdab6f12f30ea9f01ae6116bd45c3c0a0cbf6074454b0e6103ec71c92453c6",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- The internal state of item subtrees is not preserved when content scrolls out of the render window. Make sure all your data is captured in the item data or external stores like Flux, Redux, or Relay.\n\n- These components are based on `PureComponent` which means that they will not re-render if `props` remains shallow-equal. Make sure that everything your `renderItem` function depends on directly is passed as a prop that is not `===` after updates, otherwise your UI may not update on changes. This includes the `data` prop and parent component state. For example:\n\n  ```jsx\n  <FlatList\n    data={this.state.data}\n    renderItem={({item}) => (\n      <MyItem\n        item={item}\n        onPress={() =>\n          this.setState(oldState => ({\n            selected: {\n              // New instance breaks `===`\n              ...oldState.selected, // copy old data\n              [item.key]: !oldState.selected[item.key], // toggle\n            },\n          }))\n        }\n        selected={\n          !!this.state.selected[item.key] // renderItem depends on state\n        }\n      />\n    )}\n    selected={\n      // Can be any prop that doesn't collide with existing props\n      this.state.selected // A change to selected should re-render FlatList\n    }\n  />\n  ```\n\n- In order to constrain memory and enable smooth scrolling, content is rendered asynchronously offscreen. This means it's possible to scroll faster than the fill rate and momentarily see blank content. This is a tradeoff that can be adjusted to suit the needs of each application, and we are working on improving it behind the scenes.\n\n- By default, these new lists look for a `key` prop on each item and use that for the React key. Alternatively, you can provide a custom `keyExtractor` prop."
      }
    },
    {
      "segment_id": "a138e327",
      "source_content": "## Performance",
      "source_content_hash": "b61a2b644e50e77bcf62c9857199cd063dccceb2c056007c9370ea1a93289c2b",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 性能"
      }
    },
    {
      "segment_id": "a2c0166e",
      "source_content": "Besides simplifying the API, the new list components also have significant performance enhancements, the main one being nearly constant memory usage for any number of rows. This is done by 'virtualizing' elements that are outside of the render window by completely unmounting them from the component hierarchy and reclaiming the JS memory from the react components, along with the native memory from the shadow tree and the UI views. This has a catch which is that internal component state will not be preserved, so **make sure you track any important state outside of the components themselves, e.g. in Relay or Redux or Flux store.**",
      "source_content_hash": "ca14d5c0cc12a138c88e0906597496b6c4948154a40318dc839e4820f8ddc234",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "Besides simplifying the API, the new list components also have significant performance enhancements, the main one being nearly constant memory usage for any number of rows. This is done by 'virtualizing' elements that are outside of the render window by completely unmounting them from the component hierarchy and reclaiming the JS memory from the react components, along with the native memory from the shadow tree and the UI views. This has a catch which is that internal component state will not be preserved, so **make sure you track any important state outside of the components themselves, e.g. in Relay or Redux or Flux store.**"
      }
    },
    {
      "segment_id": "c1eaf30b",
      "source_content": "Limiting the render window also reduces the amount of work that needs to be done by React and the native platform, e.g from view traversals. Even if you are rendering the last of a million elements, with these new lists there is no need to iterate through all those elements in order to render. You can even jump to the middle with `scrollToIndex` without excessive rendering.",
      "source_content_hash": "f4cedf6820c4894f2e11c71fdb5ae594ffb8ae06a7ba85cd731ad12f539c5463",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "限制渲染視窗也減少了React和原生平台需要處理的工作量，例如視圖遍歷。即使您正在渲染百萬元素中的最後一個，使用這些新列表也無需迭代所有元素即可完成渲染。您甚至可以直接跳轉到中間位置（透過`scrollToIndex`）而無需過度渲染。"
      }
    },
    {
      "segment_id": "f0984c2a",
      "source_content": "We've also made some improvements with scheduling which should help with application responsiveness. Items at the edge of the render window are rendered infrequently and at a lower priority after any active gestures or animations or other interactions have completed.",
      "source_content_hash": "ff14c91e46897bb1fbe1fe4979a9a7978e9c4ba05010869b1be1c3b06b2ceaa5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "我們還對調度機制進行了改進，這有助於提升應用程式的響應速度。渲染視窗邊緣的項目會以較低優先級進行不頻繁的渲染，且會在當前手勢操作、動畫或其他互動完成後才執行。"
      }
    },
    {
      "segment_id": "56bc971f",
      "source_content": "## Advanced Usage",
      "source_content_hash": "deafa572541029afe69158a3c361b94b141083fa1daef31cfe3479f241387de6",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 進階用法"
      }
    },
    {
      "segment_id": "0801d969",
      "source_content": "Unlike `ListView`, all items in the render window are re-rendered any time any props change. Often this is fine because the windowing reduces the number of items to a constant number, but if your items are on the complex side, you should make sure to follow React best practices for performance and use `React.PureComponent` and/or `shouldComponentUpdate` as appropriate within your components to limit re-renders of the recursive subtree.",
      "source_content_hash": "5e75445b3475d7cd8b64c9491e2785e2d0173275982441135fa8a9f0698f9b04",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "與`ListView`不同，渲染視窗內的所有項目會在props發生任何變化時重新渲染。由於視窗化技術已將項目數量限制為固定值，這通常不會造成問題。但如果您的項目結構較複雜，應遵循React效能最佳實踐，在元件內部適當使用`React.PureComponent`和/或`shouldComponentUpdate`來限制遞迴子樹的重新渲染。"
      }
    },
    {
      "segment_id": "3c19e221",
      "source_content": "If you can calculate the height of your rows without rendering them, you can improve the user experience by providing the `getItemLayout` prop. This makes it much smoother to scroll to specific items with e.g. `scrollToIndex`, and will improve the scroll indicator UI because the height of the content can be determined without rendering it.",
      "source_content_hash": "cd1e04929e1c9073ce1acdb6471aae40d750386bf986c0b6204fe735f5b34b9e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "若能在不實際渲染的情況下計算出行高，可通過提供`getItemLayout`屬性來改善使用者體驗。這使得滾動到特定項目（例如使用`scrollToIndex`）更加流暢，同時由於無需渲染即可確定內容高度，滾動指示器UI也會得到改善。"
      }
    },
    {
      "segment_id": "d21af28f",
      "source_content": "If you have an alternative data type, like an immutable list, `<VirtualizedList>` is the way to go. It takes a `getItem` prop that lets you return the item data for any given index and has looser flow typing.",
      "source_content_hash": "4857e57e86be8417999c80ee0b31e01b10d5cadcf5da408362bcf189bff54ba6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "如果您使用替代數據類型（如不可變列表），`<VirtualizedList>`是最佳選擇。它接受`getItem`屬性，可返回任意索引對應的項目數據，且具有更寬鬆的Flow類型檢查。"
      }
    },
    {
      "segment_id": "44aaa880",
      "source_content": "There are also a bunch of parameters you can tweak if you have an unusual use case. For example, you can use `windowSize` to trade off memory usage vs. user experience, `maxToRenderPerBatch` to adjust fill rate vs. responsiveness, `onEndReachedThreshold` to control when scroll loading happens, and more.",
      "source_content_hash": "d38ba5e92635ca6f24f2186545dea4f69d6e3a1fa86e73c3ea48359d1e71ff6a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "對於特殊用例，還有一系列參數可供調整。例如：使用`windowSize`權衡記憶體用量與使用者體驗、透過`maxToRenderPerBatch`調整填充率與響應速度、用`onEndReachedThreshold`控制滾動載入觸發時機等。"
      }
    },
    {
      "segment_id": "638efb88",
      "source_content": "## Future Work",
      "source_content_hash": "76b3a397ba3d8b21743f93f2c78b49154a0c675015ad47b1d1010caf7450bc92",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 未來工作"
      }
    },
    {
      "segment_id": "10e4f9ca",
      "source_content": "- Migration of existing surfaces (ultimately deprecation of `ListView`).\n- More features as we see/hear the need (let us know!).\n- Sticky section header support.\n- More performance optimizations.\n- Support functional item components with state.",
      "source_content_hash": "b112505e8a6585924b830e01fe95f0bc47cb1366d61e6eef8d662e19c1ad2e20",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- 現有介面的遷移（最終棄用`ListView`）\n- 根據需求新增更多功能（歡迎反饋！）\n- 支援黏性區段標頭\n- 更多效能優化\n- 支援帶狀態的函數式項目元件"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-blog/2017-03-13-better-list-views.md",
  "last_updated_timestamp": "2025-06-19T15:33:39.522969+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "b46d09e3073b10fb62fd797914b35160f79fc8c8676c0d2aeb6110ee6313a911"
  }
}