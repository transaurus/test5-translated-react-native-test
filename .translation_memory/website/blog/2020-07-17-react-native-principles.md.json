{
  "source_file_path_relative_to_docusaurus_root": "blog/2020-07-17-react-native-principles.md",
  "source_file_content_hash": "88b5cacf487232205a490ca1ad367ddde74ed3a369a5f3053482790becfdaef3",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\ntitle: React Native Team Principles\nauthors: [Eli White]\ntags: [announcement]\n---",
      "source_content_hash": "e939db88a0d34a883a44c7f2fd0a80320a1f8e0270fcdec4d8f9f9b5dccb663a",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "6ef78e84",
      "source_content": "The React Native team at Facebook is guided by principles that help determine how we prioritize our work on React Native. These principles represent our team specifically and do not necessarily represent every stakeholder in the React Native community. We are sharing these principles here to be more transparent about what drives us, how we make decisions, and how we focus our efforts.",
      "source_content_hash": "38b7d5b84232f48eadf8e37054cd5b4ad03cd5565aa20ac78d71185b923ba9c3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "Facebook 的 React Native 團隊遵循一系列原則，這些原則幫助我們決定如何優先處理 React Native 的工作。這些原則代表我們團隊的特定觀點，並不一定代表 React Native 社群中的每一位利益相關者。我們在此分享這些原則，是為了更透明地展示我們的驅動力、決策方式以及我們如何集中精力。"
      }
    },
    {
      "segment_id": "d912d376",
      "source_content": "## **Native Experience**",
      "source_content_hash": "691cdc7dbd79e5362dacd70735d1247a2d92d2715a7149809f08dce782a4e2f1",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## **原生體驗**"
      }
    },
    {
      "segment_id": "8ac585fb",
      "source_content": "Our top priority for React Native is to **match the expectations people have for each platform**. This is why React Native renders to platform primitives. We value native look-and-feel over cross-platform consistency.",
      "source_content_hash": "838cd55e474f1cd2b891b975e325b92465cd634ff2bc2e3f1d5efa8beacdceb4",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "我們對 React Native 的首要任務是**滿足人們對每個平台的期望**。這就是為什麼 React Native 會渲染到平台的原生元件。我們重視原生外觀和感覺，勝過跨平台的一致性。"
      }
    },
    {
      "segment_id": "180bddb1",
      "source_content": "For example, the TextInput in React Native renders to a UITextField on iOS. This ensures that integration with password managers and keyboard controls work out of the box. By using platform primitives, React Native apps are also able to stay up-to-date with design and behavior changes from new releases of Android and iOS.",
      "source_content_hash": "0a9de189418c9fd066592c01e050fea4e6b14239ffec75f88f56756ad2c80cae",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "例如，React Native 中的 TextInput 在 iOS 上會渲染為 UITextField。這確保了與密碼管理器和鍵盤控制的整合能夠開箱即用。通過使用平台原生元件，React Native 應用也能夠跟上 Android 和 iOS 新版本的設計和行為變化。"
      }
    },
    {
      "segment_id": "cf898102",
      "source_content": "In order to match the look-and-feel of native apps, we must also match their performance. This is where we focus our most ambitious efforts. For example, Facebook created Hermes, [a new JavaScript Engine built from scratch for React Native on Android](https://facebook.github.io/react-native/blog/2019/07/17/hermes). Hermes significantly improves the start time of React Native apps. We are also working on major architectural changes that optimize the threading model and make React Native easier to interoperate with native code.",
      "source_content_hash": "b895dabc9f9adf252a47683658fb586294d613975f348aa9fe5eccbde56fbf51",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "為了匹配原生應用的外觀和感覺，我們還必須匹配其性能。這是我們投入最多雄心的領域。例如，Facebook 創建了 Hermes，[一個專為 Android 上的 React Native 從頭構建的 JavaScript 引擎](https://facebook.github.io/react-native/blog/2019/07/17/hermes)。Hermes 顯著提高了 React Native 應用的啟動時間。我們還在進行重大的架構變更，以優化線程模型並使 React Native 更容易與原生代碼互操作。"
      }
    },
    {
      "segment_id": "3daf1b88",
      "source_content": "## Massive Scale",
      "source_content_hash": "547f8542c0711eee50e85951f654aabb3b82cf4f943d07379f2e19ed48590089",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 大規模應用"
      }
    },
    {
      "segment_id": "f6168993",
      "source_content": "Hundreds of screens in the Facebook app are implemented with React Native. The Facebook app is used by billions of people on a huge range of devices. **This is why** **we invest in the most challenging problems at scale.**",
      "source_content_hash": "54962a3d1bcb95927697975a62ed60250322be4eed0058485d639c06215b8ddb",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "Hundreds of screens in the Facebook app are implemented with React Native. The Facebook app is used by billions of people on a huge range of devices. **This is why** **we invest in the most challenging problems at scale.**"
      }
    },
    {
      "segment_id": "f5f6d2ce",
      "source_content": "Deploying React Native in our apps lets us identify problems that we wouldn’t see at a smaller scale. For example, Facebook focuses on improving performance across a broad spectrum of devices from the newest iPhone to many older generations of Android devices. This focus informs our architecture projects such as Hermes, Fabric, and TurboModules.",
      "source_content_hash": "5786534c30dd1750c8348bf031e6918e9189f4d41853d731428f638ed7c302bd",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在我們的應用中部署 React Native 讓我們能夠發現小規模應用中看不到的問題。例如，Facebook 專注於提高從最新 iPhone 到許多舊款 Android 設備的性能。這一重點指導了我們的架構項目，如 Hermes、Fabric 和 TurboModules。"
      }
    },
    {
      "segment_id": "2fdadb08",
      "source_content": "We have proven that React Native can scale to massive organizations too. When hundreds of developers are working on the same app, gradual adoption is a must. This is why we made sure that React Native can be adopted one screen at a time. Soon, we will be taking this one step further and enable migrating individual native views of an existing native screen to React Native.",
      "source_content_hash": "c799fb4d0edc616a2b8e37612e5e5fc3ca771b1987613ffef157fe95e60f782f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "我們已經證明 React Native 也可以擴展到大型組織。當數百名開發人員在同一個應用上工作時，逐步採用是必須的。這就是為什麼我們確保 React Native 可以一個屏幕一個屏幕地採用。很快，我們將更進一步，允許將現有原生屏幕的單個原生視圖遷移到 React Native。"
      }
    },
    {
      "segment_id": "f2c2bdd0",
      "source_content": "A focus on massive scale means there are many things our team isn’t currently working on. For example, our team doesn’t drive the adoption of React Native in the industry. We also do not actively build solutions for problems that we don’t see at scale. We are proud that we have [many partners and core contributors](https://github.com/facebook/react-native/blob/master/ECOSYSTEM.md) that are able to focus on those important areas for the community.",
      "source_content_hash": "7a9e24e1ecd4155f87d16acc739c86a1f66ed5fd8ab253575c2a05d068a5b0dd",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "對大規模應用的關注意味著有許多事情我們的團隊目前沒有在進行。例如，我們的團隊不推動 React Native 在行業中的採用。我們也不積極構建解決方案來解決我們在大規模應用中沒有看到的問題。我們為擁有[許多合作夥伴和核心貢獻者](https://github.com/facebook/react-native/blob/master/ECOSYSTEM.md)而感到自豪，他們能夠專注於社群中這些重要的領域。"
      }
    },
    {
      "segment_id": "fa430ad4",
      "source_content": "## Developer Velocity",
      "source_content_hash": "3a26e0e44b4fbb177a8d4ae67d80d27b052931d50302f4012b5a1353a50a9ca7",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 開發速度"
      }
    },
    {
      "segment_id": "4b1d2d7d",
      "source_content": "Great user experiences are created iteratively. **It should only take a few seconds to seeing the result of code changes** in a running app. React Native's architecture enables it to provide near-instant feedback during development.",
      "source_content_hash": "767fe34661b774f30bf10d8ba23d63a0ffdf084da3d84122a13815eb55a2f397",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "優秀的用戶體驗是通過迭代創造的。**從代碼更改到在運行中的應用中看到結果應該只需要幾秒鐘**。React Native 的架構使其能夠在開發過程中提供近乎即時的反饋。"
      }
    },
    {
      "segment_id": "dfe931a2",
      "source_content": "We often hear from teams that adopting React Native significantly improved their development velocity. These teams find that the instant feedback during development makes it much easier to try different ideas and add extra polish when they don’t have to interrupt their coding session for every little change. When we make changes to React Native, we make sure to preserve this quality of the developer experience.",
      "source_content_hash": "8a31e54db2169fba78c4be5015b8f7099ad70c46765117dd1f1faf9cf8e2fb1b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "我們經常聽到團隊表示，採用 React Native 顯著提高了他們的開發速度。這些團隊發現，開發過程中的即時反饋使得嘗試不同想法和添加額外潤色變得更加容易，因為他們不必為每一個小更改中斷編碼會話。當我們對 React Native 進行更改時，我們確保保留這種開發體驗的品質。"
      }
    },
    {
      "segment_id": "4daf5cdd",
      "source_content": "Instant feedback is not the only way that React Native improves developer velocity. Teams can leverage the fast-growing ecosystem of high quality open source packages. Teams can also share business logic between Android, iOS, and the web. This helps them ship updates faster and reduce organizational silos between platform teams.",
      "source_content_hash": "b0a01f190c7635501d089a4078298428c8d6e1ffb1bf6a28d3e9356e9b2885c4",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "即時反饋並不是 React Native 提高開發速度的唯一方式。團隊可以利用快速增長的高質量開源套件生態系統。團隊還可以在 Android、iOS 和網頁之間共享業務邏輯。這幫助他們更快地發布更新並減少平台團隊之間的組織孤島。"
      }
    },
    {
      "segment_id": "f422383e",
      "source_content": "## Every Platform",
      "source_content_hash": "312140f9cf73e1bec94d560eec9daecb03a20f4aa6d88f880a973a1f659ee789",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 所有平台"
      }
    },
    {
      "segment_id": "97ae4a01",
      "source_content": "When we introduced React Native in 2014, we presented it with our motto “Learn once, write anywhere” — and we mean _anywhere_. **Developers should be able to reach as many people as possible without being limited by device model or operating system.**",
      "source_content_hash": "3cf2e0e3ec43b8292b25c7cfe28b570b012311d294baa579c44f50b128bee235",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "When we introduced React Native in 2014, we presented it with our motto “Learn once, write anywhere” — and we mean _anywhere_. **Developers should be able to reach as many people as possible without being limited by device model or operating system.**"
      }
    },
    {
      "segment_id": "c3a738de",
      "source_content": "React Native targets very different platforms including mobile, desktop, web, TV, VR, game consoles, and more. We want to enable rich experiences on each platform instead of requiring developers to build for the lowest common denominator. To accomplish this, we focus on supporting the unique features of each platform. This ranges from varying input mechanisms (e.g. touch, pen, mouse) to fundamentally different consumption experiences like 3D environments in VR.",
      "source_content_hash": "70203c70ad8b556c4abaa52d09038cb2af7f75e40b9335849c7bcf79ab7fbdc5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "React Native 的目標平台非常多元，涵蓋行動裝置、桌面、網頁、電視、虛擬實境、遊戲主機等。我們希望讓開發者能在各平台上打造豐富的體驗，而非被迫為最低共通標準開發。為實現此目標，我們專注於支援每個平台的獨特功能，從不同的輸入機制（如觸控、手寫筆、滑鼠）到根本不同的使用情境（如 VR 中的 3D 環境）。"
      }
    },
    {
      "segment_id": "3cfe6286",
      "source_content": "This principle informed our decision to implement React Native’s new core architecture in cross-platform C++ to promote parity across platforms. We are also refining the public interface targeted at other platform maintainers like Microsoft with Windows and macOS. We strive to enable any platforms to support React Native.",
      "source_content_hash": "d33aa2f9eae07249074fe2c791fa2acf82921f04ed0164b5996f40da1349dc0a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此原則促使我們決定以跨平台的 C++ 實作 React Native 的新核心架構，以促進各平台間的對等性。我們也正針對其他平台維護者（如微軟的 Windows 和 macOS）精進公開介面，致力讓任何平台都能支援 React Native。"
      }
    },
    {
      "segment_id": "06c0f776",
      "source_content": "## Declarative UI",
      "source_content_hash": "b9f3726c22e6dcbb45f9a7cc076b04eb8c114609219de2acc97855bf2148ed55",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 宣告式使用者介面"
      }
    },
    {
      "segment_id": "aa1e7006",
      "source_content": "We don’t believe in deploying the exact same user interface on every platform, we believe in **exposing each platform’s unique capabilities with the same declarative programming model**. Our declarative programming model is React.",
      "source_content_hash": "af10ba6787c520d1abc604bd4279adc2ac22bfa1a1047f44577fac968933a1f1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "我們不主張在所有平台部署完全相同的使用者介面，而是相信**透過相同的宣告式程式模型來展現每個平台的獨特能力**。我們的宣告式程式模型就是 React。"
      }
    },
    {
      "segment_id": "13d9cd70",
      "source_content": "In our experience, the unidirectional data flow popularized by React makes applications easier to understand. We prefer to express a screen as a composition of declarative components rather than imperatively managed views. React’s success on the web and the direction of the new native Android and iOS frameworks show that the industry has also embraced declarative UI.",
      "source_content_hash": "06ec9ea9ad929ef4577a283ca926e8700c242d2d74083628145d2d7eba0c6956",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "根據我們的經驗，React 推廣的單向資料流能讓應用程式更易理解。我們傾向將畫面表達為宣告式元件的組合，而非以命令式管理的視圖。React 在網頁端的成功，以及新版原生 Android 和 iOS 框架的發展方向，都顯示產業同樣擁抱了宣告式 UI。"
      }
    },
    {
      "segment_id": "29528c8d",
      "source_content": "React popularized declarative user interfaces. However, there remain many unsolved problems that React is uniquely positioned to solve. React Native will continue to build on top of the innovations of React and remain at the forefront of the declarative user interface movement.",
      "source_content_hash": "04531fa9f09545e824b03e815b7497e326a59be505ac952fd62166fb9e7800c2",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "React 讓宣告式使用者介面普及化，但仍有許多未解難題是 React 特別適合解決的。React Native 將持續建立在 React 的創新之上，保持站在宣告式使用者介面運動的最前線。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-blog/2020-07-17-react-native-principles.md",
  "last_updated_timestamp": "2025-06-19T15:33:39.528600+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "88b5cacf487232205a490ca1ad367ddde74ed3a369a5f3053482790becfdaef3"
  }
}