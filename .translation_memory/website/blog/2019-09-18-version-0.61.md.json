{
  "source_file_path_relative_to_docusaurus_root": "blog/2019-09-18-version-0.61.md",
  "source_file_content_hash": "e44661e786101cd58c5acb26ac6bfcd00c80102c667688b16eb84e85d821d507",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\ntitle: Announcing React Native 0.61 with Fast Refresh\nauthor: Dan Abramov\nauthorTitle: React Core at Facebook\nauthorURL: 'https://twitter.com/dan_abramov'\nauthorImageURL: 'https://avatars1.githubusercontent.com/u/810438?s=460&v=4'\nauthorTwitter: dan_abramov\ntags: [announcement, release]\n---",
      "source_content_hash": "93b0af45a569e98f4e0c0fa90eb2ccc54ebbd787774c46ed49d9fd6fb7ba93f1",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "8ac585fb",
      "source_content": "We’re excited to announce React Native 0.61, which includes a new reloading experience we’re calling Fast Refresh.",
      "source_content_hash": "a18fe25f3056b4785e49031b665b1a2c3b1a3e23bc5845ece4711245d45d338b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "我們很高興宣布 React Native 0.61 版本，其中包含我們稱為「快速重新整理」(Fast Refresh) 的全新重新載入體驗。"
      }
    },
    {
      "segment_id": "ba4f48ff",
      "source_content": "## Fast Refresh",
      "source_content_hash": "43d305803a9b9ece0c28655a2ad36fc9a4504b272b560d22e6d824160555fc9a",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 快速重新整理"
      }
    },
    {
      "segment_id": "cf898102",
      "source_content": "When we asked the React Native community about [common pain points](https://github.com/react-native-community/discussions-and-proposals/issues/64), one of the top answers was that the “hot reloading” feature was broken. It didn’t work reliably for function components, often failed to update the screen, and wasn’t resilient to typos and mistakes. We heard that most people turned it off because it was too unreliable.",
      "source_content_hash": "b345da1eedec7cc9bc1514c40c6e414404403b845fd05fe7d0f66724aae2b7a3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "當我們詢問 React Native 社群關於[常見痛點](https://github.com/react-native-community/discussions-and-proposals/issues/64)時，其中一個最常見的回饋是「熱重載」(hot reloading) 功能無法正常運作。它在函式元件上不可靠、經常無法更新畫面，且無法抵禦拼寫錯誤和其他錯誤。我們得知大多數人因為其不可靠性而關閉了此功能。"
      }
    },
    {
      "segment_id": "42ad8e83",
      "source_content": "In React Native 0.61, **we’re unifying the existing “live reloading” (reload on save) and “hot reloading” features into a single new feature called “Fast Refresh”**. Fast Refresh was implemented from scratch with the following principles:",
      "source_content_hash": "9f5685fce905e27129b61784f5eee28a7624ddcbc1ae83ebe5edfef20f16d67f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在 React Native 0.61 中，**我們將現有的「即時重新載入」(live reloading，儲存時重新載入) 和「熱重載」功能整合為一個新功能，稱為「快速重新整理」**。快速重新整理是從頭開始實作的，遵循以下原則："
      }
    },
    {
      "segment_id": "034de896",
      "source_content": "- Fast Refresh **fully supports modern React**, including function components and Hooks.\n- Fast Refresh **gracefully recovers after typos** and other mistakes, and falls back to a full reload when needed.\n- Fast Refresh **doesn’t perform invasive code transformations** so it’s reliable enough to be on by default.",
      "source_content_hash": "132bd326ceab8c033e50611da91a8d5e17fdb96ecbc1b30294f383c6c4e992e9",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- 快速重新整理**完整支援現代 React**，包括函式元件和 Hooks。\n- 快速重新整理**能優雅地從拼寫錯誤和其他錯誤中恢復**，並在必要時回退到完整重新載入。\n- 快速重新整理**不會執行侵入性的程式碼轉換**，因此足夠可靠，預設為開啟狀態。"
      }
    },
    {
      "segment_id": "2fdadb08",
      "source_content": "To see Fast Refresh in action, check out this video:",
      "source_content_hash": "14b9b8621d9602121ef7401932bbf88271df854d3b6bb586187ee7d85ecec340",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "要查看快速重新整理的實際效果，請觀看以下影片："
      }
    },
    {
      "segment_id": "0dc46dba",
      "source_content": "<p style={{textAlign: 'center'}}>\n  <video width={700} controls=\"controls\" autoPlay>\n    <source type=\"video/mp4\" src=\"https://reactnative.dev/img/homepage/ReactRefresh.mp4\" />\n  </video>\n</p>",
      "source_content_hash": "42d0666ebd20f38baa18eec45612e7b77564e2aaf18b470bcee7fe105acb2c57",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_0dc46dba"
      }
    },
    {
      "segment_id": "dfe931a2",
      "source_content": "Give it a try, and let us know what you think! If you prefer, you can turn it off in the Dev Menu (Cmd+D on iOS, Cmd+M or Ctrl+M on Android). Turning it on and off is instant so you can do it any time.",
      "source_content_hash": "9902d2c87fb52526a1e0817876e086143d352f9da0d2a54d18696c5000a636ee",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "試試看，並告訴我們你的想法！如果你偏好，可以在開發者選單中關閉它（在 iOS 上按 Cmd+D，在 Android 上按 Cmd+M 或 Ctrl+M）。開啟和關閉是即時的，因此你可以隨時操作。"
      }
    },
    {
      "segment_id": "4daf5cdd",
      "source_content": "Here are a few Fast Refresh tips:",
      "source_content_hash": "a9d3ca059005dc3cbf14676751afc7104472386b12120fdef27c64d9fc93ee76",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "以下是幾個快速重新整理的使用技巧："
      }
    },
    {
      "segment_id": "fc8eadc3",
      "source_content": "- Fast Refresh preserves React local state in function components (and Hooks!) by default.\n- If you need to reset the React state on every edit, you can add a special `// @refresh reset` comment to the file with that component.\n- Fast Refresh always remounts class components without preserving state. This ensures it works reliably.\n- We all make mistakes in the code! Fast Refresh automatically retries rendering after you save a file. You don't need to reload the app manually after fixing a syntax or a runtime error.\n- Adding a `console.log` or a `debugger` statement during edits is a neat debugging technique.",
      "source_content_hash": "57b645b3ad138356a942cd3aff28296b0feecfe41317aa41845a98f21572d18e",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- 快速重新整理預設會保留函式元件（和 Hooks！）中的 React 本地狀態。\n- 如果你需要在每次編輯時重置 React 狀態，可以在該元件的檔案中添加一個特殊的 `// @refresh reset` 註解。\n- 快速重新整理總是會重新掛載類別元件，而不保留狀態。這確保了它的可靠性。\n- 我們都會在程式碼中犯錯！快速重新整理會在你儲存檔案後自動嘗試重新渲染。你不需要在修正語法或執行時錯誤後手動重新載入應用程式。\n- 在編輯過程中添加 `console.log` 或 `debugger` 語句是一種不錯的除錯技巧。"
      }
    },
    {
      "segment_id": "3cfe6286",
      "source_content": "Please report any issues with Fast Refresh on GitHub, and we’ll look into them.",
      "source_content_hash": "6d9de115a5a1a8bfe0e4226fe9367d0cb6ca3a4f707967ea33fa0a89fb872537",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "請在 GitHub 上回報任何與快速重新整理相關的問題，我們會進行調查。"
      }
    },
    {
      "segment_id": "06c0f776",
      "source_content": "## Other Improvements",
      "source_content_hash": "6fd1ee4b4a3372eceec25f2d8ef2fe3aa6bbadc2e78fb6e20104b061d6f0b7cf",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 其他改進"
      }
    },
    {
      "segment_id": "4c077b92",
      "source_content": "- **Fixed use_frameworks! CocoaPods support.** In 0.60 we made some updates to integrate CocoaPods by default. Unfortunately, this broke builds using [use_frameworks!](https://guides.cocoapods.org/syntax/podfile.html#use_frameworks_bang). This is [fixed in 0.61](https://github.com/facebook/react-native/pull/25619), making it easier to integrate React Native into your iOS projects that require building with dynamic frameworks.\n- **Add useWindowDimensions Hook.** This new Hook automatically provides and subscribes to dimension updates, and can be used instead of the Dimensions API in most cases.\n- **React was upgraded to 16.9.** This version deprecates old names for the UNSAFE\\_ lifecycle methods, contains improvements to `act`, and more. See the [React 16.9 blog post](https://reactjs.org/blog/2019/08/08/react-v16.9.0.html) for an automated migration script and more information.",
      "source_content_hash": "2247d085b133e4305c4abce53cd17ec8208c45dea410c94eabd56a94943f4679",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- **修復了 use_frameworks! 的 CocoaPods 支援。** 在 0.60 版本中，我們進行了一些更新以預設整合 CocoaPods。不幸的是，這導致使用 [use_frameworks!](https://guides.cocoapods.org/syntax/podfile.html#use_frameworks_bang) 的建置失敗。這個問題[已在 0.61 版本中修復](https://github.com/facebook/react-native/pull/25619)，使得將 React Native 整合到需要動態框架的 iOS 專案中更加容易。\n- **新增 useWindowDimensions Hook。** 這個新的 Hook 會自動提供並訂閱尺寸更新，在大多數情況下可以取代 Dimensions API。\n- **React 升級至 16.9 版本。** 此版本棄用了 UNSAFE\\_ 生命週期方法的舊名稱，並改進了 `act` 等功能。詳情請參閱 [React 16.9 部落格文章](https://reactjs.org/blog/2019/08/08/react-v16.9.0.html)，其中包含自動遷移腳本和更多資訊。"
      }
    },
    {
      "segment_id": "6f930b2f",
      "source_content": "## Breaking Changes",
      "source_content_hash": "6a4297b42b0b29e55855cf0faf314d1530c723b32d0c36f53badc540b403b6b2",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 重大變更"
      }
    },
    {
      "segment_id": "ddd2c7ae",
      "source_content": "- **Remove React .xcodeproj.** In 0.60, we introduced auto-linking support via CocoaPods. We have also integrated CocoaPods into the e2e tests runs, so that from now on, we have a unified standard way of integrating RN into iOS apps. This effectively deprecates the React .xcodeproj support, and the file has been removed starting 0.61. Note: if you use 0.60 auto-linking already, you shouldn't be affected.",
      "source_content_hash": "925db2a3d6c72e9bc71dc5a4c4469ed954ceffc5c6a6e036da8a6614f01944a0",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- **移除 React .xcodeproj。** 在 0.60 版本中，我們透過 CocoaPods 引入了自動連結支援。我們還將 CocoaPods 整合到端對端測試中，從現在開始，我們有了一個統一的標準方法來將 RN 整合到 iOS 應用程式中。這實際上棄用了 React .xcodeproj 的支援，並且從 0.61 版本開始，該檔案已被移除。注意：如果你已經使用 0.60 的自動連結功能，則不會受到影響。"
      }
    },
    {
      "segment_id": "c6cc90a0",
      "source_content": "## Thanks",
      "source_content_hash": "1e57366f4f2b8342ce1186455878164e2c099d41b453de456c1a921520e0df59",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 致謝"
      }
    },
    {
      "segment_id": "d3649a1e",
      "source_content": "Thanks to all of the contributors that helped make 0.61 possible!",
      "source_content_hash": "7b3b37e7f28c7fa906ac8aa1343d8f2f9124ee051dd318341f4b0661a8ad4657",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "感謝所有貢獻者，是你們讓 0.61 版本成為可能！"
      }
    },
    {
      "segment_id": "4d52a261",
      "source_content": "To see all the updates, take a look at the [0.61 changelog](https://github.com/facebook/react-native/blob/main/CHANGELOG.md#v0610).",
      "source_content_hash": "77ac2d300d9483ac185c5f38dd277727da5f097e868ed05109026a51d4e74887",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "若要查看所有更新內容，請參閱 [0.61 版本變更記錄](https://github.com/facebook/react-native/blob/main/CHANGELOG.md#v0610)。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-blog/2019-09-18-version-0.61.md",
  "last_updated_timestamp": "2025-06-19T15:33:15.391479+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "e44661e786101cd58c5acb26ac6bfcd00c80102c667688b16eb84e85d821d507"
  }
}