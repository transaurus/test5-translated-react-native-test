{
  "source_file_path_relative_to_docusaurus_root": "blog/2018-06-14-state-of-react-native-2018.md",
  "source_file_content_hash": "39ca2ed707514dec93eef6d08bc0610b1a60f311b820533ad25c449d82abedac",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\ntitle: State of React Native 2018\nauthor: Sophie Alpert\nauthorTitle: Engineering Manager on React at Facebook\nauthorURL: 'https://github.com/sophiebits'\nauthorImageURL: 'https://avatars2.githubusercontent.com/u/6820?s=460&v=4'\nauthorTwitter: sophiebits\ntags: [engineering]\n---",
      "source_content_hash": "63e4938a7ae1afe87037f6e654a8121c6b1e68de5703d1e5a9339f973394af2a",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "8ac585fb",
      "source_content": "It's been a while since we last published a status update about React Native.",
      "source_content_hash": "8e5d62be580d9e74676e25fe71ceb5a77ce2b56227f774ee2507460f93be93ef",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "距離我們上一次發布關於 React Native 的狀態更新已經有一段時間了。"
      }
    },
    {
      "segment_id": "180bddb1",
      "source_content": "At Facebook, we're using React Native more than ever and for many important projects. One of our most popular products is Marketplace, one of the top-level tabs in our app which is used by 800 million people each month. Since its creation in 2015, all of Marketplace has been built with React Native, including over a hundred full-screen views throughout different parts of the app.",
      "source_content_hash": "83c89554cf8d47958d7fba2a29c71be9e4d703f5d4fb5abe9fbd4d768ad91cbd",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在 Facebook，我們比以往任何時候都更頻繁地使用 React Native，並將其應用於許多重要專案中。我們最受歡迎的產品之一是 Marketplace，這是我們應用程式中的頂級標籤之一，每月有 8 億人使用。自 2015 年創建以來，Marketplace 的所有功能都是使用 React Native 構建的，包括應用程式中不同部分的超過一百個全螢幕視圖。"
      }
    },
    {
      "segment_id": "cf898102",
      "source_content": "We're also using React Native for many new parts of the app. If you watched the F8 keynote last month, you'll recognize Blood Donations, Crisis Response, Privacy Shortcuts, and Wellness Checks – all recent features built with React Native. And projects outside the main Facebook app are using React Native too. The new Oculus Go VR headset includes [a companion mobile app](https://www.oculus.com/app/) that is fully built with React Native, not to mention React VR powering many experiences in the headset itself.",
      "source_content_hash": "3cd6a05084a7241d59498f872d41ec05e9edf4aca8f3aa145176d712916e5ca0",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "我們也在應用程式的許多新部分中使用 React Native。如果你上個月觀看了 F8 主題演講，你會認出 Blood Donations、Crisis Response、Privacy Shortcuts 和 Wellness Checks——這些都是最近使用 React Native 構建的功能。而主 Facebook 應用程式之外的專案也在使用 React Native。新的 Oculus Go VR 頭戴裝置包含一個[配套的行動應用程式](https://www.oculus.com/app/)，該應用程式完全使用 React Native 構建，更不用說 React VR 為頭戴裝置本身提供了許多體驗。"
      }
    },
    {
      "segment_id": "42ad8e83",
      "source_content": "Naturally, we also use many other technologies to build our apps. [Litho](https://fblitho.com/) and [ComponentKit](https://componentkit.org/) are two libraries we use extensively in our apps; both provide a React-like component API for building native screens. It's never been a goal for React Native to replace all other technologies – we are focused on making React Native itself better, but we love seeing other teams borrow ideas from React Native, like bringing [instant reload](https://instagram-engineering.com/instant-feedback-in-ios-engineering-workflows-c3f6508c76c8) to non-JavaScript code too.",
      "source_content_hash": "7558331de890c287f887bd98598aebe08f253460a4a5a267f630271446b4f55f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "當然，我們也使用許多其他技術來構建我們的應用程式。[Litho](https://fblitho.com/) 和 [ComponentKit](https://componentkit.org/) 是我們在應用程式中廣泛使用的兩個函式庫；兩者都提供了類似 React 的元件 API 來構建原生畫面。React Native 的目標從來不是取代所有其他技術——我們專注於讓 React Native 本身變得更好，但我們很高興看到其他團隊從 React Native 中借鑒想法，例如將[即時重新載入](https://instagram-engineering.com/instant-feedback-in-ios-engineering-workflows-c3f6508c76c8)帶入非 JavaScript 代碼中。"
      }
    },
    {
      "segment_id": "aee0e40d",
      "source_content": "## Architecture",
      "source_content_hash": "a7e56472b11bd3c838bc8199601f5a5527112a003c69fbf95b012bc13573a193",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 架構"
      }
    },
    {
      "segment_id": "f5f6d2ce",
      "source_content": "When we started the React Native project in 2013, we designed it to have a single “bridge” between JavaScript and native that is asynchronous, serializable, and batched. Just as React DOM turns React state updates into imperative, mutative calls to DOM APIs like `document.createElement(attrs)` and `.appendChild()`, React Native was designed to return a single JSON message that lists mutations to perform, like `[[\"createView\", attrs], [\"manageChildren\", ...]]`. We designed the entire system to never rely on getting a synchronous response back and to ensure everything in that list could be fully serialized to JSON and back. We did this for the flexibility it gave us: on top of this architecture, we were able to build tools like [Chrome debugging](/docs/debugging#chrome-developer-tools), which runs all the JavaScript code asynchronously over a WebSocket connection.",
      "source_content_hash": "8bcf50332330c5db246ff474f2c7d56f0ba5671b7ad701e4a005042eb4086c66",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "當我們在 2013 年開始 React Native 專案時，我們設計了一個單一的「橋接器」來連接 JavaScript 和原生代碼，這個橋接器是非同步、可序列化和批次處理的。就像 React DOM 將 React 狀態更新轉換為對 DOM API 的命令式、可變的調用，如 `document.createElement(attrs)` 和 `.appendChild()`，React Native 被設計為返回一個單一的 JSON 消息，列出要執行的變更，如 `[[\"createView\", attrs], [\"manageChildren\", ...]]`。我們設計了整個系統，使其永遠不需要依賴同步回應，並確保該列表中的所有內容都可以完全序列化為 JSON 並返回。我們這樣做是為了它帶給我們的靈活性：在這個架構之上，我們能夠構建像[Chrome 調試工具](/docs/debugging#chrome-developer-tools)這樣的工具，它通過 WebSocket 連接非同步運行所有 JavaScript 代碼。"
      }
    },
    {
      "segment_id": "2fdadb08",
      "source_content": "Over the last 5 years, we found that these initial principles have made building some features harder. An asynchronous bridge means you can't integrate JavaScript logic directly with many native APIs expecting synchronous answers. A batched bridge that queues native calls means it's harder to have React Native apps call into functions that are implemented natively. And a serializable bridge means unnecessary copying instead of directly sharing memory between the two worlds. For apps that are entirely built in React Native, these restrictions are usually bearable. But for apps with complex integration between React Native and existing app code, they are frustrating.",
      "source_content_hash": "b908117d6b18f94e0fd52f24d201216ec4a3c3a5e4b26d3bcf623715c10f5cb3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在過去的 5 年中，我們發現這些初始原則使得構建某些功能變得更加困難。非同步橋接意味著你無法將 JavaScript 邏輯直接與許多需要同步回應的原生 API 集成。批次處理的橋接器會將原生調用排隊，這意味著讓 React Native 應用程式調用原生實現的函數變得更加困難。而可序列化的橋接意味著不必要的複製，而不是直接在兩個世界之間共享記憶體。對於完全使用 React Native 構建的應用程式，這些限制通常是可以忍受的。但對於在 React Native 和現有應用程式代碼之間有複雜集成的應用程式來說，這些限制令人沮喪。"
      }
    },
    {
      "segment_id": "f2c2bdd0",
      "source_content": "**We're working on a large-scale rearchitecture of React Native to make the framework more flexible and integrate better with native infrastructure in hybrid JavaScript/native apps.** With this project, we'll apply what we've learned over the last 5 years and incrementally bring our architecture to a more modern one. We're rewriting many of React Native's internals, but most of the changes are under the hood: existing React Native apps will continue to work with few or no changes.",
      "source_content_hash": "4f904cca2cf6c8a2b91260b4a366b0297b018c051a921c5f2827d2e4be91ccce",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "**我們正在進行 React Native 的大規模重新架構，以使框架更加靈活，並更好地與混合 JavaScript/原生應用程式中的原生基礎設施集成。** 通過這個專案，我們將應用過去 5 年學到的知識，並逐步將我們的架構帶入更現代的狀態。我們正在重寫 React Native 的許多內部組件，但大多數變更都在底層：現有的 React Native 應用程式將繼續工作，幾乎不需要變更。"
      }
    },
    {
      "segment_id": "a76548f8",
      "source_content": "To make React Native more lightweight and fit better into existing native apps, this rearchitecture has three major internal changes. First, we are changing the threading model. Instead of each UI update needing to perform work on three different threads, it will be possible to call synchronously into JavaScript on any thread for high-priority updates while still keeping low-priority work off the main thread to maintain responsiveness. Second, we are incorporating [async rendering](https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html) capabilities into React Native to allow multiple rendering priorities and to simplify asynchronous data handling. Finally, we are simplifying our bridge to make it faster and more lightweight; direct calls between native and JavaScript are more efficient and will make it easier to build debugging tools like cross-language stack traces.",
      "source_content_hash": "35a74a3b8157c35615e8baa822d95e7c6d35ad49cfb77e0f4387c4f86aa72d10",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "為了使 React Native 更加輕量級並更好地融入現有的原生應用程式，這次重新架構有三個主要的內部變更。首先，我們正在改變線程模型。不再需要每個 UI 更新在三個不同的線程上執行工作，而是可以在任何線程上同步調用 JavaScript 以進行高優先級更新，同時仍然將低優先級工作保持在主線程之外以保持響應性。其次，我們正在將[非同步渲染](https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html)功能納入 React Native，以允許多種渲染優先級並簡化非同步數據處理。最後，我們正在簡化我們的橋接器，使其更快、更輕量級；原生和 JavaScript 之間的直接調用更加高效，並且將使構建跨語言堆疊追踪等調試工具變得更加容易。"
      }
    },
    {
      "segment_id": "4b1d2d7d",
      "source_content": "Once these changes are completed, closer integrations will be possible. Today, it's not possible to incorporate native navigation and gesture handling or native components like UICollectionView and RecyclerView without complex hacks. After our changes to the threading model, building features like this will be straightforward.",
      "source_content_hash": "0f42a589d70d7764222fd46df217ae04d41d5d4a7ec06ca41d0de2cb2b020780",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "這些變更完成後，將能實現更緊密的整合。目前，若想整合原生導航、手勢處理或像是 UICollectionView 和 RecyclerView 這類原生元件，往往需要複雜的 hack 手段。在我們調整執行緒模型後，這類功能的開發將變得直觀許多。"
      }
    },
    {
      "segment_id": "dfe931a2",
      "source_content": "We'll release more details about this work later this year as it approaches completion.",
      "source_content_hash": "59bf9b1b1a44ca5fb58239cd7a4b7a6e08e8c52bac2fbcaf28210d9c39a04f4a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "我們將在今年稍晚這項工作接近完成時，釋出更多細節。"
      }
    },
    {
      "segment_id": "0037ff70",
      "source_content": "## Community",
      "source_content_hash": "be955f6b536547890fd3f3512fb7a25d4eb38f958b5aa6bab1c04c6660f8c9ed",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 社群"
      }
    },
    {
      "segment_id": "bdc231b1",
      "source_content": "Alongside the community inside Facebook, we're happy to have a thriving population of React Native users and collaborators outside Facebook. We'd like to support the React Native community more, both by serving React Native users better and by making the project easier to contribute to.",
      "source_content_hash": "9619895e5b1a1fc1da6d55d7e7bb228afda3659688a5c2568c05275b970c1c11",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "除了 Facebook 內部的社群外，我們也很高興在外部擁有活躍的 React Native 使用者與協作者群體。我們希望透過更完善地服務 React Native 使用者，以及降低專案的貢獻門檻，來進一步支持這個社群。"
      }
    },
    {
      "segment_id": "97ae4a01",
      "source_content": "Just as our architecture changes will help React Native interoperate more cleanly with other native infrastructure, React Native should be slimmer on the JavaScript side to fit better with the JavaScript ecosystem, which includes making the VM and bundler swappable. We know the pace of breaking changes can be hard to keep up with, so we'd like to find ways to have fewer major releases. Finally, we know that some teams are looking for more thorough documentation in topics like startup optimization, where our expertise hasn't yet been written down. Expect to see some of these changes over the coming year.",
      "source_content_hash": "c5c1018720b7b92573b814d31adf3f3421db193bb2b74150e21e4c6098d23be4",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "正如我們的架構變更將使 React Native 能更乾淨地與其他原生基礎設施協作，React Native 在 JavaScript 端也應該更輕量化，以更好地融入 JavaScript 生態系——這包括讓虛擬機器（VM）與打包工具可替換。我們理解重大變更的節奏可能讓人難以跟上，因此希望能找到方法減少主要版本的發布頻率。此外，我們也意識到某些團隊需要更詳盡的文件（例如在啟動優化等領域，我們的專業知識尚未系統化記錄）。預計未來一年會逐步實現這些改進。"
      }
    },
    {
      "segment_id": "c3a738de",
      "source_content": "If you're using React Native, you're part of our community; keep letting us know how we can make React Native better for you.",
      "source_content_hash": "b4c8597690bed9fd96a3cc862711e665cea27cfdd4f9c9de48fab34b50d65e96",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "如果你正在使用 React Native，你就是我們社群的一員；請持續告訴我們如何讓 React Native 更符合你的需求。"
      }
    },
    {
      "segment_id": "3cfe6286",
      "source_content": "React Native is just one tool in a mobile developer's toolbox, but it's one that we strongly believe in – and we're making it better every day, with over 2500 commits in the last year from 500+ contributors.",
      "source_content_hash": "4139f710a9cf7691382e8d8e68d19100b714d72a56a4e97d3743f15c5a5c1be0",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "React Native 只是行動開發者工具箱中的其中一項工具，但它是我們深信不疑的工具——我們每天都在讓它變得更好，過去一年已有超過 500 位貢獻者提交了 2500 多次 commit。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-blog/2018-06-14-state-of-react-native-2018.md",
  "last_updated_timestamp": "2025-06-19T15:33:15.417798+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "39ca2ed707514dec93eef6d08bc0610b1a60f311b820533ad25c449d82abedac"
  }
}