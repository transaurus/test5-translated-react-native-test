{
  "source_file_path_relative_to_docusaurus_root": "blog/2025-02-19-react-native-0.78.md",
  "source_file_content_hash": "500b69c8bd266344705d3f24a82a4a51dd9b289bf3069b56991a5f013dca2566",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\ntitle: 'React Native 0.78 - React 19 and more'\nauthors: [vonovak, shubham, fabriziocucci, cipolleschi]\ntags: [engineering]\ndate: 2025-02-19\n---",
      "source_content_hash": "bb2ec7759027a24700a0ad125ad28e186fbc9c008c61d41280aab5b2da3440af",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "cc3c868d",
      "source_content": "# React Native 0.78 - React 19 and more",
      "source_content_hash": "1cd739fc8a2a6d2549f6fff96f58c9d4066b8150ac1d369efd1285f1551b60c7",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "# React Native 0.78 - React 19 與更多新功能"
      }
    },
    {
      "segment_id": "7e5c5a39",
      "source_content": "Today we are excited to release React Native 0.78!",
      "source_content_hash": "87947e3a6cc49028526f93cc9443de1edf9747a4b34acc2894560e5f3f13be99",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "我們很高興今天發布 React Native 0.78！"
      }
    },
    {
      "segment_id": "8d66f911",
      "source_content": "This release ships React 19 in React Native and some other relevant features like native support for Android Vector drawables and better brownfield integration for iOS.",
      "source_content_hash": "a6c567e71bfe05887115169e1fd9e7acf69d22200ae4bfdd07ecf7ac59564557",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此版本整合了 React 19 至 React Native，並帶來其他重要功能，例如原生支援 Android 向量圖形繪製資源，以及更完善的 iOS 棕地整合方案。"
      }
    },
    {
      "segment_id": "70153c6e",
      "source_content": "### Highlights",
      "source_content_hash": "73100819f100dc497ad3fa8c4ba12309543c4bd89b7e70ea09a95fe6796994fa",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 重點更新"
      }
    },
    {
      "segment_id": "4ddf6ae7",
      "source_content": "- [React 19](/blog/2025/02/19/react-native-0.78#react-19)\n- [Towards smaller and faster releases](/blog/2025/02/19/react-native-0.78#towards-smaller-and-faster-releases)\n- [Opt-in for JavaScript logs in Metro](/blog/2025/02/19/react-native-0.78#opt-in-for-javascript-logs-in-metro)\n- [Added support for Android XML drawables](/blog/2025/02/19/react-native-0.78#added-support-for-android-xml-drawables)\n- [ReactNativeFactory on iOS](/blog/2025/02/19/react-native-0.78#reactnativefactory-on-ios)",
      "source_content_hash": "0b2cdedd1a28a76489039b06852174b94935097a8416396f980e18bc6fac59d9",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- [React 19](/blog/2025/02/19/react-native-0.78#react-19)\n- [邁向更輕量快速的發布週期](/blog/2025/02/19/react-native-0.78#towards-smaller-and-faster-releases)\n- [Metro 中的 JavaScript 日誌記錄功能選擇加入機制](/blog/2025/02/19/react-native-0.78#opt-in-for-javascript-logs-in-metro)\n- [新增 Android XML 繪製資源支援](/blog/2025/02/19/react-native-0.78#added-support-for-android-xml-drawables)\n- [iOS 的 ReactNativeFactory 機制](/blog/2025/02/19/react-native-0.78#reactnativefactory-on-ios)"
      }
    },
    {
      "segment_id": "ea978e4d",
      "source_content": "<!--truncate-->",
      "source_content_hash": "f5cded2aa7e288e395fe4f67f9dabda2281904b2f5358d07302b3aa8be0acdfa",
      "node_type": "comment",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_ea978e4d"
      }
    },
    {
      "segment_id": "95b38f97",
      "source_content": "## Highlights",
      "source_content_hash": "f5aedb14b6b9da4899c54cdf031961cfbda60d336dc60afdb5e12f0b83945e84",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 重點功能詳述"
      }
    },
    {
      "segment_id": "79b2d0b9",
      "source_content": "### React 19",
      "source_content_hash": "6417951b0c68a4cde2073d9eaf9a4280817990cc8c92917c468bfea9441b5ed8",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### React 19"
      }
    },
    {
      "segment_id": "d9172fa4",
      "source_content": "React 19 is now available on React Native!",
      "source_content_hash": "4a2207f3eee3b2c674b42c1459869bc1ecffca5688802cd7fcb3f7110f6b1fc6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "React 19 現已正式支援 React Native！"
      }
    },
    {
      "segment_id": "26524352",
      "source_content": "React 19 requires updating your app, as we introduced some changes from React 18. For example, we removed some APIs such as `propTypes`, and you need to adjust your app to make it compatible with the new version of React.",
      "source_content_hash": "eabe187879e57c2c95168f3fa58434cfa26c0b816f617e4c1a1c8c89ae6a449f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "升級至 React 19 需進行應用程式調整，因我們移除了部分 API（如 `propTypes`），您需根據新版 React 特性進行相容性改動。"
      }
    },
    {
      "segment_id": "73ab96a3",
      "source_content": "Follow our step-by-step [instructions to upgrade](https://react.dev/blog/2024/04/25/react-19-upgrade-guide) your app to React 19.",
      "source_content_hash": "0cfd0ad4323df35f2dc52f207fad93632842038315547827c7aeb2ec24fdb698",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "請遵循我們的[逐步升級指南](https://react.dev/blog/2024/04/25/react-19-upgrade-guide)將應用遷移至 React 19。"
      }
    },
    {
      "segment_id": "7499a4e7",
      "source_content": "After the migration, you’ll be able to leverage all the new features of React, including (non exhaustively):",
      "source_content_hash": "569e5d3c5eb6c24d4e747e7f2aac194bfaee14372536ce0107d6caee47dd759b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "完成遷移後，您將能使用 React 的所有新特性，包括（但不限於）："
      }
    },
    {
      "segment_id": "7a2e981c",
      "source_content": "- **[Actions](https://react.dev/blog/2024/12/05/react-19#actions):** these are functions that use async transitions. Async transitions automatically manage submitting data for you: they handle pending states, optimistic updates, error handling and more.\n- **[useActionState](https://react.dev/reference/react/useActionState):** a utility hook built on top of Actions. It takes a function and returns a wrapped Action to call. When the action is called, it will return the last result of the Action and its `pending` state.\n- **[useOptimistic](https://react.dev/reference/react/useOptimistic):** a new hook that simplifies showing the final state of an update optimistically while the async request is underway. If the request errors, React will switch back to the previous value automatically.\n- **[`use`](https://react.dev/reference/react/use):** this is a new API that allows access to resources during render. You can now read a promise or a context with `use` and React will Suspend until they resolve.\n- **[`ref` as `props`](https://react.dev/blog/2024/12/05/react-19#ref-as-a-prop):** you can now pass `ref`as a `prop` like you do with any other prop. Function components will no longer need `forwardRef` and you can migrate your components now.\n- And many others",
      "source_content_hash": "a82eef524d790cd9d7adc50441bb2970be37d65dba9f74a9574ad9079918cce5",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- **[Actions](https://react.dev/blog/2024/12/05/react-19#actions):** these are functions that use async transitions. Async transitions automatically manage submitting data for you: they handle pending states, optimistic updates, error handling and more.\n- **[useActionState](https://react.dev/reference/react/useActionState):** a utility hook built on top of Actions. It takes a function and returns a wrapped Action to call. When the action is called, it will return the last result of the Action and its `pending` state.\n- **[useOptimistic](https://react.dev/reference/react/useOptimistic):** a new hook that simplifies showing the final state of an update optimistically while the async request is underway. If the request errors, React will switch back to the previous value automatically.\n- **[`use`](https://react.dev/reference/react/use):** this is a new API that allows access to resources during render. You can now read a promise or a context with `use` and React will Suspend until they resolve.\n- **[`ref` as `props`](https://react.dev/blog/2024/12/05/react-19#ref-as-a-prop):** you can now pass `ref`as a `prop` like you do with any other prop. Function components will no longer need `forwardRef` and you can migrate your components now.\n- And many others"
      }
    },
    {
      "segment_id": "1042b50d",
      "source_content": "For a complete list of the new available features, have a look at the [React 19 release blog post](https://react.dev/blog/2024/12/05/react-19).",
      "source_content_hash": "9d9b31e02c044d728c09225f3f099044afe2c55f905c68bca4c4c37d3cfa58ef",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "完整新功能清單請參閱 [React 19 發布部落格](https://react.dev/blog/2024/12/05/react-19)。"
      }
    },
    {
      "segment_id": "35a77014",
      "source_content": "#### React Compiler",
      "source_content_hash": "b1d0b58f357c46b757a8ba573fa095e360fda52cfeaffdd5a9668c41268729ba",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "#### React 編譯器"
      }
    },
    {
      "segment_id": "13d9cd70",
      "source_content": "React Compiler is a build-time tool designed to optimize React applications by automatically applying memoization. While developers can manually use APIs like `useMemo`, `useCallback`, and `React.memo` to prevent unnecessary recomputation of unchanged parts of an app, they could also forget or misuse these optimizations. React Compiler addresses this by leveraging its understanding of JavaScript and of the [Rules of React](https://react.dev/reference/rules) to automatically memoize values or groups of values within components and hooks.",
      "source_content_hash": "ea797c7682210573ff5aa11a4d031622d9c5ee35fc0ded9009a56f370d8bd7de",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "React 編譯器是建置階段工具，透過自動化記憶機制優化 React 應用。雖然開發者能手動使用 `useMemo`、`useCallback` 和 `React.memo` 等 API 避免不必要的重新計算，但也可能遺漏或誤用這些優化。React 編譯器透過解析 JavaScript 與 [React 規則](https://react.dev/reference/rules)，自動對元件與 Hook 中的值或值群組實施記憶化，解決此問題。"
      }
    },
    {
      "segment_id": "29528c8d",
      "source_content": "With this release, we simplified the process to enable the React Compiler in your React Native apps. [In previous versions](https://react.dev/learn/react-compiler#using-react-compiler-with-react-17-or-18), you had to install two packages: the compiler and its runtime. After those packages were installed, you had to configure a Babel plugin to enable React Compiler through Metro.",
      "source_content_hash": "5b66451bb410c7ac5e8e92955da871baadbb64a11134bc78ce70ebd00eba206a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在此版本中，我們簡化了在 React Native 應用中啟用 React Compiler 的流程。[在先前版本](https://react.dev/learn/react-compiler#using-react-compiler-with-react-17-or-18)中，您需要安裝兩個套件：編譯器及其運行時。安裝這些套件後，還需配置 Babel 插件以透過 Metro 啟用 React Compiler。"
      }
    },
    {
      "segment_id": "c504c207",
      "source_content": "Now, you only need to install the compiler itself and to configure the Babel plugin. To learn how to enable it, you can follow our step-by-step [guide](https://react.dev/learn/react-compiler#usage-with-babel).",
      "source_content_hash": "09acd8c2a3d1fe0a2bf75b5ec4dd054c37102ce64fe83a28afc511489063cda8",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "現在，您只需安裝編譯器本身並配置 Babel 插件即可。若要了解如何啟用，可遵循我們的逐步[指南](https://react.dev/learn/react-compiler#usage-with-babel)。"
      }
    },
    {
      "segment_id": "98d26038",
      "source_content": "To verify that the compiler is running, you can open the React Native DevTools: you should see that the components that are memoized have the `Memo ✨` tag attached to them in the Component Inspector.",
      "source_content_hash": "4d16d306f214ddc016ea87792e65efba87780ab2cb8dba8aa38d382dc815be15",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "若要驗證編譯器是否運作，可開啟 React Native DevTools：您應能在元件檢查器中看到被記憶化的元件標有 `Memo ✨` 標籤。"
      }
    },
    {
      "segment_id": "d3649a1e",
      "source_content": "If you want to learn more about React Compiler, these are useful resources:",
      "source_content_hash": "1aa047dc94522dbb2d8709700d99d9b8693bfd5a5db80329a1541a05559ada92",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "若想深入了解 React Compiler，以下資源相當實用："
      }
    },
    {
      "segment_id": "36ab8340",
      "source_content": "- [React Compiler](https://react.dev/learn/react-compiler) docs\n- [React Compiler Deep Dive](https://www.youtube.com/watch?v=uA_PVyZP7AI)",
      "source_content_hash": "ee73302df2a0e8c81480d5e2efd89d0acc89787854a42f6fd467b01dee3a77ce",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- [React Compiler](https://react.dev/learn/react-compiler) 文件\n- [React Compiler 深度解析](https://www.youtube.com/watch?v=uA_PVyZP7AI)"
      }
    },
    {
      "segment_id": "ab5fc5b5",
      "source_content": "### Towards smaller and faster releases",
      "source_content_hash": "8bece93a62a7a73d349533393066c64e5bd12ba1b35e934e4d4d5d8bd09e0ec7",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 邁向更小更快的版本發布"
      }
    },
    {
      "segment_id": "6ea4c715",
      "source_content": "We’re updating our release process to ship stable React Native releases more frequently in 2025.",
      "source_content_hash": "30a12f8fcf895ea14a1bc9487d93210d525c0ba4f542e07af7dd5212b2cff27b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "我們正在更新發布流程，以便在 2025 年更頻繁地推出穩定的 React Native 版本。"
      }
    },
    {
      "segment_id": "79ad944d",
      "source_content": "It will be easier for you to update the React Native version because we’ll be reducing the number of breaking changes we ship. Faster releases also means that all the bugfixes we ship internally are reaching you earlier, and you can benefit from the latest features we develop inside React Native.",
      "source_content_hash": "9d93f6f3a777bc141599086fe4c4584e31d0e960a38a5375b7b3b43e24690683",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "這將使您更容易更新 React Native 版本，因為我們將減少引入的破壞性變更。更快的發布也意味著我們內部修復的錯誤能更早提供給您，讓您能受益於我們在 React Native 中開發的最新功能。"
      }
    },
    {
      "segment_id": "531437ca",
      "source_content": "We believe this new model will benefit every developer in the React Native ecosystem, as fewer breaking changes means a more stable framework that everyone can rely on.",
      "source_content_hash": "6451a22dbb2b1f0dcd9817520f9edddb69f1cd5ddcbff7b591cb4b2208e06e59",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "我們相信這種新模式將使 React Native 生態系統中的每位開發者受益，因為更少的破壞性變更意味著更穩定的框架，讓大家都能依賴。"
      }
    },
    {
      "segment_id": "bd92edfc",
      "source_content": "### Opt-in for JavaScript logs in Metro",
      "source_content_hash": "7678e5b9c58f55266a023334a2bfe616c283b8da642fdf69f87f676239e6203c",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 選擇性啟用 Metro 中的 JavaScript 日誌"
      }
    },
    {
      "segment_id": "7f71ff2a",
      "source_content": "We've added an opt-in to restore JavaScript log streaming via the Metro dev server, [previously removed in 0.77](/blog/2025/01/21/version-0.77#removal-of-consolelog-streaming-in-metro) for Community CLI users. This is in response to user feedback, as well as reviewing where we are with our replacement offerings today.",
      "source_content_hash": "de36d773ff075bb8d908ea2bbd501a4dc6d3944a11004aa0267f0539c3015a73",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "我們新增了一個選項，可透過 Metro 開發伺服器恢復 JavaScript 日誌串流，[此功能在 0.77 版中被移除](/blog/2025/01/21/version-0.77#removal-of-consolelog-streaming-in-metro)（針對 Community CLI 使用者）。這是基於使用者回饋，以及我們對當前替代方案的評估。"
      }
    },
    {
      "segment_id": "147e8550",
      "source_content": "To opt in, use the new `--client-logs` flag. This can also be aliased via an npm script for convenience.",
      "source_content_hash": "2800aebeba954db2e064dc9f4a75c18dbbd121953aa2c4d2648622a44b6ffacb",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "若要啟用，請使用新的 `--client-logs` 標記。為方便起見，也可透過 npm 腳本設定別名。"
      }
    },
    {
      "segment_id": "af983f82",
      "source_content": "```sh\nnpx @react-native-community/cli start --client-logs\n```",
      "source_content_hash": "e8df6987dc62deb817523d978ff34bbc06f10e39389424164568a0100ee3b3c9",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_af983f82"
      }
    },
    {
      "segment_id": "d0dd855b",
      "source_content": "Log streaming in Metro will still be going away in future and remains off by default. However, we intend to give developers a longer migration period to adapt to this change.",
      "source_content_hash": "4998766bb45b5b75556fd5ac5e1684c03e7f64574fd5ea1a632bc76331bb68e9",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "Metro 中的日誌串流功能未來仍會移除，且預設保持關閉。然而，我們打算給予開發者更長的遷移期以適應此變更。"
      }
    },
    {
      "segment_id": "7736989b",
      "source_content": "This update will also be made available in the incoming 0.77.1 minor release.",
      "source_content_hash": "e35fe8bee32645c4708faa58cf4b10bad4337b1daffd79ec6ec11f8659601083",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此更新也將在即將發布的 0.77.1 次要版本中提供。"
      }
    },
    {
      "segment_id": "8a9b6c26",
      "source_content": "### Added support for Android XML drawables",
      "source_content_hash": "ce5226d7276a353b25f7d0fa8a042be56cf61daddd3dc8117965c443c6b51301",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 新增對 Android XML 繪圖資源的支援"
      }
    },
    {
      "segment_id": "a1fa5396",
      "source_content": "In React Native 0.78, we’re shipping a new way to load icons, illustrations, and other graphic elements on Android as [XML resources](https://developer.android.com/guide/topics/resources/drawable-resource). This means you can use [vector drawables](https://developer.android.com/develop/ui/views/graphics/vector-drawable-resources) for displaying vector images at any scale without losing quality, or [shape drawables](https://developer.android.com/guide/topics/resources/drawable-resource#Shape) for drawing more basic embellishments. This is all supported by the same `Image` component that you know and love. To use this feature today, you can import XML resources like any other [static resource](/docs/next/images#static-image-resources) by referencing them in the `source` prop. Furthermore, using XML resources rather than bitmaps will also help you reduce your application size and will result in better rendering across screens with different DPI.",
      "source_content_hash": "8010c4edd99ec743c3f5b97dcc4a4eb5fe715888fad5bc698aff767a31e7b317",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在 React Native 0.78 中，我們推出了一種新方法，可在 Android 上以 [XML 資源](https://developer.android.com/guide/topics/resources/drawable-resource)形式載入圖標、插圖和其他圖形元素。這意味著您可以使用[向量繪圖資源](https://developer.android.com/develop/ui/views/graphics/vector-drawable-resources)來顯示任意縮放皆不失真的向量圖像，或使用[形狀繪圖資源](https://developer.android.com/guide/topics/resources/drawable-resource#Shape)來繪製更基本的裝飾元素。這些功能均由您熟悉的 `Image` 元件支援。要立即使用此功能，可像引用其他[靜態資源](/docs/next/images#static-image-resources)一樣，在 `source` 屬性中引用 XML 資源。此外，使用 XML 資源而非點陣圖還能幫助您減小應用體積，並在不同 DPI 的螢幕上實現更好的渲染效果。"
      }
    },
    {
      "segment_id": "8c3563d3",
      "source_content": "```js\n// via require\n<Image\n  source={require('./img/my_icon.xml')}\n  style={{width: 40, height: 40}}\n/>;\n\n// or via import\nimport MyIcon from './img/my_icon.xml';\n<Image source={MyIcon} style={{width: 40, height: 40}} />;\n```",
      "source_content_hash": "ed77a3bc4d4963889b16ba66d945170924a6f6aea8a66856e2f6747feff59ccc",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_8c3563d3"
      }
    },
    {
      "segment_id": "f8edb6d2",
      "source_content": "#### Performance & Quality",
      "source_content_hash": "5efb9d411e521e4da7531093b28b514f7d8395f1034afc6ed05664e3212bf16b",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "#### 效能與品質"
      }
    },
    {
      "segment_id": "1862c5fe",
      "source_content": "[Like all other image types](/docs/next/images#off-thread-decoding), Android’s XML resources are loaded and inflated off the main thread so you don’t drop any frames. This means the resource is not guaranteed to display instantly but also does not prevent user input while the resource is loading. Off-thread decoding is especially important when you need to render many icons at the same time. Internal apps realized some significant performance improvements when using Android’s vector drawables.",
      "source_content_hash": "6228565ce606f4ebeac068e1591e886dfff976a5a28dd7f1268344feb9c54306",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "[與其他所有圖片類型一樣](/docs/next/images#off-thread-decoding)，Android 的 XML 資源會在非主線程上載入和解析，因此不會丟失任何幀數。這意味著資源不保證能立即顯示，但在資源載入時也不會阻擋使用者輸入。當您需要同時渲染多個圖標時，非主線程解析尤其重要。內部應用在使用 Android 的向量繪圖資源時，已實現了顯著的效能提升。"
      }
    },
    {
      "segment_id": "6ca4479f",
      "source_content": "Utilizing resource types like vector drawables are the perfect way to display images without loss of quality, and can result in smaller APK files since you don't need to include an image type for every screen density. Furthermore, vector drawables are copied from memory once they’re loaded so if you render the same icon more than once they will all display at the same time.",
      "source_content_hash": "857636ae19ae87c53199fc73dabb02057ec50c6a311a1fed3cb406442523530a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "使用向量可繪製資源（vector drawables）這類資源類型，是完美呈現不失真圖像的方式，且能縮減APK檔案大小，因為您無需為每種螢幕密度包含對應的圖片格式。此外，向量可繪製資源一旦載入後會從記憶體複製，因此若您多次渲染相同圖示，它們將能同時顯示。"
      }
    },
    {
      "segment_id": "71169a2d",
      "source_content": "#### Trade-offs",
      "source_content_hash": "5eaa6ece6d5d74431cac707fc979a20d4285c633a3ce14e6c21093ec641374dc",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "#### 權衡取捨"
      }
    },
    {
      "segment_id": "c1eaf30b",
      "source_content": "It’s important to note that drawable XML resources are not perfect, and there are constraints to using them:",
      "source_content_hash": "c7312beccdd9f1e1ef5f2f6f346aeee05a4d143d7b695fa666068d13d9e2b878",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "需注意可繪製XML資源並非完美，使用時存在以下限制："
      }
    },
    {
      "segment_id": "7a3b7c62",
      "source_content": "- They must be referenced at build time of your Android application. These resources are passed into a build step with the [Android Asset Packaging Tool](https://developer.android.com/tools/aapt2) (AAPT) to convert raw XML into binary XML. Android does not support loading raw XML files, [this is a known limitation](https://issuetracker.google.com/issues/62435069).\n- They cannot be loaded over the network by Metro. If you change the directory or name of an XML resource, you will need to rebuild your Android application each time.\n- They have no dimensions. By default, they will display with a 0x0 size and you need to provide a width and height for them to show up.\n- They are not fully customizable at runtime; you can only control dimensions or the overall tint color but you can’t customize individual element attributes _inside_ the resource like stroke widths, border radius, or colors. These types of customizations require different variants of your XML resource.",
      "source_content_hash": "28b35d99e4da2d32ae98688ade9bec3f5c913c09da8068cfa24e50c4d5ead70c",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- They must be referenced at build time of your Android application. These resources are passed into a build step with the [Android Asset Packaging Tool](https://developer.android.com/tools/aapt2) (AAPT) to convert raw XML into binary XML. Android does not support loading raw XML files, [this is a known limitation](https://issuetracker.google.com/issues/62435069).\n- They cannot be loaded over the network by Metro. If you change the directory or name of an XML resource, you will need to rebuild your Android application each time.\n- They have no dimensions. By default, they will display with a 0x0 size and you need to provide a width and height for them to show up.\n- They are not fully customizable at runtime; you can only control dimensions or the overall tint color but you can’t customize individual element attributes _inside_ the resource like stroke widths, border radius, or colors. These types of customizations require different variants of your XML resource."
      }
    },
    {
      "segment_id": "95f2feab",
      "source_content": ":::info\nAndroid’s vector drawables are not a 1:1 replacement for libraries like `react-native-svg`. They are designed specifically for Android and do not work for iOS. If you want to have the same SVGs across all platforms, you'll have to continue using `react-native-svg`. Vector drawables merely offer performance benefits at the expense of customization.\n:::",
      "source_content_hash": "cdd44214f2b050561774be07b3ecbecdcd53f5fcdabd3e4137c4b8e5f600c2b8",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::info\nAndroid的向量可繪製資源並非`react-native-svg`等函式庫的1:1替代方案。它們專為Android設計，無法用於iOS。若需跨平台使用相同SVG，仍需使用`react-native-svg`。向量可繪製資源僅以犧牲自訂性換取效能優勢。\n:::"
      }
    },
    {
      "segment_id": "48155948",
      "source_content": "### ReactNativeFactory on iOS",
      "source_content_hash": "7478249c132e73022b971309021b2a650201cde747f0aba8e974876a8a9ef969",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### iOS上的ReactNativeFactory"
      }
    },
    {
      "segment_id": "1958bc43",
      "source_content": "With React Native 0.78 we improved the integration of React Native on iOS.",
      "source_content_hash": "8341923445b3edf9cc85d60dba23185d48832d225c91f6e92f8ac03ad977240c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "React Native 0.78強化了iOS平台的整合度。"
      }
    },
    {
      "segment_id": "a8610918",
      "source_content": "This version introduces a new class called `RCTReactNativeFactory` that allows you to create instances of React Native without the need of an AppDelegate. This should allow you to create a new version of React Native in a ViewController, for example. This simplifies dramatically the integration with Brownfield apps.",
      "source_content_hash": "704e2ce4288d7a3bc1f4db3b0c92c64537a588693ed7129ace7b0fbfbc664366",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此版本新增名為`RCTReactNativeFactory`的類別，讓您無需透過AppDelegate即可建立React Native實例。例如，您現在能在ViewController中建立新版本的React Native，大幅簡化與Brownfield應用的整合流程。"
      }
    },
    {
      "segment_id": "a6c928a1",
      "source_content": "Imagine that you want to show a React Native view in a View Controller of your app. Starting from React Native 0.78, what you need to do, after installing all the dependencies as shown in [this guide](/docs/next/integration-with-existing-apps?language=apple#1-set-up-directory-structure), is to add this code:",
      "source_content_hash": "6d4c7292db2f542ce71c7baeb93cb2a9d1e832feca7d9f7e054fbf6d6a9df9db",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "假設您想在應用程式的視圖控制器中顯示React Native視圖。從React Native 0.78開始，按照[本指南](/docs/next/integration-with-existing-apps?language=apple#1-set-up-directory-structure)安裝所有相依項後，只需加入以下程式碼："
      }
    },
    {
      "segment_id": "3917a88d",
      "source_content": "```diff\n\n+import React\n+import React_RCTAppDelegate\n\npublic class ViewController {\n\n+  var reactNativeFactory: RCTReactNativeFactory?\n+  var reactNativeDelegate: ReactNativeDelegate?\n\n  public func viewdidLoad() {\n    super.viewDidLoad()\n    // …\n+ reactNativeDelegate = ReactNativeDelegate()\n+ reactNativeFactory = RCTReactNativeFactory(delegate: reactNativeDelegate!)\n+ view = reactNativeFactory.rootViewFactory.view(withModuleName: \"<your module name>\")\n  }\n\n}\n\n+class ReactNativeDelegate: RCTDefaultReactNativeFactoryDelegate {\n\n+  override func sourceURL(for bridge: RCTBridge) -> URL? {\n+    self.bundleURL()\n+  }\n+\n+  override func bundleURL() -> URL? {\n+    #if DEBUG\n+    RCTBundleURLProvider.sharedSettings().jsBundleURL(forBundleRoot: \"index\")\n+    #else\n+    Bundle.main.url(forResource: \"main\", withExtension: \"jsbundle\")\n+    #endif\n+  }\n+}\n\n```",
      "source_content_hash": "3b2b88dcb57fcd9f4a8b658286b6b470b06dc99008809500c4ff7b6f248f9757",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "d2a3d4c7",
      "source_content": "React Native will be loaded in the View Controller as soon as you navigate to it.",
      "source_content_hash": "ae79531100a4213b2a0129aeb03ba1027747961204519e0fca1352f4bac4bed7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "當您導航至該視圖控制器時，React Native將立即載入。"
      }
    },
    {
      "segment_id": "008183b0",
      "source_content": "This code creates an `RCTReactNativeFactory`, assigns a delegate to it, and asks it to create a `rootView` for a React Native’s view.",
      "source_content_hash": "d8561c557e7d773a1221a86e2e6bb51e636b11fd73f4ae3aec6ca72d6fe6065e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此程式碼會建立`RCTReactNativeFactory`、指派委派對象，並要求其為React Native視圖建立`rootView`。"
      }
    },
    {
      "segment_id": "0ddaa835",
      "source_content": "The delegate is defined below, and it overrides the `sourceURL` and the `bundleURL` properties to tell React Native where it can find the JS bundle to load in the view.",
      "source_content_hash": "8aa2e18999c41ff1894b7fc97e892a7c2ef8d17d045853d4f7ce4370e8634871",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "下方定義的委派會覆寫`sourceURL`與`bundleURL`屬性，告知React Native從何處載入JS套件至視圖中。"
      }
    },
    {
      "segment_id": "08f73f73",
      "source_content": "## Other Breaking Changes",
      "source_content_hash": "034a11a329dc911c2efc0502d8299d77c9df6f06eb43c1cd0eed461ad63baecd",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 其他重大變更"
      }
    },
    {
      "segment_id": "58f98d22",
      "source_content": "### General",
      "source_content_hash": "083faa00fd6465a6b5784ffd0c5bff3a53ca64cb06ceedef3c3af2d9fc25f5eb",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 通用"
      }
    },
    {
      "segment_id": "8a75aa33",
      "source_content": "- React Native DevTools\n  - Removed FuseboxClient CDP domain\n- Codegen\n  - Separate component array types and command array types",
      "source_content_hash": "d67adfc1aebe72f1ffec7c06ecd54a3978ba4a2e577b63d162d80a6307f7f8d0",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- React Native DevTools\n  - 移除FuseboxClient CDP領域\n- Codegen\n  - 分離元件陣列類型與指令陣列類型"
      }
    },
    {
      "segment_id": "67edbbc4",
      "source_content": "### Android",
      "source_content_hash": "18508687aedd8506ac08685625c58c973d94225f52d4abdd8fc62e581c6da653",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### Android"
      }
    },
    {
      "segment_id": "5b1ccdc9",
      "source_content": "- Nullability changes: migrating `RootView` to Kotlin resulted in changes of parameter types from nullable to non nullable.\n- The following classes have been moved from public to internal, or removed, and can’t be accessed anymore:\n  - `com.facebook.react.bridge.GuardedResultAsyncTask`\n  - `com.facebook.react.uimanager.ComponentNameResolver`\n  - `com.facebook.react.uimanager.FabricViewStateManager`\n  - `com.facebook.react.views.text.frescosupport.FrescoBasedReactTextInlineImageViewManager`",
      "source_content_hash": "a2d33980d7edda003384ae23576a70ba8ef51e335ae19f86934aa64c9f0461f5",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- 可空性變更：將`RootView`遷移至Kotlin導致參數類型從可空變更為不可空。\n- 以下類別已從公開改為內部或移除，無法再存取：\n  - `com.facebook.react.bridge.GuardedResultAsyncTask`\n  - `com.facebook.react.uimanager.ComponentNameResolver`\n  - `com.facebook.react.uimanager.FabricViewStateManager`\n  - `com.facebook.react.views.text.frescosupport.FrescoBasedReactTextInlineImageViewManager`"
      }
    },
    {
      "segment_id": "188a0310",
      "source_content": "### iOS",
      "source_content_hash": "b646a613d3c8a9a4ca1214eed895ef4f31b195bbc5c8456c23cc55e60cc49c95",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### iOS"
      }
    },
    {
      "segment_id": "aa3dd15d",
      "source_content": "- Change Image load event size info from logical size to pixel (This only affects the Old Architecture)",
      "source_content_hash": "ce0ce6d19ab268fe1f9a4791f144b780c98e11597ecbffd233d2acf49f1f6835",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- 將圖片載入事件的尺寸資訊從邏輯尺寸改為像素（僅影響舊架構）"
      }
    },
    {
      "segment_id": "4b62f7d8",
      "source_content": "## Acknowledgements",
      "source_content_hash": "1ef93036e7583a5c0bf23fede1d8c1545de1509c0759adabe508e64b182adc00",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 致謝"
      }
    },
    {
      "segment_id": "4899bc54",
      "source_content": "React Native 0.78 contains over 509 commits from 87 contributors. Thanks for all your hard work!",
      "source_content_hash": "89ce4eecc09431040c917b1e166c54c913d829d5b1c8e17a7f2d7d38365fa947",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "React Native 0.78 包含了來自 87 位貢獻者的超過 509 次提交。感謝大家的辛勤工作！"
      }
    },
    {
      "segment_id": "b27c61de",
      "source_content": "Thanks to all the additional authors that worked on documenting features in this release post:",
      "source_content_hash": "d238edb562844e7d53eb091c098caacdb00c5573aabfde63efacea8ad1dd58ce",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "感謝所有在本版本發布文章中參與功能文檔撰寫的額外作者："
      }
    },
    {
      "segment_id": "e612e1d0",
      "source_content": "- [Dream11](https://github.com/dream-sports-labs) team for the thorough testing of React 19 features in React Native\n- [Nicola Corti](https://github.com/cortinico) for the work on Faster Releases\n- [Alex Hunt](https://github.com/huntie) for the work on the Metro logs opt-in\n- [Peter Abbondanzo](https://github.com/Abbondanzo) for the work on Android XML Drawable Support\n- [Oskar Kwaśniewski](https://github.com/okwasniewski) for the work on the ReactNativeFactory",
      "source_content_hash": "221b5f38853a9f58a6ffe637bd66f35e624fa5a58ca77ca3a919b5ea07c82149",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- [Dream11](https://github.com/dream-sports-labs) 團隊對 React Native 中 React 19 功能的全面測試\n- [Nicola Corti](https://github.com/cortinico) 為「更快的發布」所做的貢獻\n- [Alex Hunt](https://github.com/huntie) 為 Metro 日誌選擇加入功能的工作\n- [Peter Abbondanzo](https://github.com/Abbondanzo) 為 Android XML Drawable 支援的工作\n- [Oskar Kwaśniewski](https://github.com/okwasniewski) 為 ReactNativeFactory 的工作"
      }
    },
    {
      "segment_id": "b7d7a8d8",
      "source_content": "## Upgrade to 0.78",
      "source_content_hash": "4a29599fceef9fe70095d49c5f026b976e4bb15e6a52345442e5efe0f8f23373",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 升級至 0.78"
      }
    },
    {
      "segment_id": "48249e3c",
      "source_content": "Please use the [React Native Upgrade Helper](https://react-native-community.github.io/upgrade-helper/) to view code changes between React Native versions for existing projects, in addition to the Upgrading docs.",
      "source_content_hash": "0638260e20da230691670b567610c6c2be87ab53adb865a0f30305b52bfbd5c7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "請使用 [React Native Upgrade Helper](https://react-native-community.github.io/upgrade-helper/) 查看現有專案在 React Native 版本之間的程式碼變更，以及升級文檔。"
      }
    },
    {
      "segment_id": "ebfad7e4",
      "source_content": "To create a new project:",
      "source_content_hash": "556b556603ebc735e5193d4598f99a66d8ca11d2cbdc58dd6e21bac27a143f9c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "要建立一個新專案："
      }
    },
    {
      "segment_id": "a4a54521",
      "source_content": "```\nnpx @react-native-community/cli@latest init MyProject --version latest\n```",
      "source_content_hash": "d4d4818494e8b2d86a8e2e708fa32bf5ea749a2b154bad211c32907e17370fe6",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_a4a54521"
      }
    },
    {
      "segment_id": "1f9058cd",
      "source_content": "If you use Expo, [React Native 0.78 will be supported in a canary release of the Expo SDK](https://expo.dev/changelog/react-native-78).",
      "source_content_hash": "debc28625f4bd032738468fcf0514ceec0e8833301b822e7651f99556b1534be",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "如果您使用 Expo，[React Native 0.78 將在 Expo SDK 的 canary 版本中獲得支援](https://expo.dev/changelog/react-native-78)。"
      }
    },
    {
      "segment_id": "807b08eb",
      "source_content": ":::info\n0.78 is now the latest stable version of React Native and 0.75.x moves to unsupported. For more information see [React Native's support policy](https://github.com/reactwg/react-native-releases/blob/main/docs/support.md). We aim to publish a final end-of-life update of 0.75 in the near future.\n:::",
      "source_content_hash": "f3bb323c09235500ad44d041c609551a7948cdf80e50b3612b149d444ceb3bb4",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::info\n0.78 現在是 React Native 的最新穩定版本，而 0.75.x 將不再獲得支援。更多資訊請參閱 [React Native 的支援政策](https://github.com/reactwg/react-native-releases/blob/main/docs/support.md)。我們計劃在不久的將來發布 0.75 的最終終止支援更新。\n:::"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-blog/2025-02-19-react-native-0.78.md",
  "last_updated_timestamp": "2025-06-19T15:33:39.516343+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "500b69c8bd266344705d3f24a82a4a51dd9b289bf3069b56991a5f013dca2566"
  }
}