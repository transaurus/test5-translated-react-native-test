{
  "source_file_path_relative_to_docusaurus_root": "contributing/how-to-run-and-write-tests.md",
  "source_file_content_hash": "e0d8347d05b2cc482b75ee47b7ddaa82ef25dfc00edf268077f893586225b467",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\ntitle: How to Run and Write Tests\n---",
      "source_content_hash": "1190758ab08e1bda5f50522e1eca69b0b4002233838a236dc0b4181397bdc353",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "f85bbfb4",
      "source_content": "## Running Tests",
      "source_content_hash": "4d7f16177825c2d74ef8a4f890660f9892fe83ade43e429dc84c96afef85ef82",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 執行測試"
      }
    },
    {
      "segment_id": "6ef78e84",
      "source_content": "This section is about testing your changes to React Native as a contributor. If you haven't yet, go through the steps to set up your development environment for [building projects with native code](/docs/environment-setup).",
      "source_content_hash": "272b4b4adb8a432556087a9dcf6b084bf3a41e822756d9f4facd148346b17646",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "本節內容針對貢獻者如何測試對 React Native 的修改。若您尚未完成，請先依照[使用原生程式碼建置專案](/docs/environment-setup)的步驟設定開發環境。"
      }
    },
    {
      "segment_id": "d912d376",
      "source_content": "### JavaScript Tests",
      "source_content_hash": "57e0bce3c256f3ff3b773c315f68f1f33d9cb1f09cc6d247c19e58cc1a57458a",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### JavaScript 測試"
      }
    },
    {
      "segment_id": "8ac585fb",
      "source_content": "The simplest way to run the JavaScript test suite is by using the following command at the root of your React Native checkout:",
      "source_content_hash": "ebee107eed8ab6df1bb38bce81782e6578be012c8a417d21082014bb611f50e9",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "執行 JavaScript 測試套件最簡單的方式，是在 React Native 程式碼庫的根目錄下使用以下指令："
      }
    },
    {
      "segment_id": "b9c7a144",
      "source_content": "```bash\nyarn test\n```",
      "source_content_hash": "fda48c1541b17b316b3e5fefa562b9f527d4c343c639fe2013d89e87a9ec9ccb",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_b9c7a144"
      }
    },
    {
      "segment_id": "42ad8e83",
      "source_content": "This will run tests using [Jest](https://jestjs.io).",
      "source_content_hash": "607ffb88477d2261c08529ca2c03d692ec04fec0f0d7f404df858a770c434990",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此指令會使用 [Jest](https://jestjs.io) 執行測試。"
      }
    },
    {
      "segment_id": "f6168993",
      "source_content": "You should also make sure your code passes [Flow](https://flowtype.org/) and lint tests:",
      "source_content_hash": "dfc3fe45e605b6c4514e51755c8ef27d8e1ea89f94f1b6b84607e42338b7cae5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "您還應確保程式碼通過 [Flow](https://flowtype.org/) 與 lint 測試："
      }
    },
    {
      "segment_id": "cbbebf8e",
      "source_content": "```bash\nyarn flow\nyarn lint\n```",
      "source_content_hash": "f40f31b5d991ee4ed3e9c0f447671135938829a8de2a7a055ec6ea18791fcd92",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_cbbebf8e"
      }
    },
    {
      "segment_id": "79b2d0b9",
      "source_content": "### iOS Tests",
      "source_content_hash": "f6c8305157670327132c9283782d4548c8712bc267c68764c0fb1a98114f68e6",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### iOS 測試"
      }
    },
    {
      "segment_id": "d9172fa4",
      "source_content": "Follow the [README.md](https://github.com/facebook/react-native/blob/main/packages/rn-tester/README.md) instructions in the `packages/rn-tester` directory.",
      "source_content_hash": "7aa704c421087d8fcc8bc868035e52df48f4b8984ae2b874b6bfc7d1886ae48e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "Follow the [README.md](https://github.com/facebook/react-native/blob/main/packages/rn-tester/README.md) instructions in the `packages/rn-tester` directory."
      }
    },
    {
      "segment_id": "26524352",
      "source_content": "Then, go back to the root of your React Native checkout and run `yarn`. This will set up your JavaScript dependencies.",
      "source_content_hash": "3929fdfdf72addd78b9ecc3e7295e1f53e469e2da450762b5c50a4f7df8c8d3d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "接著返回 React Native 程式碼庫的根目錄並執行 `yarn`，這將設定 JavaScript 相依套件。"
      }
    },
    {
      "segment_id": "73ab96a3",
      "source_content": "At this point, you can run iOS tests by invoking the following script from the root of your React Native checkout:",
      "source_content_hash": "318887b2fc39f6d1a655095f7c0c3f7c66348af533c96c0c3eae47aad53a111c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此時，您可以透過在 React Native 程式碼庫根目錄執行以下腳本來運行 iOS 測試："
      }
    },
    {
      "segment_id": "6543a19e",
      "source_content": "```bash\n./scripts/objc-test.sh test\n```",
      "source_content_hash": "c212836bd8a938784fbcf126800abf0993fbceb780f724cb4d27849368da1725",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_6543a19e"
      }
    },
    {
      "segment_id": "135468ee",
      "source_content": "You can also use Xcode to run iOS tests. Open `RNTester/RNTesterPods.xcworkspace` and run tests locally by pressing <kbd>Command + U</kbd> or selecting `Product` then `Test` from the menubar.",
      "source_content_hash": "85d2f0c06c710d428e07f07600dc69282485396f44103b2e07d017d77897fb91",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "您也可以使用 Xcode 執行 iOS 測試。開啟 `RNTester/RNTesterPods.xcworkspace` 後，按 <kbd>Command + U</kbd> 或從選單列選擇 `Product` > `Test` 即可在本機運行測試。"
      }
    },
    {
      "segment_id": "33331f27",
      "source_content": "Xcode also allows running individual tests through its Test Navigator. You can also use <kbd>Command + 6</kbd> shortcut.",
      "source_content_hash": "94d0fa181cd9f66645ebb33c1ab02f95060016b76ff007fc59b607b8c239dab4",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "Xcode 還允許透過其測試導覽器執行個別測試。您也可以使用 <kbd>Command + 6</kbd> 快捷鍵。"
      }
    },
    {
      "segment_id": "f331c5ef",
      "source_content": ":::note\n`objc-test.sh` ensures your test environment is set up to run all tests. It also disables tests that are known to be flaky or broken. Keep this in mind when running tests using Xcode. If you see an unexpected failure, see if it's disabled in `objc-test.sh` first.\n:::",
      "source_content_hash": "c582917a8e43736e5be51b590fb7106d452e2235ad57c7318c42fb70b9138a9c",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::note\n`objc-test.sh` 會確保您的測試環境已設定為執行所有測試，同時停用已知不穩定或損壞的測試。使用 Xcode 運行測試時請注意這點。若遇到非預期的失敗，請先檢查該測試是否在 `objc-test.sh` 中被停用。\n:::"
      }
    },
    {
      "segment_id": "8bddee80",
      "source_content": "#### iOS Podfile/Ruby tests",
      "source_content_hash": "24ee7a30a4b0f575a4955d02944ca3d7988fb4d1fba1d26661bd11e3d0c33e58",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "#### iOS Podfile/Ruby 測試"
      }
    },
    {
      "segment_id": "a9d49f92",
      "source_content": "If you are making modifications to `Podfile` configurations then there are Ruby tests that can verify these.",
      "source_content_hash": "8ca9cb83018bb0c83f79c59376a83aa7877f5467bfeb056933889c421878a1d6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "若您正在修改 `Podfile` 配置，則有 Ruby 測試可驗證這些變更。"
      }
    },
    {
      "segment_id": "a44047a5",
      "source_content": "To run the ruby tests:",
      "source_content_hash": "3e15e2db7d074d78d71e4cf00d1f446676c474d08366481da37e534e6c7d8add",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "執行 Ruby 測試的指令如下："
      }
    },
    {
      "segment_id": "64b6f348",
      "source_content": "```bash\ncd scripts\nsh run_ruby_tests.sh\n```",
      "source_content_hash": "4c750afdfd2bd9a13f30f7fa8336774985ec09ec52849f23842c719ded678f9a",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_64b6f348"
      }
    },
    {
      "segment_id": "e50bebbf",
      "source_content": "### Android Tests",
      "source_content_hash": "bd36d6973d57457b2b4e3b5f09dff7eec413a4e0cab9c5cfe5ab16b051cc56c8",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### Android 測試"
      }
    },
    {
      "segment_id": "23dfb152",
      "source_content": "The Android Unit tests do not run in an emulator, but they run on the JVM on your local machine.",
      "source_content_hash": "8b561a4cfdc4c6b87cbc7068a975beea2c0f7a8c5e2bcafee29f7f7b04c8c1c2",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "Android 單元測試不會在模擬器中運行，而是在您本機的 JVM 上執行。"
      }
    },
    {
      "segment_id": "1131ef75",
      "source_content": "To run the Android Unit tests, invoke the following script from the root of your React Native checkout:",
      "source_content_hash": "5b89102c5a0cc36c4aff56fba6c64726ba50afe5f3f06191895c682f805f507c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "要執行 Android 單元測試，請在 React Native 程式碼庫根目錄執行以下腳本："
      }
    },
    {
      "segment_id": "750e2f7e",
      "source_content": "```bash\n./gradlew test\n```",
      "source_content_hash": "3c02fc265ecf25ab85be5ef342cd214a9c3e7b7b0a6130cdbf2f786b651ae378",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_750e2f7e"
      }
    },
    {
      "segment_id": "a5a4323e",
      "source_content": "## Writing Tests",
      "source_content_hash": "ab7d14351258511ffb73b5e0cbbd81aca079d6613aa7548f46beedc71d7a15ba",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 撰寫測試"
      }
    },
    {
      "segment_id": "657c2b20",
      "source_content": "Whenever you are fixing a bug or adding new functionality to React Native, it is a good idea to add a test that covers it. Depending on the change you're making, there are different types of tests that may be appropriate.",
      "source_content_hash": "0f1467a0308bca1c95bd384197b172d07ac43f1a0b376339596c2d7a8df2e7d1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "當您修復錯誤或為 React Native 新增功能時，建議添加涵蓋該變更的測試。根據修改內容的不同，適合的測試類型也會有所差異。"
      }
    },
    {
      "segment_id": "52388877",
      "source_content": "### JavaScript Tests",
      "source_content_hash": "57e0bce3c256f3ff3b773c315f68f1f33d9cb1f09cc6d247c19e58cc1a57458a",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### JavaScript 測試"
      }
    },
    {
      "segment_id": "eab056be",
      "source_content": "The JavaScript tests can be found inside `__test__` directories, colocated next to the files that are being tested. See [`TouchableHighlight-test.js`][js-jest-test] for a basic example. You can also follow Jest's [Testing React Native Apps][jest-tutorial] tutorial to learn more.",
      "source_content_hash": "ecdb7410496b8463856ac4d48f69f56213494ac8e880ac803d83b6a4260266b3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "JavaScript 測試位於 `__test__` 目錄中，與被測試檔案處於相同位置。參見 [`TouchableHighlight-test.js`][js-jest-test] 以了解基本範例。您也可以參考 Jest 的[測試 React Native 應用程式][jest-tutorial]教學以獲取更多資訊。"
      }
    },
    {
      "segment_id": "4c2de15e",
      "source_content": "[js-jest-test]: https://github.com/facebook/react-native/blob/main/Libraries/Components/Touchable/__tests__/TouchableHighlight-test.js",
      "source_content_hash": "58f510a6ba9c04e0f57b3c30709d31f966b5c5bce4e877aeb659cc7d2a4c2b4a",
      "node_type": "definition",
      "translatable": true,
      "translations": {
        "zh-hant": "[js-jest-test]: https://github.com/facebook/react-native/blob/main/Libraries/Components/Touchable/__tests__/TouchableHighlight-test.js"
      }
    },
    {
      "segment_id": "71e4e90e",
      "source_content": "[jest-tutorial]: https://jestjs.io/docs/en/tutorial-react-native",
      "source_content_hash": "62fb0cf182b494ce0ac9d10ee4ac74febced71b263f4cfb6d4d50e4e3039bd28",
      "node_type": "definition",
      "translatable": true,
      "translations": {
        "zh-hant": "[jest-tutorial]: https://jestjs.io/docs/en/tutorial-react-native"
      }
    },
    {
      "segment_id": "98355e36",
      "source_content": "### iOS Integration Tests",
      "source_content_hash": "8a941b05a81370be07ab380782eece40c32cd6c8ee11ad1af61cb77ade74073f",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### iOS 整合測試"
      }
    },
    {
      "segment_id": "7736989b",
      "source_content": "React Native provides facilities to make it easier to test integrated components that require both native and JS components to communicate across the bridge.",
      "source_content_hash": "e6aaec7833b786d2d3976316f10415b5b02563492afe42ab4cad5ac1c34f544c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "React Native 提供工具來簡化測試需要原生與 JS 元件透過橋接通訊的整合元件。"
      }
    },
    {
      "segment_id": "6270d577",
      "source_content": "The two main components are `RCTTestRunner` and `RCTTestModule`. `RCTTestRunner` sets up the React Native environment and provides facilities to run the tests as `XCTestCase`s in Xcode (`runTest:module` is the simplest method). `RCTTestModule` is exported to JavaScript as `NativeModules.TestModule`.",
      "source_content_hash": "3e46de9a1c4029f9fe71c470c821e57c56554d54415c7745d85b765f64562760",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "兩個主要元件是 `RCTTestRunner` 和 `RCTTestModule`。`RCTTestRunner` 設定 React Native 環境並提供在 Xcode 中以 `XCTestCase` 運行測試的功能（`runTest:module` 是最簡單的方法）。`RCTTestModule` 會以 `NativeModules.TestModule` 的形式匯出至 JavaScript。"
      }
    },
    {
      "segment_id": "a1fa5396",
      "source_content": "The tests themselves are written in JS, and must call `TestModule.markTestCompleted()` when they are done, otherwise the test will timeout and fail.",
      "source_content_hash": "e673ba2db73664dd2708781d41bf731a6d9343971575fbe3b4a3d9b01479ce47",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "測試本身是用 JavaScript 編寫的，必須在完成時調用 `TestModule.markTestCompleted()`，否則測試會因超時而失敗。"
      }
    },
    {
      "segment_id": "ec619944",
      "source_content": "Test failures are primarily indicated by throwing a JS exception. It is also possible to test error conditions with `runTest:module:initialProps:expectErrorRegex:` or `runTest:module:initialProps:expectErrorBlock:` which will expect an error to be thrown and verify the error matches the provided criteria.",
      "source_content_hash": "59dcc263596761feed9a940611ad0f449a1842cbf04b2a5424dcc0b67cc65df4",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "測試失敗主要通過拋出 JavaScript 異常來表示。也可以使用 `runTest:module:initialProps:expectErrorRegex:` 或 `runTest:module:initialProps:expectErrorBlock:` 來測試錯誤條件，這些方法會預期拋出錯誤並驗證錯誤是否符合提供的條件。"
      }
    },
    {
      "segment_id": "2547a6bb",
      "source_content": "See the following for example usage and integration points:",
      "source_content_hash": "efa274b76b5469d4dbe832232a7303b790cdea743ea134d6dc2e6d4c19137b3b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "請參考以下範例用法和整合點："
      }
    },
    {
      "segment_id": "4d429946",
      "source_content": "- [`IntegrationTestHarnessTest.js`][f-ios-test-harness]\n- [`RNTesterIntegrationTests.m`][f-ios-integration-tests]\n- [`IntegrationTestsApp.js`][f-ios-integration-test-app]",
      "source_content_hash": "1746430cea33be1d6ab01c14cf04eefb956ce985365c14b9cdb4e01fb166c646",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- [`IntegrationTestHarnessTest.js`][f-ios-test-harness]\n- [`RNTesterIntegrationTests.m`][f-ios-integration-tests]\n- [`IntegrationTestsApp.js`][f-ios-integration-test-app]"
      }
    },
    {
      "segment_id": "174449f9",
      "source_content": "[f-ios-test-harness]: https://github.com/facebook/react-native/blob/main/IntegrationTests/IntegrationTestHarnessTest.js",
      "source_content_hash": "22eaca4965530b5c5912e898811af6009d39ed3ddab6597c5f1cd32cdd928a11",
      "node_type": "definition",
      "translatable": true,
      "translations": {
        "zh-hant": "[f-ios-test-harness]: https://github.com/facebook/react-native/blob/main/IntegrationTests/IntegrationTestHarnessTest.js"
      }
    },
    {
      "segment_id": "5fc22983",
      "source_content": "[f-ios-integration-tests]: https://github.com/facebook/react-native/blob/main/RNTester/RNTesterIntegrationTests/RNTesterIntegrationTests.m",
      "source_content_hash": "138043e0c91152edf8dc1f0e37a600ef19016a1457ac763fcd7b466b503370d1",
      "node_type": "definition",
      "translatable": true,
      "translations": {
        "zh-hant": "[f-ios-integration-tests]: https://github.com/facebook/react-native/blob/main/RNTester/RNTesterIntegrationTests/RNTesterIntegrationTests.m"
      }
    },
    {
      "segment_id": "55368872",
      "source_content": "[f-ios-integration-test-app]: https://github.com/facebook/react-native/blob/main/IntegrationTests/IntegrationTestsApp.js",
      "source_content_hash": "74ffacf4f20f15708cbbc9ddd611ce6a1dd16b9ed3013d48ba86c11360c7c537",
      "node_type": "definition",
      "translatable": true,
      "translations": {
        "zh-hant": "[f-ios-integration-test-app]: https://github.com/facebook/react-native/blob/main/IntegrationTests/IntegrationTestsApp.js"
      }
    },
    {
      "segment_id": "f8edb6d2",
      "source_content": "### iOS Snapshot Tests",
      "source_content_hash": "6a23f8d59bc2ceb5e763b9f282afadb33efb579ec35558ccf9136dd92372935e",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### iOS 快照測試"
      }
    },
    {
      "segment_id": "1862c5fe",
      "source_content": "A common type of integration test is the snapshot test. These tests render a component, and verify snapshots of the screen against reference images using `TestModule.verifySnapshot()`, using the [`FBSnapshotTestCase`](https://github.com/facebook/ios-snapshot-test-case) library behind the scenes. Reference images are recorded by setting `recordMode = YES` on the `RCTTestRunner`, then running the tests.",
      "source_content_hash": "ae700982c83ad2b74f0c2b98dc535f10c322bdb6fdf0d886b91512bd278c1d7d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "A common type of integration test is the snapshot test. These tests render a component, and verify snapshots of the screen against reference images using `TestModule.verifySnapshot()`, using the [`FBSnapshotTestCase`](https://github.com/facebook/ios-snapshot-test-case) library behind the scenes. Reference images are recorded by setting `recordMode = YES` on the `RCTTestRunner`, then running the tests."
      }
    },
    {
      "segment_id": "6ca4479f",
      "source_content": "Snapshots will differ slightly between 32 and 64 bit, and various OS versions, so it's recommended that you enforce tests are run with the [correct configuration](https://github.com/facebook/react-native/blob/main/scripts/.tests.env).",
      "source_content_hash": "8eae61384a351bdf9d7cc950bcb66ab14a0a5d80c6f28a3e647d554ed2f72269",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "快照在 32 位和 64 位系統以及不同操作系統版本之間會略有不同，因此建議確保測試在[正確配置](https://github.com/facebook/react-native/blob/main/scripts/.tests.env)下運行。"
      }
    },
    {
      "segment_id": "a2c0166e",
      "source_content": "It's also highly recommended that all network data be mocked out, along with other potentially troublesome dependencies. See [`SimpleSnapshotTest`](https://github.com/facebook/react-native/blob/main/IntegrationTests/SimpleSnapshotTest.js) for a basic example.",
      "source_content_hash": "b9e473661b78b7f95f4b313fb827d9087b2bf9428decf3c5d0c9d8630b4a4434",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "強烈建議模擬所有網絡數據以及其他可能造成問題的依賴項。請參考 [`SimpleSnapshotTest`](https://github.com/facebook/react-native/blob/main/IntegrationTests/SimpleSnapshotTest.js) 查看基本範例。"
      }
    },
    {
      "segment_id": "c1eaf30b",
      "source_content": "If you make a change that affects a snapshot test in a pull request, such as adding a new example case to one of the examples that is snapshotted, you'll need to re-record the snapshot reference image.",
      "source_content_hash": "fc5d64458cfcf3b90bca07a6f6143e97faacbe3e5511fa80bd8f7116a329ef93",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "如果你在拉取請求中進行了影響快照測試的更改（例如在快照範例中添加了一個新的案例），則需要重新記錄快照參考圖片。"
      }
    },
    {
      "segment_id": "f0984c2a",
      "source_content": "To do this, change `recordMode` flag to `_runner.recordMode = YES;` in [RNTester/RNTesterSnapshotTests.m](https://github.com/facebook/react-native/blob/136666e2e7d2bb8d3d51d599fc1384a2f68c43d3/RNTester/RNTesterIntegrationTests/RNTesterSnapshotTests.m#L29), re-run the failing tests, then flip record back to `NO` and submit/update your pull request and wait to see if the CircleCI build passes.",
      "source_content_hash": "0fb46a17d2694d870b4833993c0ee80eb1ce76580a9529da6e9a894e713a91f8",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "To do this, change `recordMode` flag to `_runner.recordMode = YES;` in [RNTester/RNTesterSnapshotTests.m](https://github.com/facebook/react-native/blob/136666e2e7d2bb8d3d51d599fc1384a2f68c43d3/RNTester/RNTesterIntegrationTests/RNTesterSnapshotTests.m#L29), re-run the failing tests, then flip record back to `NO` and submit/update your pull request and wait to see if the CircleCI build passes."
      }
    },
    {
      "segment_id": "56bc971f",
      "source_content": "### Android Unit Tests",
      "source_content_hash": "9dad0b4aeca6a624b0ec7e6c4812e817b3ed584ca1ad60e76ee61077caa816ae",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### Android 單元測試"
      }
    },
    {
      "segment_id": "0801d969",
      "source_content": "It's a good idea to add an Android unit test whenever you are working on code that can be tested by Java/Kotlin code alone. The Android unit tests are located in `packages/react-native/ReactAndroid/src/test/`.",
      "source_content_hash": "ced84e275aa80943d5652aadd3402394c9b48254e3396c53f75b86f371281935",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "當你處理可以僅通過 Java/Kotlin 代碼測試的代碼時，建議添加一個 Android 單元測試。Android 單元測試位於 `packages/react-native/ReactAndroid/src/test/`。"
      }
    },
    {
      "segment_id": "3c19e221",
      "source_content": "We recommend browsing through these to get an idea of what a good unit test might look like.",
      "source_content_hash": "3b353ca01e1ab75e90eee2302a5f734e7356ef146435c7ab11e2612ae873d0d4",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "建議瀏覽這些測試以了解良好的單元測試應該是什麼樣子。"
      }
    },
    {
      "segment_id": "7974af84",
      "source_content": "## Continuous Testing",
      "source_content_hash": "ad32974f8e5864cde664e72585cde94a54f20c9289d44e0f04e3689776f502d9",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 持續測試"
      }
    },
    {
      "segment_id": "44aaa880",
      "source_content": "We use [CircleCI][config-circleci] to automatically run our open source tests. CircleCI will run these tests whenever a commit is added to a pull request, as a way to help maintainers understand whether a code change introduces a regression. The tests also run on commits to the `main` and `*-stable` branches in order to keep track of the health of these branches.",
      "source_content_hash": "5de8980a2550c086186c73ccb0f2032a4cba7efda418a1ec7a4c2a4a7c4b9cca",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "我們使用 [CircleCI][config-circleci] 自動運行開源測試。每當拉取請求中添加提交時，CircleCI 都會運行這些測試，以幫助維護者了解代碼更改是否引入了回歸。這些測試也會在提交到 `main` 和 `*-stable` 分支時運行，以跟踪這些分支的健康狀況。"
      }
    },
    {
      "segment_id": "028f6891",
      "source_content": "[config-circleci]: https://github.com/facebook/react-native/blob/main/.circleci/config.yml",
      "source_content_hash": "cabd8cb384a2b54b3ef949c34dcf1be97d120b46f51d174d285ef7cece2b707c",
      "node_type": "definition",
      "translatable": true,
      "translations": {
        "zh-hant": "[config-circleci]: https://github.com/facebook/react-native/blob/main/.circleci/config.yml"
      }
    },
    {
      "segment_id": "558df877",
      "source_content": "There's another set of tests that run within Meta's internal test infrastructure. Some of these tests are integration tests defined by internal consumers of React Native (e.g. unit tests for a React Native surface in the Facebook app).",
      "source_content_hash": "b40ed8a9001552ee3ef44ebd1d84703a93c7fd6065bbf7bdb0f74ae14de4cfa3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "還有另一組測試在 Meta 的內部測試基礎設施中運行。其中一些測試是由 React Native 的內部使用者定義的整合測試（例如 Facebook 應用中 React Native 表面的單元測試）。"
      }
    },
    {
      "segment_id": "f38d1cb0",
      "source_content": "These tests run on every commit to the copy of React Native hosted on Facebook's source control. They also run when a pull request is imported to Facebook's source control.",
      "source_content_hash": "6ea3118a783b21f99d302248dc7d3634ef7ca4aee2d17849d76d56c2b63a9cbc",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "這些測試在每次提交到 Facebook 源代碼控制中託管的 React Native 副本時運行。它們也會在拉取請求導入到 Facebook 的源代碼控制時運行。"
      }
    },
    {
      "segment_id": "5f82a1e9",
      "source_content": "If one of these tests fail, you'll need someone at Meta to take a look. Since pull requests can only be imported by Meta employees, whoever imported the pull request should be able to facilitate any details.",
      "source_content_hash": "e2a59fe0020e005218fae4c7114be7cde9b4835b001ff3ecc0b318208a5259c5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "如果這些測試失敗，您需要 Meta 的內部人員協助檢查。由於只有 Meta 員工能導入 pull request，負責導入的人員應能協助處理相關細節。"
      }
    },
    {
      "segment_id": "168f82c4",
      "source_content": ":::note\n**Running CI tests locally:**\nMost open source collaborators rely on CircleCI to see the results of these tests. If you'd rather verify your changes locally using the same configuration as CircleCI, CircleCI provides a [command line interface](https://circleci.com/docs/local-cli) with the ability to run jobs locally.\n:::",
      "source_content_hash": "def0ca0a58a667990f672f8decf596382d3310e207e16aa5314f19768a9f3ca8",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::note\n**在本地執行 CI 測試：**\n大多數開源協作者依賴 CircleCI 查看測試結果。若您希望使用與 CircleCI 相同的配置在本地驗證變更，可透過 CircleCI 提供的[命令行介面](https://circleci.com/docs/local-cli)在本地執行任務。\n:::"
      }
    },
    {
      "segment_id": "c766290e",
      "source_content": "### F.A.Q.",
      "source_content_hash": "d42258e638bb6736f1801c58e9354bbc4047ee5d0332fa4fb178a84ce7e451d6",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 常見問題"
      }
    },
    {
      "segment_id": "d53c8ed4",
      "source_content": "#### How do I upgrade the Xcode version used in CI tests?",
      "source_content_hash": "08d26c9e38690c72a7a2509f2d079df5605d8f4df08c5472cb925539c9526154",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "#### 如何升級 CI 測試使用的 Xcode 版本？"
      }
    },
    {
      "segment_id": "1ecf0882",
      "source_content": "When upgrading to a new version of Xcode, first make sure it is [supported by CircleCI](https://circleci.com/docs/testing-ios#supported-xcode-versions).",
      "source_content_hash": "bd3208da03ff9beb57cd867b78dee327c6b4b21ef4d68811dacdd67dbe8935de",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "升級至新版 Xcode 時，請先確認其[受 CircleCI 支援](https://circleci.com/docs/testing-ios#supported-xcode-versions)。"
      }
    },
    {
      "segment_id": "e77cf7c6",
      "source_content": "You will also need to update the test environment config to make sure tests run on an iOS Simulator that comes installed in the CircleCI machine.",
      "source_content_hash": "ec88221aa582ca689e1bae6a965105cf6e39c6ebaa073ae3a42797dd4a97e84c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "您還需更新測試環境配置，確保測試在 CircleCI 機器已安裝的 iOS 模擬器上執行。"
      }
    },
    {
      "segment_id": "bb1346b6",
      "source_content": "This can also be found in [CircleCI's Xcode version reference](https://circleci.com/docs/2.0/testing-ios/#supported-xcode-versions) by clicking the desired version and looking under Runtimes.",
      "source_content_hash": "c4ce86b1384bdc2f3e6cb17c86c2cf4e85721a8ce5556b78aaef6697972f0931",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此資訊亦可查閱 [CircleCI 的 Xcode 版本參考](https://circleci.com/docs/2.0/testing-ios/#supported-xcode-versions)，點選目標版本後查看「Runtimes」段落。"
      }
    },
    {
      "segment_id": "8664ed0b",
      "source_content": "You can then edit these two files:",
      "source_content_hash": "fadc7c866957bd7e1c1b37a0733d04b21adc3846f0cb72feead9041cb18caee6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "接著編輯以下兩個檔案："
      }
    },
    {
      "segment_id": "6892c8d2",
      "source_content": "- `.circleci/config.yml`\n\n  Edit the `xcode:` line under `macos:` (search for `_XCODE_VERSION`).\n\n- `scripts/.tests.env`\n\n  Edit the `IOS_TARGET_OS` envvar to match the desired iOS Runtime.",
      "source_content_hash": "f1414299ce0190694496d5e6093159cea766e47fb448bae610d9c673664fd342",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- `.circleci/config.yml`\n\n  Edit the `xcode:` line under `macos:` (search for `_XCODE_VERSION`).\n\n- `scripts/.tests.env`\n\n  Edit the `IOS_TARGET_OS` envvar to match the desired iOS Runtime."
      }
    },
    {
      "segment_id": "3e8f45da",
      "source_content": "If you intend to merge this change on GitHub, please make sure to notify a Meta employee as they'll need to update the value of `_XCODE_VERSION` used in the internal Sandcastle RN OSS iOS test in `react_native_oss.py` when they import your pull request.",
      "source_content_hash": "7a5c633fd20be932b337d0ece9ca755a9cc3c5ea0da8bad8574fa86b928eac26",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "If you intend to merge this change on GitHub, please make sure to notify a Meta employee as they'll need to update the value of `_XCODE_VERSION` used in the internal Sandcastle RN OSS iOS test in `react_native_oss.py` when they import your pull request."
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs-contributing/current/how-to-run-and-write-tests.md",
  "last_updated_timestamp": "2025-06-19T15:33:39.549203+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "e0d8347d05b2cc482b75ee47b7ddaa82ef25dfc00edf268077f893586225b467"
  }
}